<?xml version="1.0" encoding="utf-8" ?>
<IDLConversions xmlns="http://dummy.sil.org/IDLConversions.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ParamTypeConversion>
    <Attribute>~out</Attribute>
    <Match>(^|\s+)nsIIDPtr(Shared)?($|\s)</Match>
    <Replace>System.Guid</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>    
    <Match>(^|\s+)nsIIDPtr(Shared)?($|\s)</Match>
    <Replace>System.Guid</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Attribute>~out</Attribute>
    <Match>(^|\s+)nsIIDRef($|\s)</Match>
    <Replace>ref System.Guid</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Attribute>~out</Attribute>
    <Match>(^|\s+)nsCIDRef($|\s)</Match>
    <Replace>ref System.Guid</Replace>
  </ParamTypeConversion>  
  <ParamTypeConversion>
    <Attribute>~out</Attribute>
    <Match>(^|\s+)nsIID($|\s)</Match>
    <Replace>System.Guid</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>    
    <Match>(^|\s+)nsIID($|\s)</Match>
    <Replace>System.Guid</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>    
    <Match>(^|\s+)(ns)?(QIResult)</Match>    
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(voidPtr)(Ptr)?</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>    
    <Match>(^|\s+)(void)[\s]*[*]+[\s*]*</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(void)($|\s)</Match>
    <Replace>System.Void</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>unsigned long long</Match>
    <Replace>System.UInt32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>long long</Match>
    <Replace>System.Int32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>unsigned long</Match>
    <Replace>System.UInt32</Replace>
  </ParamTypeConversion>  
  <ParamTypeConversion>
    <Match>(^|\s+)PRUint8($|\s)</Match>
    <Replace>System.Byte</Replace>
  </ParamTypeConversion>  
  <ParamTypeConversion>
    <Match>(^|\s+)PRUint16Ref</Match>
    <Replace>ref System.UInt16</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)PRUint16</Match>
    <Replace>System.UInt16</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)PRInt16</Match>
    <Replace>System.Int16</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)PRUint64</Match>
    <Replace>System.UInt64</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)TimeStamp</Match>
    <Replace>System.UInt64</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)PRInt64</Match>
    <Replace>System.Int64</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>PRTime</Match>
    <Replace>System.UInt32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>PRThread</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)PRNetAddr(Ptr)*</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)PRLibraryStar(Ptr)*</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>  
  <ParamTypeConversion>
    <Match>PRFileDescStar</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>OSType</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)octet(Ptr)*</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>  
  <ParamTypeConversion>
    <Match>unsigned short[*\s]*</Match>
    <Replace>System.UInt16</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(short)[*\s]*</Match>
    <Replace>System.Int16</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>    
    <Match>(^|\s+)(long)</Match>
    <Replace>System.Int32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>PRInt32</Match>
    <Replace>System.Int32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>PRUint32</Match>
    <Replace>System.UInt32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>unsigned int[*\s]*</Match>
    <Replace>System.UInt32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(int)[*\s]*</Match>
    <Replace>System.Int32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>unsigned</Match>
    <Replace>System.UInt32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <NewAttribute>MarshalAs</NewAttribute>
    <NewAttrValue>UnmanagedType.Bool</NewAttrValue>
    <Match>(^|\s+)boolean</Match>
    <Replace>System.Boolean</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <NewAttribute>MarshalAs</NewAttribute>
    <NewAttrValue>UnmanagedType.Bool</NewAttrValue>
    <Match>(^|\s+)PRBool</Match>
    <Replace>System.Boolean</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(float)[*\s]*</Match>
    <Replace>System.Single</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(double)[*\s]*</Match>
    <Replace>System.Double</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)HRESULT</Match>
    <Replace>System.UInt32</Replace>
  </ParamTypeConversion>  
  <ParamTypeConversion>
    <NewAttribute>MarshalAs</NewAttribute>
    <NewAttrValue>UnmanagedType.LPWStr</NewAttrValue>
    <Match>(^|\s+)(PRUnichar)[\s]*[*]+[\s*]*</Match>
    <Replace>System.String</Replace>
  </ParamTypeConversion>
  <!-- PRUniChar (no *) looks like it should be marshaled as a string as well -->
  <ParamTypeConversion>
    <NewAttribute>MarshalAs</NewAttribute>
    <NewAttrValue>UnmanagedType.LPWStr</NewAttrValue>
    <Match>(^|\s+)(PRUnichar)</Match>
    <Replace>System.String</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>    
    <Match>(^|\s+)(PRUniChar)</Match>
    <Replace>System.Char</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <NewAttribute>MarshalAs</NewAttribute>
    <NewAttrValue>UnmanagedType.CustomMarshaler, MarshalType = "Skybound.Gecko.CustomMarshalers.WStringMarshaler"</NewAttrValue>
    <Match>(^|\s+)(wstring)[*\s]*</Match>
    <Replace>System.String</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <NewAttribute>MarshalAs,-retval,-out</NewAttribute>
    <NewAttrValue>UnmanagedType.LPStruct</NewAttrValue>
    <Match>(^|\s+)(nsIXPCTest)?(ns)?(DOMString)($|\s)</Match>
    <Replace>nsAString</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <NewAttribute>MarshalAs,-retval,-out</NewAttribute>
    <NewAttrValue>UnmanagedType.LPStruct</NewAttrValue>
    <Match>(^|\s+)(nsIXPCTestns)?(AString)($|\s)</Match>
    <Replace>nsAString</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <NewAttribute>MarshalAs,-retval,-out</NewAttribute>
    <NewAttrValue>UnmanagedType.LPStruct</NewAttrValue>
    <Match>ACString</Match>
    <Replace>nsACString</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <NewAttribute>MarshalAs,-retval,-out</NewAttribute>
    <NewAttrValue>UnmanagedType.LPStruct</NewAttrValue>
    <Match>AUTF8String</Match>
    <Replace>nsAUTF8String</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <NewAttribute>MarshalAs</NewAttribute>
    <NewAttrValue>UnmanagedType.LPStr</NewAttrValue>
    <Match>(^|\s+)(string)</Match>
    <Replace>System.String</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <NewAttribute>MarshalAs</NewAttribute>
    <NewAttrValue>UnmanagedType.BStr</NewAttrValue>
    <Match>(^|\s+)BSTR[*\s]*</Match>
    <Replace>System.String</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)buffer</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>  
  <ParamTypeConversion>
    <Match>(UnsignedCharPtr|charPtr)</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>constCharPtr</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)wchar</Match>
    <Replace>System.Char</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <!-- TODO - should be converted to utf16 -->
    <Match>(^|\s+)char</Match>
    <Replace>System.Char</Replace>
  </ParamTypeConversion>
  <!-- explicit renames that start with nsI-->
  <ParamTypeConversion>
    <Match>(^|\s+)nsIPresContext</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(nsIWidget)(Ptr)?</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)nsIntRectRef</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)((^|\s+)nsILayoutHistoryState($|\s)|(^|\s+)nsIWebGLRenderbuffernsIXPCComponents_utils_Sandbox($|\s)|(^|\s+)nsIXPCComponents_Results($|\s)|(^|\s+)nsIXPCComponents_ID($|\s)|(^|\s+)nsIXPCComponents_Exception($|\s)|(^|\s+)nsIXPCComponents_Constructor($|\s)|(^|\s+)nsIXPCComponents_ClassesByID($|\s)|(^|\s+)nsIXPCComponents_Classes($|\s)|(^|\s+)nsITestXPCSomeUselessThing($|\s)|(^|\s+)nsIScriptContext($|\s)|(^|\s+)nsIPresShell($|\s)|(^|\s+)nsIntSizePtr($|\s)|(^|\s+)nsIntRectPtr($|\s)|(^|\s+)nsIFrame($|\s)|(^|\s+)nsIDRef($|\s)|(^|\s+)nsIDPtr($|\s)|(^|\s+)nsID($|\s)|(^|\s+)nsIContent($|\s)|nsIAtomPtr($|\s)|(^|\s+)nsIWordBreaker($|\s)|(^|\s+)nsISupportsArrayEnumFunc($|\s)|(^|\s+)nsIScriptGlobalObject($|\s)|(^|\s+)nsIScriptElement($|\s)|(^|\s+)nsIRegion($|\s)|(^|\s+)nsIPluginInstanceRef($|\s)|(^|\s+)nsIDocument($|\s)|(^|\s+)nsIObjectFrame($|\s)|(^|\s+)nsINodePtr($|\s)|(^|\s+)nsILDAPURL($|\s)|(^|\s+)nsIDOMDOMStringList($|\s)|(^|\s+)nsIContentViewer($|\s)|(^|\s+)nsIContentURIGrouper($|\s)|(^|\s+)nsIDocumentStateListener($|\s)|(^|\s+)nsIContentSecurityPolicy($|\s)|(^|\s+)nsIDocumentPtr($|\s)|(^|\s+)nsIContentPrefObserver($|\s)|(^|\s+)nsIContentPrefCallback($|\s)|(^|\s+)nsIContentPermissionPrompt($|\s)|(^|\s+)nsIFrameMessageListener($|\s)|(^|\s+)nsIFrameLoaderOwner($|\s)|(^|\s+)nsIFrameLoader($|\s)|(^|\s+)nsIContentFilter($|\s)|(^|\s+)nsIDocumentCharsetInfo($|\s)|(^|\s+)nsIPresShellPtr($|\s))|(^|\s+)nsIUnicode(Decoder|Encoder)($|\s)|(^|\s+)nsIFrame($|\s)|(^|\s+)nsIDOMLSInput($|\s)</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <!-- end explicit renames that start with nsI-->
  <ParamTypeConversion>
    <Match>(^|\s+)(nsSize|size_t|nsIntSize)</Match>\s
    <Replace>System.UInt32</Replace>
  </ParamTypeConversion>
  <!-- Interfaces : any other type beginning with 'nsI'  -->
  <ParamTypeConversion>
    <Attribute>~size_is</Attribute>    
    <Match>^\s*(?&lt;type&gt;nsI[^\s]+)</Match>
    <NewAttribute>MarshalAs</NewAttribute>
    <NewAttrValue>UnmanagedType.Interface</NewAttrValue>
    <Replace>${type}</Replace>
  </ParamTypeConversion>
  <!-- unusual stuff -->
  <ParamTypeConversion>    
    <Match>SAFEARRAY[.]*</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>VARIANT_BOOL[.]*</Match>
    <Replace>System.Boolean</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>IUnknown[.]*</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>IDispatch[.]*</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>SCODE[.]*</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>DATE[.]*</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(COMVARIANT)(Ptr)?</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>  
  <!-- explicit renames -->
  <ParamTypeConversion>
    <Match>(^|\s+)nsPresContext</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion> 
  <ParamTypeConversion>
    <Match>(^|\s+)(xpcex)?(JSContext)(Ptr)?</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(xpcex)?(JSVal)(Ptr)?</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(JSObject)(Ptr)?</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)DOMTimeStamp</Match>
    <Replace>System.Int64</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(ImageContainerPtr|ImagePtr)</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)nsresult</Match>
    <Replace>System.Int32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(ns)?(ref)(cnt)?</Match>
    <Replace>System.Int32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(WebGLuint|WebGLenum|WebGLbitfield|nsLoadFlags)</Match>
    <Replace>System.UInt32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(WebGLsizeiptr|WebGLArrayPtr|WebGLArrayBufferPtr)</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(WebGLsizei|WebGLint)</Match>
    <Replace>System.Int32</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(WebGLfloat|WebGLclampf)</Match>
    <Replace>System.Double</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>WebGLboolean</Match>
    <Replace>System.Boolean</Replace>
  </ParamTypeConversion>  
  <ParamTypeConversion>
    <Match>RequestHeaderTuples</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(nsXPTParamInfoPtr|nsXPTMethodInfoPtr|nsXPTConstantPtr|nsXPTType)</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <ParamTypeConversion>
    <Match>(^|\s+)(ResultArray($|\s)|(^|\s+)RangeArray($|\s)|(^|\s+)triggerInfoPtr($|\s)|(^|\s+)PRLibraryPtr($|\s)|(^|\s+)PRFileDescPtr($|\s)|(^|\s+)nsWriteUnicharSegmentFun($|\s)|(^|\s+)nsWrapperCachePtr($|\s)|(^|\s+)NSWindowPtr($|\s)|(^|\s+)nsViewID($|\s)|(^|\s+)nsTimerCallbackFunc($|\s)|(^|\s+)nsScriptObjectTracerPtr($|\s)|(^|\s+)NSSCMSContentCallback($|\s)|(^|\s+)nsReadSegmentFun($|\s)|(^|\s+)nsTaskbarProgressState($|\s)|(^|\s+)nsStringRef($|\s)|(^|\s+)nsPreferencesArrayPtr($|\s)|(^|\s+)nsPreferencePtrConst($|\s)|(^|\s+)nsPreferencePtr($|\s)|(^|\s+)nsPointRef($|\s)|(^|\s+)nsPluginTagType($|\s)|(^|\s+)nsPluginNativeWindowPtr($|\s)|(^|\s+)nsPIDOMWindow($|\s)|(^|\s+)nsNonConstIDPtr($|\s)|(^|\s+)nsNativeIntMarginRef($|\s)|(^|\s+)nsDocShellEditorDataPtr($|\s)|(^|\s+)nsContentViewId($|\s)|(^|\s+)(nsCIDPtr)($|\s)|nsCCTraversalCallbackRef($|\s)|(^|\s+)JSEqualityOp($|\s)|(^|\s+)nsAXPCNativeCallContextPtr($|\s)|(^|\s+)nsASocketHandlerPtr($|\s)|(^|\s+)NPWindowPtr($|\s)|(^|\s+)NPRectPtr($|\s)|(^|\s+)NPRegion($|\s)|(^|\s+)NPPVariable($|\s)|(^|\s+)NPPrintPtr($|\s)|(^|\s+)nativeWindow($|\s)|(^|\s+)nativeChar($|\s)|(^|\s+)jsval($|\s)|(^|\s+)JSRuntime($|\s)|(^|\s+)JSEqualityOp($|\s)|(^|\s+)JSDValue($|\s)|(^|\s+)nsHandlerInfoAction($|\s)|(^|\s+)nsDocShellInfoLoadType($|\s)|(^|\s+)nsDocshellIDArray($|\s)|(^|\s+)nsDevMode($|\s)|(^|\s+)nsCSSStyleSheet($|\s)|(^|\s+)nsCookieStatus($|\s)|(^|\s+)nsCookiePolicy($|\s)|(^|\s+)nsCookieAccess($|\s)|(^|\s+)nsCID($|\s)|nsCharPtrArray($|\s)|(^|\s+)nsCacheStoragePolicy($|\s)|(^|\s+)nsCacheAccessMode($|\s)|(^|\s+)nsAccessibleTextBoundary($|\s)|(^|\s+)NPWindowStarRef($|\s)|(^|\s+)NPByteRangePtr($|\s)|(^|\s+)MSCOMIIDRef($|\s)|(^|\s+)JSTracerPtr($|\s)|(^|\s+)JSStackFramePtr($|\s)|(^|\s+)jsid($|\s)|(^|\s+)JSGCCallback($|\s)|(^|\s+)JSDThreadState($|\s)|(^|\s+)JSDStackFrameInfo($|\s)|(^|\s+)JSDScript($|\s)|(^|\s+)JSDProperty($|\s)|(^|\s+)JSDObject($|\s)|(^|\s+)JSDContext($|\s)|(^|\s+)JSCompartment($|\s)|(^|\s+)Iterator($|\s)|(^|\s+)ConstMessage($|\s)|(^|\s+)HKEY($|\s)|(^|\s+)GuidShared($|\s)|(^|\s+)GuidBTransaction($|\s)|(^|\s+)GuidBObjectStore($|\s)|(^|\s+)GuidBKeyRange($|\s)|(^|\s+)GuidBFactory($|\s)|(^|\s+)GuidBDatabase($|\s)|(^|\s+)gfxContextPtr($|\s)|(^|\s+)gfxContext($|\s)|(^|\s+)gfx(A|Image)?Surface(Ptr)?($|\s)|(^|\s+)FSRef(Ptr)?($|\s)|(^|\s+)FSSpec(Ptr)?($|\s)|(^|\s+)FILE($|\s)|(^|\s+)constTextRangeStyleRef($|\s)|(^|\s+)ConstMessage($|\s)|(^|\s+)constCharStarRef($|\s)|(^|\s+)constCharStarConstStar($|\s)|(^|\s+)const_octet_ptr($|\s)|(^|\s+)CFURLRef($|\s)|(^|\s+)FSRefPtr($|\s)|(^|\s+)AutoCompleteStatus($|\s))|(^|\s+)NPByteRange($|\s)|(^|\s+)txAExprResultPtr($|\s)|(^|\s+)alreadyAddRefed_nsFrameLoader($|\s)|(^|\s+)CERTCertificatePtr($|\s)|(^|\s+)const_nsID_ptr($|\s)|(^|\s+)JSPrincipals($|\s)|(^|\s+)nsCocoaWindow($|\s)|(^|\s+)nsFrameSelection($|\s)|(^|\s+)StringArray($|\s)|(^|\s+)nsNPAPIPluginInstancePtr($|\s)</Match>
    <Replace>System.IntPtr</Replace>
  </ParamTypeConversion>
  <!-- Interfaces : any other type beginning with 'I'  -->
  <ParamTypeConversion>
    <Attribute>~size_is</Attribute>
    <NewAttribute>MarshalAs</NewAttribute>
    <NewAttrValue>UnmanagedType.Interface</NewAttrValue>
    <Match>^\s*(?&lt;type&gt;I[^\s]+)[*\s]*</Match>
    <Replace>${type}</Replace>
  </ParamTypeConversion>
</IDLConversions>

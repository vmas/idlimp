// --------------------------------------------------------------------------------------------
// Copyright (c) 2007, SIL International. All rights reserved.
// 
// File: LanguageTlb.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file LanguageTlb.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace SIL.Fieldworks.Test
{
	using LanguageLib;
	using FwKernelLib;
	using Views;
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	using stdole;
	
	
	public enum LgLineBreak
	{
		
		klbNoBreak,
		
		klbWordBreak,
		
		klbHyphenBreak,
		
		klbLetterBreak,
		
		klbClipBreak,
	}
	
	public enum LgLineBreakStatus
	{
		
		kflbsBrk = 1,
		
		kflbsSpace = 2,
		
		kflbsBrkL = 4,
	}
	
	public enum LgGeneralCharCategory
	{
		
		kccLu,
		
		kccLl,
		
		kccLt,
		
		kccLm,
		
		kccLo,
		
		kccMn,
		
		kccMc,
		
		kccMe,
		
		kccNd,
		
		kccNl,
		
		kccNo,
		
		kccZs,
		
		kccZl,
		
		kccZp,
		
		kccCc,
		
		kccCf,
		
		kccCs,
		
		kccCo,
		
		kccCn,
		
		kccPc,
		
		kccPd,
		
		kccPs,
		
		kccPe,
		
		kccPi,
		
		kccPf,
		
		kccPo,
		
		kccSm,
		
		kccSc,
		
		kccSk,
		
		kccSo,
	}
	
	public enum LgBidiCategory
	{
		
		kbicL,
		
		kbicLRE,
		
		kbicLRO,
		
		kbicR,
		
		kbicAL,
		
		kbicRLE,
		
		kbicRLO,
		
		kbicPDF,
		
		kbicEN,
		
		kbicES,
		
		kbicET,
		
		kbicAN,
		
		kbicCS,
		
		kbicNSM,
		
		kbicBN,
		
		kbicB,
		
		kbicS,
		
		kbicWS,
		
		kbicON,
	}
	
	public enum LgLBP
	{
		
		klbpAI,
		
		klbpAL,
		
		klbpB2,
		
		klbpBA,
		
		klbpBB,
		
		klbpBK,
		
		klbpCB,
		
		klbpCL,
		
		klbpCM,
		
		klbpCR,
		
		klbpEX,
		
		klbpGL,
		
		klbpHY,
		
		klbpID,
		
		klbpIN,
		
		klbpIS,
		
		klbpLF,
		
		klbpNS,
		
		klbpNU,
		
		klbpOP,
		
		klbpPO,
		
		klbpPR,
		
		klbpQU,
		
		klbpSA,
		
		klbpSG,
		
		klbpSP,
		
		klbpSY,
		
		klbpXX,
		
		klbpZW,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("865DF99E-D965-44B6-A5A7-896032C36C6E")]
	public interface ILgCollation
	{
		
		string get_Name(int enc);
		
		void set_Name(int enc, string bstr);
		
		int NameEncodingsCount
		{
			get;
		}
		
		void get_NameEncodings(int cenc, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] out int[] _rgenc);
		
		int Code
		{
			get;
			set;
		}
		
		int WinLCID
		{
			get;
			set;
		}
		
		string WinCollation
		{
			get;
			set;
		}
		
		string IcuResourceName
		{
			get;
			set;
		}
		
		string IcuResourceText
		{
			get;
			set;
		}
		
		void WriteAsXml(IStream _strm, int cchIndent);
		
		void Serialize(IStorage _stg);
		
		void Deserialize(IStorage _stg);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5895B941-D546-11d2-8078-0000C0FB81B5")]
	public interface ILgWritingSystem
	{
		
		string get_Name(int enc);
		
		void set_Name(int enc, string bstr);
		
		string Abbr
		{
			get;
			set;
		}
		
		ITsString get_Description(int enc);
		
		void set_Description(int enc, ITsString _tss);
		
		int Code
		{
			get;
			set;
		}
		
		bool RightToLeft
		{
			get;
			set;
		}
		
		IRenderEngine RenderEngine
		{
			get;
		}
		
		ILgCollatingEngine CollatingEngine
		{
			get;
		}
		
		ILgCharacterPropertyEngine CharPropEngine
		{
			get;
		}
		
		int Encoding
		{
			get;
		}
		
		void SetRenderer(IRenderEngine _reneng);
		
		string FontVariation
		{
			get;
			set;
		}
		
		string DefaultSerif
		{
			get;
			set;
		}
		
		string DefaultSansSerif
		{
			get;
			set;
		}
		
		string DefaultMonospace
		{
			get;
			set;
		}
		
		bool KeyMan
		{
			get;
			set;
		}
		
		string KeyManCtrl
		{
			get;
			set;
		}
		
		int LangId
		{
			get;
			set;
		}
		
		string get_UiName(int enc);
		
		int NameEncodingsCount
		{
			get;
		}
		
		int get_NameEncodings(int cenc);
		
		int DescriptionEncCount
		{
			get;
		}
		
		int get_DescriptionEncs(int cenc);
		
		bool Dirty
		{
			get;
			set;
		}
		
		int Locale
		{
			get;
			set;
		}
		
		int CollationCount
		{
			get;
		}
		
		ILgCollation get_Collation(int icoll);
		
		void RemoveCollation(int icoll);
		
		void set_Collation(int icoll, ILgCollation _coll);
		
		void get_CollationCodes(int ccoll, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] out int[] rgcodes);
		
		ILgCollation GetCollationForCode(int code);
		
		void SetCollationForCode(int code, ILgCollation _coll);
		
		ILgEncodingFactory EncodingFactory
		{
			get;
			set;
		}
		
		void WriteAsXml(IStream _strm, int cchIndent);
		
		void Serialize(IStorage _stg);
		
		void Deserialize(IStorage _stg);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5895B942-D546-11d2-8078-0000C0FB81B5")]
	public interface ILgEncoding
	{
		
		int Encoding
		{
			get;
			set;
		}
		
		string get_Name(int enc);
		
		void set_Name(int enc, string bstrName);
		
		int Locale
		{
			get;
			set;
		}
		
		string LangCode
		{
			get;
		}
		
		string EncodingCode
		{
			get;
		}
		
		ILgStringConverter get_ConverterFrom(int enc);
		
		ILgStringConverter NormalizeEngine
		{
			get;
		}
		
		ILgTokenizer WordBreakEngine
		{
			get;
		}
		
		ILgSpellCheckFactory SpellingFactory
		{
			get;
		}
		
		ILgSpellChecker SpellCheckEngine
		{
			get;
		}
		
		ILgWritingSystem get_WritingSystem(int ws);
		
		void set_WritingSystem(int ws, ILgWritingSystem _wse);
		
		ILgSearchEngine SearchEngine
		{
			get;
		}
		
		void SetDefaultWs(ILgWritingSystem _wse);
		
		void CompileEngines();
		
		int NameEncodingsCount
		{
			get;
		}
		
		int get_NameEncodings(int cenc);
		
		int WritingSystemCount
		{
			get;
		}
		
		int get_WritingSystemCodes(int cws);
		
		bool Dirty
		{
			get;
			set;
		}
		
		int Hvo
		{
			get;
			set;
		}
		
		ILgEncodingFactory EncodingFactory
		{
			get;
			set;
		}
		
		void WriteAsXml(IStream _strm, int cchIndent);
		
		void Serialize(IStorage _stg);
		
		void Deserialize(IStorage _stg);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("17aebfe0-c00a-11d2-8078-0000c0fb81b5")]
	public interface ILgInputMethodEditor
	{
		
		void Setup();
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void Replace(string bstrInput, ITsTextProps _ttpInput, ITsStrBldr _tsbOld, int ichMin, int ichLim, out int _ichModMin, out int _ichModLim, out int _ichIP);
		
		void Backspace(int _ichStart, int cactBackspace, ITsStrBldr _tsbOld, out int _ichModMin, out int _ichModLim, out int _ichIP, out int _cactBsRemaining);
		
		void DeleteForward(int _ichStart, int cactDelForward, ITsStrBldr _tsbInOut, out int _ichModMin, out int _ichModLim, out int _ichIP, out int _cactDfRemaining);
		
		int IsValidInsertionPoint(int ich, ITsString _tss);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("10894680-F384-11d3-B5D1-00400543A266")]
	public interface ILgFontManager
	{
		
		bool IsFontAvailable(string bstrName);
		
		bool IsFontAvailableRgch(int cch, ushort _rgchName);
		
		void AvailableFonts(out string _bstrNames);
		
		void RefreshFontList();
	}
	
	#region LgInputMethodEditor CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgInputMethodEditorClass))]
	[Guid("17aebfe0-c00a-11d2-8078-0000c0fb81b5")]
	public interface LgInputMethodEditor : ILgInputMethodEditor
	{
	}
	
	#region Private _LgInputMethodEditorClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("F74151C0-ABC0-11d3-BC29-00A0CC3A40C6")]
	internal class _LgInputMethodEditorClass : ILgInputMethodEditor, LgInputMethodEditor
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Setup();
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Replace(string bstrInput, ITsTextProps _ttpInput, ITsStrBldr _tsbOld, int ichMin, int ichLim, out int _ichModMin, out int _ichModLim, out int _ichIP);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Backspace(int _ichStart, int cactBackspace, ITsStrBldr _tsbOld, out int _ichModMin, out int _ichModLim, out int _ichIP, out int _cactBsRemaining);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DeleteForward(int _ichStart, int cactDelForward, ITsStrBldr _tsbInOut, out int _ichModMin, out int _ichModLim, out int _ichIP, out int _cactDfRemaining);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int IsValidInsertionPoint(int ich, ITsString _tss);
	}
	#endregion
	
	public static class LgInputMethodEditorClass
	{
		
		delegate LgInputMethodEditor LgInputMethodEditorClassDelegate();
		
		public static LgInputMethodEditor Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgInputMethodEditor)form.Invoke(new LgInputMethodEditorClassDelegate(Create));
				}
			}
			return new _LgInputMethodEditorClass();
		}
	}
	#endregion
	
	#region LgFontManager CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgFontManagerClass))]
	[Guid("10894680-F384-11d3-B5D1-00400543A266")]
	public interface LgFontManager : ILgFontManager
	{
	}
	
	#region Private _LgFontManagerClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("70553ED0-F437-11d3-B5D1-00400543A266")]
	internal class _LgFontManagerClass : ILgFontManager, LgFontManager
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool IsFontAvailable(string bstrName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool IsFontAvailableRgch(int cch, ushort _rgchName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AvailableFonts(out string _bstrNames);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RefreshFontList();
	}
	#endregion
	
	public static class LgFontManagerClass
	{
		
		delegate LgFontManager LgFontManagerClassDelegate();
		
		public static LgFontManager Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgFontManager)form.Invoke(new LgFontManagerClassDelegate(Create));
				}
			}
			return new _LgFontManagerClass();
		}
	}
	#endregion
	
	public enum LgCollatingOptions
	{
		
		fcoDefault = 0,
		
		fcoIgnoreCase = 1,
		
		fcoDontIgnoreVariant = 2,
		
		fcoLim,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8D9C5BE1-03A8-11d3-8078-0000C0FB81B5")]
	public interface ILgCollatingEngine
	{
		
		string get_SortKey(string bstrValue, LgCollatingOptions colopt);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void SortKeyRgch(string _ch, int cchIn, LgCollatingOptions colopt, int cchMaxOut, out string _chKey, out int _cchOut);
		
		int Compare(string bstrValue1, string bstrValue2, LgCollatingOptions colopt);
		
		ILgEncodingFactory EncodingFactory
		{
			get;
			set;
		}
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("FC1C0D0A-0483-11d3-8078-0000C0FB81B5")]
	public interface ILgCharacterPropertyEngine
	{
		
		LgGeneralCharCategory get_GeneralCategory(int ch);
		
		LgBidiCategory get_BidiCategory(int ch);
		
		bool get_IsLetter(int ch);
		
		bool get_IsPunctuation(int ch);
		
		bool get_IsNumber(int ch);
		
		bool get_IsSeparator(int ch);
		
		bool get_IsSymbol(int ch);
		
		bool get_IsMark(int ch);
		
		bool get_IsOther(int ch);
		
		bool get_IsUpper(int ch);
		
		bool get_IsLower(int ch);
		
		bool get_IsTitle(int ch);
		
		bool get_IsModifier(int ch);
		
		bool get_IsOtherLetter(int ch);
		
		bool get_IsOpen(int ch);
		
		bool get_IsClose(int ch);
		
		bool get_IsWordMedial(int ch);
		
		bool get_IsControl(int ch);
		
		int get_ToLowerCh(int ch);
		
		int get_ToUpperCh(int ch);
		
		int get_ToTitleCh(int ch);
		
		string ToLower(string bstr);
		
		string ToUpper(string bstr);
		
		string ToTitle(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void ToLowerRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchOut, out int _cchRet);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void ToUpperRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchOut, out int _cchRet);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void ToTitleRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchOut, out int _cchRet);
		
		bool get_IsUserDefinedClass(int ch, int chClass);
		
		string get_SoundAlikeKey(string bstrValue);
		
		string get_CharacterName(int ch);
		
		string get_Decomposition(int ch);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void DecompositionRgch(int ch, int cchMax, out ushort _rgch, out int _cch, out bool _fHasDecomp);
		
		string get_FullDecomp(int ch);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void FullDecompRgch(int ch, int cchMax, out ushort _rgch, out int _cch, out bool _fHasDecomp);
		
		int get_NumericValue(int ch);
		
		int get_CombiningClass(int ch);
		
		string get_Comment(int ch);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void GetLineBreakProps(string _rgchIn, int cchIn, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rglbOut);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void GetLineBreakStatus([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rglbpIn, int cb, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rglbsOut);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void GetLineBreakInfo(string _rgchIn, int cchIn, int ichMin, int ichLim, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rglbsOut, out int _ichBreak);
		
		string StripDiacritics(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void StripDiacriticsRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchMaxOut, out int _cchOut);
		
		string NormalizeKd(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void NormalizeKdRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchMaxOut, out int _cchOut);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0D224001-03C7-11d3-8078-0000C0FB81B5")]
	public interface ILgSearchEngine
	{
		
		void SetPattern(string bstrPattern, bool fIgnoreCase, bool fIgnoreModifiers, bool fUseSoundAlike, bool fUseWildCards);
		
		void SetReplacePattern(string bstrPattern);
		
		bool ShowPatternDialog(string bstrTitle, ILgWritingSystem _wse, bool fForReplace);
		
		bool FindString(string bstrSource, int ichFirst, out int ichMinFound, out int ichLimFound);
		
		string FindReplace(string bstrSource, int ichFirst, out int ichMinFound, out int ichLimFound);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0D224002-03C7-11d3-8078-0000C0FB81B5")]
	public interface ILgStringConverter
	{
		
		string ConvertString(string bstrIn);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void ConvertStringRgch(string _rgch, int cch, int cchMax, out string _rgchOut, out int _cchOut);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0D224003-03C7-11d3-8078-0000C0FB81B5")]
	public interface ILgTokenizer
	{
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void GetToken(string _rgchInput, int cch, out int _ichMin, out int _ichLim);
		
		int get_TokenStart(string bstrInput, int ichFirst);
		
		int get_TokenEnd(string bstrInput, int ichFirst);
	}
	
	public enum LgSpellCheckOptions
	{
		
		fsplcNil = 0,
		
		fsplcSuggestFromUserDict = 1,
		
		fsplcIgnoreAllCaps = 2,
		
		fsplcIgnoreMixedDigits = 4,
		
		fsplcIgnoreRomanNumerals = 8,
		
		fsplcFindUncappedSentences = 16,
		
		fsplcFindMissingSpaces = 32,
		
		fsplcFindRepeatWord = 64,
		
		fsplcFindExtraSpaces = 128,
		
		fsplcFindSpacesBeforePunc = 256,
		
		fsplcFindSpacesAfterPunc = 512,
		
		fsplcFindInitialNumerals = 2048,
		
		fsplcQuickSuggest = 8192,
		
		fsplcUseAllOpenUdr = 16384,
		
		fsplcSglStepSugg = 65536,
		
		fsplcIgnoreSingleLetter = 131072,
	}
	
	public enum LgSpellCheckResults
	{
		
		scrsNoErrors = 0,
		
		scrsUnknownInputWord = 1,
		
		scrsReturningChangeAlways = 2,
		
		scrsReturningChangeOnce = 3,
		
		scrsInvalidHyphenation = 4,
		
		scrsErrorCapitalization = 5,
		
		scrsWordConsideredAbbreviation = 6,
		
		scrsHyphChangesSpelling = 7,
		
		scrsNoMoreSuggestions = 8,
		
		scrsMoreInfoThanBufferCouldHold = 9,
		
		scrsNoSentenceStartCap = 10,
		
		scrsRepeatWord = 11,
		
		scrsExtraSpaces = 12,
		
		scrsMissingSpace = 13,
		
		scrsInitialNumeral = 14,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0D224006-03C7-11d3-8078-0000C0FB81B5")]
	public interface ILgSpellChecker
	{
		
		void Init(string _szwCustom);
		
		void SetOptions(int grfsplc);
		
		void Check(string _rgchw, int cchw, out int _ichMinBad, out int _ichLimBad, out string _bstrBad, out string _bstrSuggest, out int _scrs);
		
		void Suggest(string _rgchw, int cchw, bool fFirst, out string _bstrSuggest);
		
		void IgnoreAll(string _szw);
		
		void Change(string _szwSrc, string _szwDst, bool fAll);
		
		void AddToUser(string _szw);
		
		void FlushIgnoreList();
		
		void FlushChangeList(bool fAll);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("FC1C0D01-0483-11d3-8078-0000C0FB81B5")]
	public interface ILgSpellCheckFactory
	{
		
		ILgSpellChecker Checker
		{
			get;
		}
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("FC1C0D04-0483-11d3-8078-0000C0FB81B5")]
	public interface ILgNumericEngine
	{
		
		string get_IntToString(int n);
		
		string get_IntToPrettyString(int n);
		
		int get_StringToInt(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void StringToIntRgch(string _rgch, int cch, out int _n, out int _ichUnused);
		
		string get_DblToString(double dbl, int cchFracDigits);
		
		string get_DblToPrettyString(double dbl, int cchFracDigits);
		
		string get_DblToExpString(double dbl, int cchFracDigits);
		
		double get_StringToDbl(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void StringToDblRgch(string _rgch, int cch, out double _dbl, out int _ichUnused);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("FC1C0D09-0483-11d3-8078-0000C0FB81B5")]
	public interface ILgEncodingFactory
	{
		
		ILgEncoding get_Engine(int enc);
		
		ILgEncoding get_EngineOrNull(int enc);
		
		void AddEngine(ILgEncoding _enceng);
		
		void RemoveEngine(int enc);
		
		int GetEncFromStr(string bstr);
		
		string GetLangStrFromEnc(int enc);
		
		string GetStrFromEnc(int enc);
		
		int NumberOfEnc
		{
			get;
		}
		
		void GetEncodings(out int rgenc);
		
		ILgCharacterPropertyEngine UnicodeCharProps
		{
			get;
		}
		
		ILgCollatingEngine get_DefaultCollater(int enc);
		
		ILgCharacterPropertyEngine get_CharPropEngine(int enc, int ws);
		
		IRenderEngine get_Renderer(int enc, int ws);
		
		void Shutdown();
		
		void SaveEncodings();
		
		void Serialize(IStorage _stg);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("4B009D1F-AEE2-4D83-9208-9DF742A42DF3")]
	public interface ILgEncodingFactoryBuilder
	{
		
		ILgEncodingFactory GetEncodingFactory(IOleDbEncap _ode, IStream _fistLog);
		
		ILgEncodingFactory GetEncodingFactoryNew(string bstrServer, string bstrDatabase, IStream _fistLog);
		
		ILgEncodingFactory Deserialize(IStorage _stg);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("83E27BF1-F711-45B0-8787-1FD636A5718E")]
	public interface ITsStringPlusEncs
	{
		
		void set_String(ILgEncodingFactory _encf, ITsString _tss);
		
		ITsString get_String(ILgEncodingFactory _encf);
		
		string Text
		{
			get;
		}
		
		void Serialize(IStorage _stg);
		
		void Deserialize(IStorage _stg);
	}
	
	public enum LgIPDrawMode
	{
		
		kdmNormal,
		
		kdmSplitPrimary,
		
		kdmSplitSecondary,
	}
	
	public enum LgIpValidResult
	{
		
		kipvrOK,
		
		kipvrBad,
		
		kipvrUnknown,
	}
	
	public enum LgTrailingWsHandling
	{
		
		ktwshAll,
		
		ktwshNoWs,
		
		ktwshOnlyWs,
	}
	
	public enum VwGenericFontNames
	{
		
		kvgfnCustom,
		
		kvgfnSerif,
		
		kvgfnSansSerif,
		
		kvgfnMonospace,
	}
	
	public enum VwFontStyle
	{
		
		kfsNormal,
		
		kfsItalic,
		
		kfsOblique,
	}
	
	public enum VwTextUnderline
	{
		
		ktuNoUnderline,
		
		ktuSingleUnderline,
	}
	
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public struct LgCharRenderProps
	{
		
		public uint clrFore;
		
		public uint clrBack;
		
		public int dympOffset;
		
		public int enc;
		
		public int ws;
		
		public byte fWsRtl;
		
		public int nDirDepth;
		
		public byte ssv;
		
		public byte fBold;
		
		public byte fItalic;
		
		public int dympHeight;
		
		[MarshalAs(UnmanagedType.ByValArray, SizeConst=32)]
		public ushort[] szFaceName;
		
		[MarshalAs(UnmanagedType.ByValArray, SizeConst=64)]
		public ushort[] szFontVar;
	}
	
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public struct LgParaRenderProps
	{
		
		public int dummy;
	}
	
	public enum ScriptDirCode
	{
		
		kfsdcNone = 0,
		
		kfsdcHorizLtr = 1,
		
		kfsdcHorizRtl = 2,
		
		kfsdcVertFromLeft = 4,
		
		kfsdcVertFromRight = 8,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("FC1C0D0D-0483-11d3-8078-0000C0FB81B5")]
	public interface ISimpleInit
	{
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void InitNew([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rgb, int cb);
		
		string InitializationData
		{
			get;
		}
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("92AC8BE8-EDC8-11d3-8078-0000C0FB81B5")]
	public interface IVwGraphics
	{
		
		void InvertRect(int xLeft, int yTop, int xRight, int yBottom);
		
		int ForeColor
		{
			set;
		}
		
		int BackColor
		{
			set;
		}
		
		void DrawRectangle(int xLeft, int yTop, int xRight, int yBottom);
		
		void DrawPolygon(int cvpnt, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] System.Drawing.Point[] _rgvpnt);
		
		void DrawHorzLine(int xLeft, int xRight, int y, int dyHeight, int cdx, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] int[] _rgdx, ref int _dxStart);
		
		void DrawLine(int xLeft, int yTop, int xRight, int yBottom);
		
		void DrawText(int x, int y, int cch, string _rgch, int xStretch);
		
		void DrawTextExt(int x, int y, int cch, ushort _rgchw, uint uOptions, ref Rect _rect, int _rgdx);
		
		void GetTextExtent(int cch, string _rgch, out int _x, out int _y);
		
		int GetTextLeadWidth(int cch, string _rgch, int ich, int xStretch);
		
		void GetClipRect(out int _xLeft, out int _yTop, out int _xRight, out int _yBottom);
		
		int GetFontEmSquare();
		
		void GetGlyphMetrics(int chw, out int _sBoundingWidth, out int _yBoundingHeight, out int _xBoundingX, out int _yBoundingY, out int _xAdvanceX, out int _yAdvanceY);
		
		string GetFontData(int nTableId, out int _cbTableSz);
		
		void XYFromGlyphPoint(int chw, int nPoint, out int _xRet, out int _yRet);
		
		int FontAscent
		{
			get;
		}
		
		int FontDescent
		{
			get;
		}
		
		void ReleaseDC();
		
		int XUnitsPerInch
		{
			get;
			set;
		}
		
		int YUnitsPerInch
		{
			get;
			set;
		}
		
		void SetupGraphics(LgCharRenderProps _chrp);
		
		void RenderPicture(IPicture _pic, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, ref Rect _rcWBounds);
		
		IPicture MakePicture(byte _bData, int cbData);
		
		void PushClipRect(Rect rcClip);
		
		void PopClipRect();
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8E6828A3-8681-4822-B76D-6C4A25CAECE6")]
	public interface IVwGraphicsWin32 : IVwGraphics
	{
		
		new void InvertRect(int xLeft, int yTop, int xRight, int yBottom);
		
		new int ForeColor
		{
			set;
		}
		
		new int BackColor
		{
			set;
		}
		
		new void DrawRectangle(int xLeft, int yTop, int xRight, int yBottom);
		
		new void DrawPolygon(int cvpnt, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] System.Drawing.Point[] _rgvpnt);
		
		new void DrawHorzLine(int xLeft, int xRight, int y, int dyHeight, int cdx, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] int[] _rgdx, ref int _dxStart);
		
		new void DrawLine(int xLeft, int yTop, int xRight, int yBottom);
		
		new void DrawText(int x, int y, int cch, string _rgch, int xStretch);
		
		new void DrawTextExt(int x, int y, int cch, ushort _rgchw, uint uOptions, ref Rect _rect, int _rgdx);
		
		new void GetTextExtent(int cch, string _rgch, out int _x, out int _y);
		
		new int GetTextLeadWidth(int cch, string _rgch, int ich, int xStretch);
		
		new void GetClipRect(out int _xLeft, out int _yTop, out int _xRight, out int _yBottom);
		
		new int GetFontEmSquare();
		
		new void GetGlyphMetrics(int chw, out int _sBoundingWidth, out int _yBoundingHeight, out int _xBoundingX, out int _yBoundingY, out int _xAdvanceX, out int _yAdvanceY);
		
		new string GetFontData(int nTableId, out int _cbTableSz);
		
		new void XYFromGlyphPoint(int chw, int nPoint, out int _xRet, out int _yRet);
		
		new int FontAscent
		{
			get;
		}
		
		new int FontDescent
		{
			get;
		}
		
		new void ReleaseDC();
		
		new int XUnitsPerInch
		{
			get;
			set;
		}
		
		new int YUnitsPerInch
		{
			get;
			set;
		}
		
		new void SetupGraphics(LgCharRenderProps _chrp);
		
		new void RenderPicture(IPicture _pic, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, ref Rect _rcWBounds);
		
		new IPicture MakePicture(byte _bData, int cbData);
		
		new void PushClipRect(Rect rcClip);
		
		new void PopClipRect();
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		void Initialize(System.IntPtr hdc);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		System.IntPtr GetDeviceContext();
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		void SetMeasureDc(System.IntPtr hdc);
		
		void SetClipRect(ref Rect _rcClip);
	}
	
	#region VwGraphicsWin32 CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwGraphicsWin32Class))]
	[Guid("8E6828A3-8681-4822-B76D-6C4A25CAECE6")]
	public interface VwGraphicsWin32 : IVwGraphicsWin32
	{
	}
	
	#region Private _VwGraphicsWin32Class class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("D9F93A03-8F8F-4e1d-B001-F373C7651B66")]
	internal class _VwGraphicsWin32Class : IVwGraphicsWin32, VwGraphicsWin32
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void InvertRect(int xLeft, int yTop, int xRight, int yBottom);
		
		public virtual extern int ForeColor
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int BackColor
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DrawRectangle(int xLeft, int yTop, int xRight, int yBottom);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DrawPolygon(int cvpnt, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] System.Drawing.Point[] _rgvpnt);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DrawHorzLine(int xLeft, int xRight, int y, int dyHeight, int cdx, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] int[] _rgdx, ref int _dxStart);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DrawLine(int xLeft, int yTop, int xRight, int yBottom);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DrawText(int x, int y, int cch, string _rgch, int xStretch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DrawTextExt(int x, int y, int cch, ushort _rgchw, uint uOptions, ref Rect _rect, int _rgdx);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetTextExtent(int cch, string _rgch, out int _x, out int _y);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int GetTextLeadWidth(int cch, string _rgch, int ich, int xStretch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetClipRect(out int _xLeft, out int _yTop, out int _xRight, out int _yBottom);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int GetFontEmSquare();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetGlyphMetrics(int chw, out int _sBoundingWidth, out int _yBoundingHeight, out int _xBoundingX, out int _yBoundingY, out int _xAdvanceX, out int _yAdvanceY);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string GetFontData(int nTableId, out int _cbTableSz);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void XYFromGlyphPoint(int chw, int nPoint, out int _xRet, out int _yRet);
		
		public virtual extern int FontAscent
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern int FontDescent
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ReleaseDC();
		
		public virtual extern int XUnitsPerInch
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int YUnitsPerInch
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetupGraphics(LgCharRenderProps _chrp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RenderPicture(IPicture _pic, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, ref Rect _rcWBounds);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IPicture MakePicture(byte _bData, int cbData);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void PushClipRect(Rect rcClip);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void PopClipRect();
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Initialize(System.IntPtr hdc);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern System.IntPtr GetDeviceContext();
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetMeasureDc(System.IntPtr hdc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetClipRect(ref Rect _rcClip);
	}
	#endregion
	
	public static class VwGraphicsWin32Class
	{
		
		delegate VwGraphicsWin32 VwGraphicsWin32ClassDelegate();
		
		public static VwGraphicsWin32 Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwGraphicsWin32)form.Invoke(new VwGraphicsWin32ClassDelegate(Create));
				}
			}
			return new _VwGraphicsWin32Class();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("92AC8BE4-EDC8-11d3-8078-0000C0FB81B5")]
	public interface ITextSource
	{
		
		void Fetch(int ichMin, int ichLim, out string _rgchBuf);
		
		void GetCharProps(int ich, out LgCharRenderProps _chrp, out int _ichMin, out int _ichLim);
		
		void GetParaProps(int ich, out LgParaRenderProps _chrp, out int _ichMin, out int _ichLim);
		
		void GetCharStringProp(int ich, int nId, out string _bstr, out int _ichMin, out int _ichLim);
		
		void GetParaStringProp(int ich, int nId, out string _bstr, out int _ichMin, out int _ichLim);
		
		int Length
		{
			get;
		}
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("DB090C32-A229-4677-9A6C-F1AA3BE5618E")]
	public interface ILgSegment
	{
		
		void DrawText(int ichBase, IVwGraphics _vg, Rect rcSrc, Rect rcDst, out int dxdWidth);
		
		void Recompute(int ichBase, IVwGraphics _vg);
		
		int get_Width(int ichBase, IVwGraphics _vg);
		
		int get_RightOverhang(int ichBase, IVwGraphics _vg);
		
		int get_LeftOverhang(int ichBase, IVwGraphics _vg);
		
		int get_Height(int ichBase, IVwGraphics _vg);
		
		int get_Ascent(int ichBase, IVwGraphics _vg);
		
		void Extent(int ichBase, IVwGraphics _vg, out int _x, out int _y);
		
		Rect BoundingRect(int ichBase, IVwGraphics _vg, Rect rcSrc, Rect rcDst);
		
		void GetActualWidth(int ichBase, IVwGraphics _vg, Rect rcSrc, Rect rcDst, out int dxdWidth);
		
		int get_AscentOverhang(int ichBase, IVwGraphics _vg);
		
		int get_DescentOverhang(int ichBase, IVwGraphics _vg);
		
		bool get_RightToLeft(int ichBase);
		
		void get_DirectionDepth(int ichBase, out int _nDepth, out bool _fWeak);
		
		void SetDirectionDepth(int ichwBase, int nNewDepth);
		
		void get_WritingSystem(int ichBase, out int _enc, out int _ws);
		
		int get_Lim(int ichBase);
		
		int get_LimInterest(int ichBase);
		
		void set_EndLine(int ichBase, IVwGraphics _vg, bool fNewVal);
		
		void set_StartLine(int ichBase, IVwGraphics _vg, bool fNewVal);
		
		LgLineBreak get_StartBreakWeight(int ichBase, IVwGraphics _vg);
		
		LgLineBreak get_EndBreakWeight(int ichBase, IVwGraphics _vg);
		
		int get_Stretch(int ichBase);
		
		void set_Stretch(int ichBase, int xs);
		
		LgIpValidResult IsValidInsertionPoint(int ichBase, IVwGraphics _vg, int ich);
		
		bool DoBoundariesCoincide(int ichBase, IVwGraphics _vg, bool fBoundaryEnd, bool fBoundaryRight);
		
		void DrawInsertionPoint(int ichBase, IVwGraphics _vg, Rect rcSrc, Rect rcDst, int ich, bool fAssocPrev, bool fOn, LgIPDrawMode dm);
		
		void PositionsOfIP(int ichBase, IVwGraphics _vg, Rect rcSrc, Rect rcDst, int ich, bool fAssocPrev, LgIPDrawMode dm, out Rect rectPrimary, out Rect rectSecondary, out bool _fPrimaryHere, out bool _fSecHere);
		
		void DrawRange(int ichBase, IVwGraphics _vg, Rect rcSrc, Rect rcDst, int ichMin, int ichLim, int ydTop, int ydBottom, bool bOn);
		
		bool PositionOfRange(int ichBase, IVwGraphics _vg, Rect rcSrc, Rect rcDst, int ichMin, int ichim, int ydTop, int ydBottom, ref Rect rsBounds);
		
		void PointToChar(int ichBase, IVwGraphics _vg, Rect rcSrc, Rect rcDst, System.Drawing.Point _tdClickPosition, out int _ich, out bool _fAssocPrev);
		
		void ArrowKeyPosition(int ichBase, IVwGraphics _vg, ref int _ich, ref bool _fAssocPrev, bool fRight, bool fMovingIn, out bool _fResult);
		
		void ExtendSelectionPosition(int ichBase, IVwGraphics _vg, ref int _ich, bool fAssocPrevMatch, bool fAssocPrevNeeded, int ichAnchor, bool fRight, bool fMovingIn, out bool _fRet);
		
		void GetCharPlacement(int ichBase, IVwGraphics _vg, int ichMin, int ichLim, Rect rcSrc, Rect rcDst, bool fSkipSpace, int cxdMax, out int _cxd, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _rgxdLefts, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _rgxdRights, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _rgydTops);
		
		void GetInitialization(int cbDat, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rgbDat, out int _cbDatRet);
		
		void GetGlyphsAndPositions(int ichBase, IVwGraphics _vg, Rect rcSrc, Rect rcDst, int cchMax, out int _cchRet, out string _rgchGlyphs, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _rgxd, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _rgyd);
		
		void GetCharData(int ichBase, int cchMax, out string _rgch, out int _cchRet);
	}
	
	public enum LgEndSegmentType
	{
		
		kestNoMore,
		
		kestMoreLines,
		
		kestHardBreak,
		
		kestBadBreak,
		
		kestOkayBreak,
		
		kestWsBreak,
		
		kestMoreWhtsp,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("92AC8BE2-EDC8-11d3-8078-0000C0FB81B5")]
	public interface IRenderEngine
	{
		
		void FontIsValid();
		
		int SegDatMaxLength
		{
			get;
		}
		
		void FindBreakPoint(
					IVwGraphics _vg, 
					ITextSource _ts, 
					int ichMin, 
					int ichLim, 
					int ichLimBacktrack, 
					bool fNeedFinalBreak, 
					bool fStartLine, 
					int dxMaxWidth, 
					LgLineBreak lbPref, 
					LgLineBreak lbMax, 
					LgTrailingWsHandling twsh, 
					bool fParaRightToLeft, 
					out ILgSegment _psegRet, 
					out int _dichLimSeg, 
					out int _dxWidth, 
					out LgEndSegmentType _est, 
					int cbPrev, 
					[MarshalAs(UnmanagedType.LPArray, SizeParamIndex=16)] byte[] _bPrevSegDat, 
					int cbNextMax, 
					[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _bNextSegDat, 
					out int _cbNextSegDat, 
					out int _dichContext);
		
		int ScriptDirection
		{
			get;
		}
		
		System.Guid ClassId
		{
			get;
		}
		
		void InterpretChrp(ref LgCharRenderProps _chrp);
		
		ILgEncodingFactory EncodingFactory
		{
			get;
			set;
		}
	}
	
	#region RomRenderEngine CoClass definitions
	[ComImport()]
	[CoClass(typeof(_RomRenderEngineClass))]
	[Guid("92AC8BE2-EDC8-11d3-8078-0000C0FB81B5")]
	public interface RomRenderEngine : IRenderEngine
	{
	}
	
	#region Private _RomRenderEngineClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("92AC8BE1-EDC8-11d3-8078-0000C0FB81B5")]
	internal class _RomRenderEngineClass : IRenderEngine, RomRenderEngine
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FontIsValid();
		
		public virtual extern int SegDatMaxLength
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FindBreakPoint(
					IVwGraphics _vg, 
					ITextSource _ts, 
					int ichMin, 
					int ichLim, 
					int ichLimBacktrack, 
					bool fNeedFinalBreak, 
					bool fStartLine, 
					int dxMaxWidth, 
					LgLineBreak lbPref, 
					LgLineBreak lbMax, 
					LgTrailingWsHandling twsh, 
					bool fParaRightToLeft, 
					out ILgSegment _psegRet, 
					out int _dichLimSeg, 
					out int _dxWidth, 
					out LgEndSegmentType _est, 
					int cbPrev, 
					[MarshalAs(UnmanagedType.LPArray, SizeParamIndex=16)] byte[] _bPrevSegDat, 
					int cbNextMax, 
					[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _bNextSegDat, 
					out int _cbNextSegDat, 
					out int _dichContext);
		
		public virtual extern int ScriptDirection
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern System.Guid ClassId
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void InterpretChrp(ref LgCharRenderProps _chrp);
		
		public virtual extern ILgEncodingFactory EncodingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
	}
	#endregion
	
	public static class RomRenderEngineClass
	{
		
		delegate RomRenderEngine RomRenderEngineClassDelegate();
		
		public static RomRenderEngine Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (RomRenderEngine)form.Invoke(new RomRenderEngineClassDelegate(Create));
				}
			}
			return new _RomRenderEngineClass();
		}
	}
	#endregion
	
	#region UniscribeEngine CoClass definitions
	[ComImport()]
	[CoClass(typeof(_UniscribeEngineClass))]
	[Guid("92AC8BE2-EDC8-11d3-8078-0000C0FB81B5")]
	public interface UniscribeEngine : IRenderEngine
	{
	}
	
	#region Private _UniscribeEngineClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("95AF9827-FF1F-4e81-B577-06D5235E672C")]
	internal class _UniscribeEngineClass : IRenderEngine, UniscribeEngine
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FontIsValid();
		
		public virtual extern int SegDatMaxLength
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FindBreakPoint(
					IVwGraphics _vg, 
					ITextSource _ts, 
					int ichMin, 
					int ichLim, 
					int ichLimBacktrack, 
					bool fNeedFinalBreak, 
					bool fStartLine, 
					int dxMaxWidth, 
					LgLineBreak lbPref, 
					LgLineBreak lbMax, 
					LgTrailingWsHandling twsh, 
					bool fParaRightToLeft, 
					out ILgSegment _psegRet, 
					out int _dichLimSeg, 
					out int _dxWidth, 
					out LgEndSegmentType _est, 
					int cbPrev, 
					[MarshalAs(UnmanagedType.LPArray, SizeParamIndex=16)] byte[] _bPrevSegDat, 
					int cbNextMax, 
					[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _bNextSegDat, 
					out int _cbNextSegDat, 
					out int _dichContext);
		
		public virtual extern int ScriptDirection
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern System.Guid ClassId
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void InterpretChrp(ref LgCharRenderProps _chrp);
		
		public virtual extern ILgEncodingFactory EncodingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
	}
	#endregion
	
	public static class UniscribeEngineClass
	{
		
		delegate UniscribeEngine UniscribeEngineClassDelegate();
		
		public static UniscribeEngine Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (UniscribeEngine)form.Invoke(new UniscribeEngineClassDelegate(Create));
				}
			}
			return new _UniscribeEngineClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("88EE9FE0-6B69-4087-9595-00BFCCF50CA8")]
	public interface IRenderingFeatures
	{
		
		void GetFeatureIDs(int cMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _rgFids, out int _cfid);
		
		void GetFeatureLabel(int fid, int nLanguage, out string _bstrLabel);
		
		void GetFeatureValues(int fid, int cfvalMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _rgfval, out int _cfval, out int _fvalDefault);
		
		void GetFeatureValueLabel(int fid, int fval, int nLanguage, out string _bstrLabel);
	}
	
	#region TsStringPlusEncs CoClass definitions
	[ComImport()]
	[CoClass(typeof(_TsStringPlusEncsClass))]
	[Guid("83E27BF1-F711-45B0-8787-1FD636A5718E")]
	public interface TsStringPlusEncs : ITsStringPlusEncs
	{
	}
	
	#region Private _TsStringPlusEncsClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("5299D6EB-630F-4103-A401-01D0FA3F5638")]
	internal class _TsStringPlusEncsClass : ITsStringPlusEncs, TsStringPlusEncs
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_String(ILgEncodingFactory _encf, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString get_String(ILgEncodingFactory _encf);
		
		public virtual extern string Text
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Serialize(IStorage _stg);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Deserialize(IStorage _stg);
	}
	#endregion
	
	public static class TsStringPlusEncsClass
	{
		
		delegate TsStringPlusEncs TsStringPlusEncsClassDelegate();
		
		public static TsStringPlusEncs Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (TsStringPlusEncs)form.Invoke(new TsStringPlusEncsClassDelegate(Create));
				}
			}
			return new _TsStringPlusEncsClass();
		}
	}
	#endregion
	
	#region LgSystemCollater CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgSystemCollaterClass))]
	[Guid("8D9C5BE1-03A8-11d3-8078-0000C0FB81B5")]
	public interface LgSystemCollater : ILgCollatingEngine
	{
	}
	
	#region Private _LgSystemCollaterClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("8D9C5BE3-03A8-11d3-8078-0000C0FB81B5")]
	internal class _LgSystemCollaterClass : ILgCollatingEngine, LgSystemCollater
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_SortKey(string bstrValue, LgCollatingOptions colopt);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SortKeyRgch(string _ch, int cchIn, LgCollatingOptions colopt, int cchMaxOut, out string _chKey, out int _cchOut);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int Compare(string bstrValue1, string bstrValue2, LgCollatingOptions colopt);
		
		public virtual extern ILgEncodingFactory EncodingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
	}
	#endregion
	
	public static class LgSystemCollaterClass
	{
		
		delegate LgSystemCollater LgSystemCollaterClassDelegate();
		
		public static LgSystemCollater Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgSystemCollater)form.Invoke(new LgSystemCollaterClassDelegate(Create));
				}
			}
			return new _LgSystemCollaterClass();
		}
	}
	#endregion
	
	#region LgUnicodeCollater CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgUnicodeCollaterClass))]
	[Guid("8D9C5BE1-03A8-11d3-8078-0000C0FB81B5")]
	public interface LgUnicodeCollater : ILgCollatingEngine
	{
	}
	
	#region Private _LgUnicodeCollaterClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("8D9C5BE4-03A8-11d3-8078-0000C0FB81B5")]
	internal class _LgUnicodeCollaterClass : ILgCollatingEngine, LgUnicodeCollater
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_SortKey(string bstrValue, LgCollatingOptions colopt);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SortKeyRgch(string _ch, int cchIn, LgCollatingOptions colopt, int cchMaxOut, out string _chKey, out int _cchOut);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int Compare(string bstrValue1, string bstrValue2, LgCollatingOptions colopt);
		
		public virtual extern ILgEncodingFactory EncodingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
	}
	#endregion
	
	public static class LgUnicodeCollaterClass
	{
		
		delegate LgUnicodeCollater LgUnicodeCollaterClassDelegate();
		
		public static LgUnicodeCollater Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgUnicodeCollater)form.Invoke(new LgUnicodeCollaterClassDelegate(Create));
				}
			}
			return new _LgUnicodeCollaterClass();
		}
	}
	#endregion
	
	#region LgCharacterPropertyEngine CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgCharacterPropertyEngineClass))]
	[Guid("FC1C0D0A-0483-11d3-8078-0000C0FB81B5")]
	public interface LgCharacterPropertyEngine : ILgCharacterPropertyEngine
	{
	}
	
	#region Private _LgCharacterPropertyEngineClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("FC1C0D10-0483-11d3-8078-0000C0FB81B5")]
	internal class _LgCharacterPropertyEngineClass : ILgCharacterPropertyEngine, LgCharacterPropertyEngine
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern LgGeneralCharCategory get_GeneralCategory(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern LgBidiCategory get_BidiCategory(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsLetter(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsPunctuation(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsNumber(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsSeparator(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsSymbol(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsMark(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsOther(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsUpper(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsLower(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsTitle(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsModifier(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsOtherLetter(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsOpen(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsClose(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsWordMedial(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsControl(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ToLowerCh(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ToUpperCh(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ToTitleCh(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string ToLower(string bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string ToUpper(string bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string ToTitle(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ToLowerRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchOut, out int _cchRet);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ToUpperRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchOut, out int _cchRet);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ToTitleRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchOut, out int _cchRet);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsUserDefinedClass(int ch, int chClass);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_SoundAlikeKey(string bstrValue);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_CharacterName(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_Decomposition(int ch);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DecompositionRgch(int ch, int cchMax, out ushort _rgch, out int _cch, out bool _fHasDecomp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_FullDecomp(int ch);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FullDecompRgch(int ch, int cchMax, out ushort _rgch, out int _cch, out bool _fHasDecomp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_NumericValue(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_CombiningClass(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_Comment(int ch);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetLineBreakProps(string _rgchIn, int cchIn, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rglbOut);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetLineBreakStatus([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rglbpIn, int cb, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rglbsOut);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetLineBreakInfo(string _rgchIn, int cchIn, int ichMin, int ichLim, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rglbsOut, out int _ichBreak);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string StripDiacritics(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void StripDiacriticsRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchMaxOut, out int _cchOut);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string NormalizeKd(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NormalizeKdRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchMaxOut, out int _cchOut);
	}
	#endregion
	
	public static class LgCharacterPropertyEngineClass
	{
		
		delegate LgCharacterPropertyEngine LgCharacterPropertyEngineClassDelegate();
		
		public static LgCharacterPropertyEngine Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgCharacterPropertyEngine)form.Invoke(new LgCharacterPropertyEngineClassDelegate(Create));
				}
			}
			return new _LgCharacterPropertyEngineClass();
		}
	}
	#endregion
	
	#region LgCharPropOverrideEngine CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgCharPropOverrideEngineClass))]
	[Guid("FC1C0D0A-0483-11d3-8078-0000C0FB81B5")]
	public interface LgCharPropOverrideEngine : ILgCharacterPropertyEngine
	{
	}
	
	#region Private _LgCharPropOverrideEngineClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("3BCA8781-182D-11d3-8078-0000C0FB81B5")]
	internal class _LgCharPropOverrideEngineClass : ILgCharacterPropertyEngine, LgCharPropOverrideEngine
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern LgGeneralCharCategory get_GeneralCategory(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern LgBidiCategory get_BidiCategory(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsLetter(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsPunctuation(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsNumber(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsSeparator(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsSymbol(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsMark(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsOther(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsUpper(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsLower(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsTitle(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsModifier(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsOtherLetter(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsOpen(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsClose(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsWordMedial(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsControl(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ToLowerCh(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ToUpperCh(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ToTitleCh(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string ToLower(string bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string ToUpper(string bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string ToTitle(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ToLowerRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchOut, out int _cchRet);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ToUpperRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchOut, out int _cchRet);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ToTitleRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchOut, out int _cchRet);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsUserDefinedClass(int ch, int chClass);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_SoundAlikeKey(string bstrValue);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_CharacterName(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_Decomposition(int ch);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DecompositionRgch(int ch, int cchMax, out ushort _rgch, out int _cch, out bool _fHasDecomp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_FullDecomp(int ch);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FullDecompRgch(int ch, int cchMax, out ushort _rgch, out int _cch, out bool _fHasDecomp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_NumericValue(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_CombiningClass(int ch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_Comment(int ch);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetLineBreakProps(string _rgchIn, int cchIn, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rglbOut);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetLineBreakStatus([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rglbpIn, int cb, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rglbsOut);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetLineBreakInfo(string _rgchIn, int cchIn, int ichMin, int ichLim, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*byte[]*/ _rglbsOut, out int _ichBreak);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string StripDiacritics(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void StripDiacriticsRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchMaxOut, out int _cchOut);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string NormalizeKd(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NormalizeKdRgch(string _rgchIn, int cchIn, out string _rgchOut, int cchMaxOut, out int _cchOut);
	}
	#endregion
	
	public static class LgCharPropOverrideEngineClass
	{
		
		delegate LgCharPropOverrideEngine LgCharPropOverrideEngineClassDelegate();
		
		public static LgCharPropOverrideEngine Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgCharPropOverrideEngine)form.Invoke(new LgCharPropOverrideEngineClassDelegate(Create));
				}
			}
			return new _LgCharPropOverrideEngineClass();
		}
	}
	#endregion
	
	#region LgCPWordTokenizer CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgCPWordTokenizerClass))]
	[Guid("0D224003-03C7-11d3-8078-0000C0FB81B5")]
	public interface LgCPWordTokenizer : ILgTokenizer
	{
	}
	
	#region Private _LgCPWordTokenizerClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("0D224004-03C7-11d3-8078-0000C0FB81B5")]
	internal class _LgCPWordTokenizerClass : ILgTokenizer, LgCPWordTokenizer
	{
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetToken(string _rgchInput, int cch, out int _ichMin, out int _ichLim);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_TokenStart(string bstrInput, int ichFirst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_TokenEnd(string bstrInput, int ichFirst);
	}
	#endregion
	
	public static class LgCPWordTokenizerClass
	{
		
		delegate LgCPWordTokenizer LgCPWordTokenizerClassDelegate();
		
		public static LgCPWordTokenizer Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgCPWordTokenizer)form.Invoke(new LgCPWordTokenizerClassDelegate(Create));
				}
			}
			return new _LgCPWordTokenizerClass();
		}
	}
	#endregion
	
	#region LgWfiSpellChecker CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgWfiSpellCheckerClass))]
	[Guid("FC1C0D01-0483-11d3-8078-0000C0FB81B5")]
	public interface LgWfiSpellChecker : ILgSpellCheckFactory
	{
	}
	
	#region Private _LgWfiSpellCheckerClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("FC1C0D03-0483-11d3-8078-0000C0FB81B5")]
	internal class _LgWfiSpellCheckerClass : ILgSpellCheckFactory, LgWfiSpellChecker
	{
		
		public virtual extern ILgSpellChecker Checker
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
	}
	#endregion
	
	public static class LgWfiSpellCheckerClass
	{
		
		delegate LgWfiSpellChecker LgWfiSpellCheckerClassDelegate();
		
		public static LgWfiSpellChecker Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgWfiSpellChecker)form.Invoke(new LgWfiSpellCheckerClassDelegate(Create));
				}
			}
			return new _LgWfiSpellCheckerClass();
		}
	}
	#endregion
	
	#region LgMSWordSpellChecker CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgMSWordSpellCheckerClass))]
	[Guid("FC1C0D01-0483-11d3-8078-0000C0FB81B5")]
	public interface LgMSWordSpellChecker : ILgSpellCheckFactory
	{
	}
	
	#region Private _LgMSWordSpellCheckerClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("3BCA8782-182D-11d3-8078-0000C0FB81B5")]
	internal class _LgMSWordSpellCheckerClass : ILgSpellCheckFactory, LgMSWordSpellChecker
	{
		
		public virtual extern ILgSpellChecker Checker
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
	}
	#endregion
	
	public static class LgMSWordSpellCheckerClass
	{
		
		delegate LgMSWordSpellChecker LgMSWordSpellCheckerClassDelegate();
		
		public static LgMSWordSpellChecker Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgMSWordSpellChecker)form.Invoke(new LgMSWordSpellCheckerClassDelegate(Create));
				}
			}
			return new _LgMSWordSpellCheckerClass();
		}
	}
	#endregion
	
	#region LgNumericEngine CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgNumericEngineClass))]
	[Guid("FC1C0D04-0483-11d3-8078-0000C0FB81B5")]
	public interface LgNumericEngine : ILgNumericEngine
	{
	}
	
	#region Private _LgNumericEngineClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("FC1C0D08-0483-11d3-8078-0000C0FB81B5")]
	internal class _LgNumericEngineClass : ILgNumericEngine, LgNumericEngine
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_IntToString(int n);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_IntToPrettyString(int n);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_StringToInt(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void StringToIntRgch(string _rgch, int cch, out int _n, out int _ichUnused);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_DblToString(double dbl, int cchFracDigits);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_DblToPrettyString(double dbl, int cchFracDigits);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_DblToExpString(double dbl, int cchFracDigits);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern double get_StringToDbl(string bstr);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void StringToDblRgch(string _rgch, int cch, out double _dbl, out int _ichUnused);
	}
	#endregion
	
	public static class LgNumericEngineClass
	{
		
		delegate LgNumericEngine LgNumericEngineClassDelegate();
		
		public static LgNumericEngine Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgNumericEngine)form.Invoke(new LgNumericEngineClassDelegate(Create));
				}
			}
			return new _LgNumericEngineClass();
		}
	}
	#endregion
	
	#region LgEncodingFactory CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgEncodingFactoryClass))]
	[Guid("FC1C0D09-0483-11d3-8078-0000C0FB81B5")]
	public interface LgEncodingFactory : ILgEncodingFactory
	{
	}
	
	#region Private _LgEncodingFactoryClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("D44E9CA1-190C-11d3-8078-0000C0FB81B5")]
	internal class _LgEncodingFactoryClass : ILgEncodingFactory, LgEncodingFactory
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgEncoding get_Engine(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgEncoding get_EngineOrNull(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AddEngine(ILgEncoding _enceng);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RemoveEngine(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int GetEncFromStr(string bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string GetLangStrFromEnc(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string GetStrFromEnc(int enc);
		
		public virtual extern int NumberOfEnc
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetEncodings(out int rgenc);
		
		public virtual extern ILgCharacterPropertyEngine UnicodeCharProps
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgCollatingEngine get_DefaultCollater(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgCharacterPropertyEngine get_CharPropEngine(int enc, int ws);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IRenderEngine get_Renderer(int enc, int ws);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Shutdown();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SaveEncodings();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Serialize(IStorage _stg);
	}
	#endregion
	
	public static class LgEncodingFactoryClass
	{
		
		delegate LgEncodingFactory LgEncodingFactoryClassDelegate();
		
		public static LgEncodingFactory Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgEncodingFactory)form.Invoke(new LgEncodingFactoryClassDelegate(Create));
				}
			}
			return new _LgEncodingFactoryClass();
		}
	}
	#endregion
	
	#region LgEncodingFactoryBuilder CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgEncodingFactoryBuilderClass))]
	[Guid("4B009D1F-AEE2-4D83-9208-9DF742A42DF3")]
	public interface LgEncodingFactoryBuilder : ILgEncodingFactoryBuilder
	{
	}
	
	#region Private _LgEncodingFactoryBuilderClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("91BD8930-3567-4607-BE39-24F58EC3C838")]
	internal class _LgEncodingFactoryBuilderClass : ILgEncodingFactoryBuilder, LgEncodingFactoryBuilder
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgEncodingFactory GetEncodingFactory(IOleDbEncap _ode, IStream _fistLog);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgEncodingFactory GetEncodingFactoryNew(string bstrServer, string bstrDatabase, IStream _fistLog);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgEncodingFactory Deserialize(IStorage _stg);
	}
	#endregion
	
	public static class LgEncodingFactoryBuilderClass
	{
		
		delegate LgEncodingFactoryBuilder LgEncodingFactoryBuilderClassDelegate();
		
		public static LgEncodingFactoryBuilder Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgEncodingFactoryBuilder)form.Invoke(new LgEncodingFactoryBuilderClassDelegate(Create));
				}
			}
			return new _LgEncodingFactoryBuilderClass();
		}
	}
	#endregion
	
	#region LgCollation CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgCollationClass))]
	[Guid("865DF99E-D965-44B6-A5A7-896032C36C6E")]
	public interface LgCollation : ILgCollation
	{
	}
	
	#region Private _LgCollationClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("CF5077EC-7582-4330-87E6-EFAE05D9FC99")]
	internal class _LgCollationClass : ILgCollation, LgCollation
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_Name(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_Name(int enc, string bstr);
		
		public virtual extern int NameEncodingsCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void get_NameEncodings(int cenc, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] out int[] _rgenc);
		
		public virtual extern int Code
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int WinLCID
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string WinCollation
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string IcuResourceName
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string IcuResourceText
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void WriteAsXml(IStream _strm, int cchIndent);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Serialize(IStorage _stg);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Deserialize(IStorage _stg);
	}
	#endregion
	
	public static class LgCollationClass
	{
		
		delegate LgCollation LgCollationClassDelegate();
		
		public static LgCollation Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgCollation)form.Invoke(new LgCollationClassDelegate(Create));
				}
			}
			return new _LgCollationClass();
		}
	}
	#endregion
	
	#region LgWritingSystem CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgWritingSystemClass))]
	[Guid("5895B941-D546-11d2-8078-0000C0FB81B5")]
	public interface LgWritingSystem : ILgWritingSystem
	{
	}
	
	#region Private _LgWritingSystemClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("5EEAE2A2-144F-11D3-8078-0000C0FB81B5")]
	internal class _LgWritingSystemClass : ILgWritingSystem, LgWritingSystem
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_Name(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_Name(int enc, string bstr);
		
		public virtual extern string Abbr
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString get_Description(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_Description(int enc, ITsString _tss);
		
		public virtual extern int Code
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool RightToLeft
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern IRenderEngine RenderEngine
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern ILgCollatingEngine CollatingEngine
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern ILgCharacterPropertyEngine CharPropEngine
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern int Encoding
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetRenderer(IRenderEngine _reneng);
		
		public virtual extern string FontVariation
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string DefaultSerif
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string DefaultSansSerif
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string DefaultMonospace
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool KeyMan
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string KeyManCtrl
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int LangId
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_UiName(int enc);
		
		public virtual extern int NameEncodingsCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_NameEncodings(int cenc);
		
		public virtual extern int DescriptionEncCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_DescriptionEncs(int cenc);
		
		public virtual extern bool Dirty
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int Locale
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int CollationCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgCollation get_Collation(int icoll);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RemoveCollation(int icoll);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_Collation(int icoll, ILgCollation _coll);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void get_CollationCodes(int ccoll, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=0)] out int[] rgcodes);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgCollation GetCollationForCode(int code);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetCollationForCode(int code, ILgCollation _coll);
		
		public virtual extern ILgEncodingFactory EncodingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void WriteAsXml(IStream _strm, int cchIndent);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Serialize(IStorage _stg);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Deserialize(IStorage _stg);
	}
	#endregion
	
	public static class LgWritingSystemClass
	{
		
		delegate LgWritingSystem LgWritingSystemClassDelegate();
		
		public static LgWritingSystem Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgWritingSystem)form.Invoke(new LgWritingSystemClassDelegate(Create));
				}
			}
			return new _LgWritingSystemClass();
		}
	}
	#endregion
	
	#region LgEncoding CoClass definitions
	[ComImport()]
	[CoClass(typeof(_LgEncodingClass))]
	[Guid("5895B942-D546-11d2-8078-0000C0FB81B5")]
	public interface LgEncoding : ILgEncoding
	{
	}
	
	#region Private _LgEncodingClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("B5A76AE2-1455-11D3-8078-0000C0FB81B5")]
	internal class _LgEncodingClass : ILgEncoding, LgEncoding
	{
		
		public virtual extern int Encoding
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_Name(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_Name(int enc, string bstrName);
		
		public virtual extern int Locale
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string LangCode
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern string EncodingCode
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgStringConverter get_ConverterFrom(int enc);
		
		public virtual extern ILgStringConverter NormalizeEngine
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern ILgTokenizer WordBreakEngine
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern ILgSpellCheckFactory SpellingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern ILgSpellChecker SpellCheckEngine
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ILgWritingSystem get_WritingSystem(int ws);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_WritingSystem(int ws, ILgWritingSystem _wse);
		
		public virtual extern ILgSearchEngine SearchEngine
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetDefaultWs(ILgWritingSystem _wse);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CompileEngines();
		
		public virtual extern int NameEncodingsCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_NameEncodings(int cenc);
		
		public virtual extern int WritingSystemCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_WritingSystemCodes(int cws);
		
		public virtual extern bool Dirty
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int Hvo
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern ILgEncodingFactory EncodingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void WriteAsXml(IStream _strm, int cchIndent);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Serialize(IStorage _stg);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Deserialize(IStorage _stg);
	}
	#endregion
	
	public static class LgEncodingClass
	{
		
		delegate LgEncoding LgEncodingClassDelegate();
		
		public static LgEncoding Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (LgEncoding)form.Invoke(new LgEncodingClassDelegate(Create));
				}
			}
			return new _LgEncodingClass();
		}
	}
	#endregion
}

// --------------------------------------------------------------------------------------------
// Copyright (c) 2007, SIL International. All rights reserved.
// 
// File: DbAccessTlb.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file DbAccessTlb.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace SIL.Fieldworks.Test
{
	using LanguageLib;
	using FwKernelLib;
	using Views;
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	using stdole;
	
	
	public enum SqlStmtType
	{
		
		knSqlStmtNoResults = 0,
		
		knSqlStmtSelectWithOneRowset = 1,
		
		knSqlStmtStoredProcedure = 2,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("21993161-3E24-11d4-A1BD-00C04F0C9593")]
	public interface IOleDbCommand
	{
		
		void ColValWasNull(out int _fIsNull);
		
		void ExecCommand(string bstrSqlStatement, int nStatementType);
		
		void GetColValue(uint iluColIndex, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*ULONG[]*/ _rgluDataBuffer, uint cbBufferLength, out uint _cbAmtBuffUsed, out bool _fIsNull, int cbPad);
		
		void GetInt(int iColIndex, out int _nValue);
		
		void GetParameter(uint iluColIndex, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*ULONG[]*/ _rgluDataBuffer, uint cluBufferLength, out bool _fIsNull);
		
		void GetRowset(int nRowsBuffered);
		
		void Init([MarshalAs(UnmanagedType.IUnknown)] object _unkSession, IStream _fistLog);
		
		void NextRow(out bool _fMoreRows);
		
		void SetParameter(uint iluParamIndex, uint dwFlags, string bstrParamName, ushort nDataType, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] uint[] _rgluDataBuffer, uint cluBufferLength);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("AAB4A4A2-3C83-11d4-A1BB-00C04F0C9593")]
	public interface IOleDbEncap
	{
		
		void BeginTrans();
		
		void CommitTrans();
		
		void CreateCommand(out IOleDbCommand _podc);
		
		void Init(string bstrServer, string bstrDatabase, IStream _fistLog);
		
		void IsTransactionOpen(out bool _fTransactionOpen);
		
		void RollbackTrans();
		
		void RollbackSavePoint(string bstrSavePoint);
		
		void SetSavePoint(out string _bstr);
		
		void SetSavePointOrBeginTrans(out string _bstr);
		
		void InitMSDE(IStream _fistLog, bool fForce);
		
		string Server
		{
			get;
		}
		
		string Database
		{
			get;
		}
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("94CB14D1-46EF-11d4-A1C6-00C04F0C9593")]
	public interface IFwMetaDataCache
	{
		
		void Init(IOleDbEncap _ode);
		
		int FieldCount
		{
			get;
		}
		
		void GetFieldIds(int cflid, out uint rgflid);
		
		void GetOwnClsName(uint luFlid, out string _bstrOwnClsName);
		
		void GetDstClsName(uint luFlid, out string _bstrDstClsName);
		
		void GetOwnClsId(uint luFlid, out uint _luOwnClsid);
		
		void GetDstClsId(uint luFlid, out uint _luDstClsid);
		
		void GetFieldName(uint luFlid, out string _bstrFieldName);
		
		void GetFieldType(uint luFlid, out int _iType);
		
		bool get_IsValidClass(uint luFlid, uint luClid);
		
		int ClassCount
		{
			get;
		}
		
		void GetClassIds(int cclid, out uint rgclid);
		
		void GetClassName(uint luClid, out string _bstrClassName);
		
		void GetAbstract(uint luClid, out bool _fAbstract);
		
		void GetBaseClsId(uint luClid, out uint _luClid);
		
		void GetBaseClsName(uint luClid, out string _bstrBaseClsName);
		
		void GetFields(uint luClid, bool fIncludeSuperclasses, int grfcpt, int cflidMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*ULONG[]*/ _rgflid, out int _cflid);
	}
	
	#region OleDbEncap CoClass definitions
	[ComImport()]
	[CoClass(typeof(_OleDbEncapClass))]
	[Guid("AAB4A4A2-3C83-11d4-A1BB-00C04F0C9593")]
	public interface OleDbEncap : IOleDbEncap
	{
	}
	
	#region Private _OleDbEncapClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("AAB4A4A3-3C83-11d4-A1BB-00C04F0C9593")]
	internal class _OleDbEncapClass : IOleDbEncap, OleDbEncap
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void BeginTrans();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CommitTrans();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CreateCommand(out IOleDbCommand _podc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Init(string bstrServer, string bstrDatabase, IStream _fistLog);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void IsTransactionOpen(out bool _fTransactionOpen);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RollbackTrans();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RollbackSavePoint(string bstrSavePoint);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetSavePoint(out string _bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetSavePointOrBeginTrans(out string _bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void InitMSDE(IStream _fistLog, bool fForce);
		
		public virtual extern string Server
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern string Database
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
	}
	#endregion
	
	public static class OleDbEncapClass
	{
		
		delegate OleDbEncap OleDbEncapClassDelegate();
		
		public static OleDbEncap Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (OleDbEncap)form.Invoke(new OleDbEncapClassDelegate(Create));
				}
			}
			return new _OleDbEncapClass();
		}
	}
	#endregion
	
	#region FwMetaDataCache CoClass definitions
	[ComImport()]
	[CoClass(typeof(_FwMetaDataCacheClass))]
	[Guid("94CB14D1-46EF-11d4-A1C6-00C04F0C9593")]
	public interface FwMetaDataCache : IFwMetaDataCache
	{
	}
	
	#region Private _FwMetaDataCacheClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("1D9C1D81-46F0-11d4-A1C6-00C04F0C9593")]
	internal class _FwMetaDataCacheClass : IFwMetaDataCache, FwMetaDataCache
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Init(IOleDbEncap _ode);
		
		public virtual extern int FieldCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetFieldIds(int cflid, out uint rgflid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetOwnClsName(uint luFlid, out string _bstrOwnClsName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetDstClsName(uint luFlid, out string _bstrDstClsName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetOwnClsId(uint luFlid, out uint _luOwnClsid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetDstClsId(uint luFlid, out uint _luDstClsid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetFieldName(uint luFlid, out string _bstrFieldName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetFieldType(uint luFlid, out int _iType);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsValidClass(uint luFlid, uint luClid);
		
		public virtual extern int ClassCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetClassIds(int cclid, out uint rgclid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetClassName(uint luClid, out string _bstrClassName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetAbstract(uint luClid, out bool _fAbstract);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetBaseClsId(uint luClid, out uint _luClid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetBaseClsName(uint luClid, out string _bstrBaseClsName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetFields(uint luClid, bool fIncludeSuperclasses, int grfcpt, int cflidMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*ULONG[]*/ _rgflid, out int _cflid);
	}
	#endregion
	
	public static class FwMetaDataCacheClass
	{
		
		delegate FwMetaDataCache FwMetaDataCacheClassDelegate();
		
		public static FwMetaDataCache Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (FwMetaDataCache)form.Invoke(new FwMetaDataCacheClassDelegate(Create));
				}
			}
			return new _FwMetaDataCacheClass();
		}
	}
	#endregion
}

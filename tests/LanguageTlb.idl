#line 1 "c:\\fw\\Src\\Language\\LanguageTlb.idl"

















import "oaidl.idl";
import "ocidl.idl";
#line 1 "c:\\fw\\Src\\Generic\\Common.idh"


































































cpp_quote("")
cpp_quote("#undef ATTACH_GUID_TO_CLASS")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("#define ATTACH_GUID_TO_CLASS(type, guid, cls) \\")
cpp_quote("	type __declspec(uuid(#guid)) cls;")
cpp_quote("#else // !defined(__cplusplus)")
cpp_quote("#define ATTACH_GUID_TO_CLASS(type, guid, cls)")
cpp_quote("#endif // !defined(__cplusplus)")
cpp_quote("")
cpp_quote("#ifndef DEFINE_COM_PTR")
cpp_quote("#define DEFINE_COM_PTR(cls)")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("#undef GENERIC_DECLARE_SMART_INTERFACE_PTR")
cpp_quote("#define GENERIC_DECLARE_SMART_INTERFACE_PTR(cls, iid) \\")
cpp_quote("	ATTACH_GUID_TO_CLASS(interface, iid, cls); \\")
cpp_quote("	DEFINE_COM_PTR(cls);")
cpp_quote("")


cpp_quote("")
cpp_quote("#ifndef CUSTOM_COM_BOOL")
typedef VARIANT_BOOL ComBool;
cpp_quote("#endif")
cpp_quote("")

cpp_quote("#if 0")
cpp_quote("// This is so there is an equivalent VB type.")
typedef CY SilTime;
cpp_quote("#elif defined(SILTIME_IS_STRUCT)")
cpp_quote("// This is for code that compiles UtilTime.*.")
cpp_quote("struct SilTime;")
cpp_quote("#else")
cpp_quote("// This is for code that uses a 64-bit integer for SilTime.")
cpp_quote("typedef __int64 SilTime;")
cpp_quote("#endif")
cpp_quote("")


#line 21 "c:\\fw\\Src\\Language\\LanguageTlb.idl"

cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("b80ee180-c0f1-11d2-8078-0000c0fb81b5") cpp_quote(",") cpp_quote("LanguageLib") cpp_quote(");") [ uuid(b80ee180-c0f1-11d2-8078-0000c0fb81b5), version(1.0), helpstring("Language 1.0 Type Library") ] library LanguageLib
#line 24 "c:\\fw\\Src\\Language\\LanguageTlb.idl"
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
	importlib("FwKernelTlb.tlb");
	importlib("DbAccessTlb.tlb");


	#line 1 "c:\\fw\\src\\language\\language.idh"
































	
	
	
	interface IRenderEngine;
	interface ILgCharacterPropertyEngine;
	interface ILgStringConverter;
	interface ILgTokenizer;
	interface ILgSpellCheckFactory;
	interface ILgSpellChecker;
	interface ILgCollatingEngine;
	interface ILgSearchEngine;
	interface ILgCollation;
	interface ILgWritingSystem;
	interface ILgEncoding;
	interface ILgEncodingFactory;

	
	
	

	
	typedef [v1_enum] enum LgLineBreak {

		klbNoBreak,		
		klbWordBreak,	
		klbHyphenBreak,	
		klbLetterBreak,	
		klbClipBreak	
	} LgLineBreak;  

	
	
	
	
	typedef [v1_enum] enum LgLineBreakStatus
	{
		kflbsBrk = 0x1,		
		kflbsSpace = 0x2,	
							
							
		kflbsBrkL = 0x4		
	} LgLineBreakStatus;	

	
	
	typedef [v1_enum] enum LgGeneralCharCategory
	{
		kccLu, 
		kccLl, 
		kccLt, 
		kccLm, 
		kccLo, 

		kccMn, 
		kccMc, 
		kccMe, 

		kccNd, 
		kccNl, 
		kccNo, 

		kccZs, 
		kccZl, 
		kccZp, 

		kccCc, 
		kccCf, 
		kccCs, 
		kccCo, 
		kccCn, 

		kccPc, 
		kccPd, 
		kccPs, 
		kccPe, 
		kccPi, 
			   
		kccPf, 
			   
		kccPo, 

		kccSm, 
		kccSc, 
		kccSk, 
		kccSo, 
	} LgGeneralCharCategory;  

	
	typedef [v1_enum] enum LgBidiCategory
	{
		
		kbicL,   
		kbicLRE, 
		kbicLRO, 
		kbicR,   
		kbicAL,  
		kbicRLE, 
		kbicRLO, 
		kbicPDF, 

		
		kbicEN,  
		kbicES,  
		kbicET,  
		kbicAN,  
		kbicCS,  

		
		kbicNSM, 
		kbicBN,  
		kbicB,   
		kbicS,   

		
		kbicWS,  
		kbicON,  
	} LgBidiCategory;  

	
	typedef [v1_enum] enum LgLBP
	{
				 
		klbpAI,  
		klbpAL,  
		klbpB2,  
		klbpBA,  
		klbpBB,  
		klbpBK,  
		klbpCB,  
		klbpCL,  
		klbpCM,  
		klbpCR,  
		klbpEX,  
		klbpGL,  
		klbpHY,  
		klbpID,  
		klbpIN,  
		klbpIS,  
		klbpLF,  
		klbpNS,  
		klbpNU,  
		klbpOP,  
		klbpPO,  
		klbpPR,  
		klbpQU,  
		klbpSA,  
		klbpSG,  
		klbpSP,  
		klbpSY,  
		klbpXX,  
		klbpZW   
	} LgLBP;  

	






















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgCollation") cpp_quote(",") cpp_quote("865DF99E-D965-44B6-A5A7-896032C36C6E") cpp_quote(");") [ uuid("865DF99E-D965-44B6-A5A7-896032C36C6E"), object, pointer_default(unique) ] interface ILgCollation : IUnknown
	{
		
		
		[propget] HRESULT Name(
			[in] int enc,
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT Name(
			[in] int enc,
			[in] BSTR bstr);
		
		[propget] HRESULT NameEncodingsCount(
			[out, retval] int * pcenc);
		
		[propget] HRESULT NameEncodings(
			[in] int cenc,
			[out, size_is(cenc), retval] int * prgenc);

		
		[propget] HRESULT Code(
			[out, retval] int * pnCode);
		
		[propput] HRESULT Code(
			[in] int nCode);

		
		[propget] HRESULT WinLCID(
			[out, retval] int * pnCode);
		
		
		[propput] HRESULT WinLCID(
			[in] int nCode);
		
		[propget] HRESULT WinCollation(
			[out, retval] BSTR * pbstr);
		
		
		[propput] HRESULT WinCollation(
			[in] BSTR bstr);

		
		[propget] HRESULT IcuResourceName(
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT IcuResourceName(
			[in] BSTR bstr);
		
		[propget] HRESULT IcuResourceText(
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT IcuResourceText(
			[in] BSTR bstr);

		
		
		HRESULT WriteAsXml(
			[in] IStream * pstrm,
			[in] int cchIndent);
		
		
		HRESULT Serialize(
			[in] IStorage * pstg);
		
		
		HRESULT Deserialize(
			[in] IStorage * pstg);
	};

	























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgWritingSystem") cpp_quote(",") cpp_quote("5895B941-D546-11d2-8078-0000C0FB81B5") cpp_quote(");") [ uuid("5895B941-D546-11d2-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgWritingSystem : IUnknown
	{
		
		

		
		
		[propget] HRESULT Name(
			[in] int enc,
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT Name(
			[in] int enc,
			[in] BSTR bstr);

		
		[propget] HRESULT Abbr(
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT Abbr(
			[in] BSTR bstr);

		
		
		[propget] HRESULT Description(
			[in] int enc,
			[out, retval] ITsString ** pptss);
		
		
		[propput] HRESULT Description(
			[in] int enc,
			[in] ITsString * ptss);

		
		[propget] HRESULT Code(
			[out, retval] int * pnCode);
		
		[propput] HRESULT Code(
			[in] int nCode);

		
		
		[propget] HRESULT RightToLeft(
			[out, retval] ComBool * pfRightToLeft);
		
		
		[propput] HRESULT RightToLeft(
			[in] ComBool fRightToLeft);

		
		
		[propget] HRESULT RenderEngine(
			[out, retval] IRenderEngine ** ppreneng);

		
		[propget] HRESULT CollatingEngine(
			[out, retval] ILgCollatingEngine ** ppcoleng);

		
		
		[propget] HRESULT CharPropEngine(
			[out, retval] ILgCharacterPropertyEngine ** pppropeng);

		
		[propget] HRESULT Encoding(
			[out, retval] int * penc);

		
		
		HRESULT SetRenderer(
			[in] IRenderEngine * preneng);

		
		
		[propget] HRESULT FontVariation(
			[out, retval] BSTR * pbstr);
		
		
		[propput] HRESULT FontVariation(
			[in] BSTR bstr);

		
		[propget] HRESULT DefaultSerif(
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT DefaultSerif(
			[in] BSTR bstr);

		
		[propget] HRESULT DefaultSansSerif(
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT DefaultSansSerif(
			[in] BSTR bstr);

		
		
		
		
		
		
		[propget] HRESULT DefaultMonospace(
			[out, retval] BSTR * pbstr);
		
		
		
		
		
		
		[propput] HRESULT DefaultMonospace(
			[in] BSTR bstr);

		
		
		
		[propget] HRESULT KeyMan(
			[out, retval] ComBool * pfKeyMan);
		
		[propput] HRESULT KeyMan(
			[in] ComBool fKeyMan);
		
		[propget] HRESULT KeyManCtrl(
			[out, retval] BSTR * pbstr);
		
		[propput] HRESULT KeyManCtrl(
			[in] BSTR bstr);
		
		[propget] HRESULT LangId(
			[out, retval] int * pn);
		
		[propput] HRESULT LangId(
			[in] int n);
		
		[propget] HRESULT UiName(
			[in] int enc,
			[out, retval] BSTR * pbstr);

		
		[propget] HRESULT NameEncodingsCount(
			[out, retval] int * pcenc);
		
		[propget] HRESULT NameEncodings(
			[in] int cenc,
			[out, retval] int * prgenc);
		
		[propget] HRESULT DescriptionEncCount(
			[in] int * pcenc);
		
		[propget] HRESULT DescriptionEncs(
			[in] int cenc,
			[out, retval] int * prgenc);
		
		
		[propget] HRESULT Dirty(
			[out, retval] ComBool * pf);
		
		
		[propput] HRESULT Dirty(
			[in] ComBool fDirty);

		
		[propget] HRESULT Locale(
			[out, retval] int * pn);
		
		[propput] HRESULT Locale(
			[in] int n);

		
		[propget] HRESULT CollationCount(
			[out, retval] int * pccoll);
		
		[propget] HRESULT Collation(
			[in] int icoll,
			[out, retval] ILgCollation ** ppcoll);
		
		HRESULT RemoveCollation(
			[in] int icoll);
		
		[propputref] HRESULT Collation(
			[in] int icoll,
			[in] ILgCollation * pcoll);
		
		[propget] HRESULT CollationCodes(
			[in] int ccoll,
			[out, size_is(ccoll), retval] int * rgcodes);
		
		
		HRESULT GetCollationForCode(
			[in] int code,
			[out, retval] ILgCollation ** ppcoll);
		
		
		HRESULT SetCollationForCode(
			[in] int code,
			[in] ILgCollation * pcoll);







		
		[propget] HRESULT EncodingFactory(
			[out, retval] ILgEncodingFactory ** ppencf);
		
		[propputref] HRESULT EncodingFactory(
			[in] ILgEncodingFactory * pencf);

		
		
		HRESULT WriteAsXml(
			[in] IStream * pstrm,
			[in] int cchIndent);

		
		
		HRESULT Serialize(
			[in] IStorage * pstg);
		
		
		HRESULT Deserialize(
			[in] IStorage * pstg);
	};

	


































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgEncoding") cpp_quote(",") cpp_quote("5895B942-D546-11d2-8078-0000C0FB81B5") cpp_quote(");") [ uuid("5895B942-D546-11d2-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgEncoding : IUnknown
	{
		
		
		[propget] HRESULT Encoding(
			[out, retval] int * penc);
		
		
		
		[propput] HRESULT Encoding(
			[in] int enc);

		
		
		[propget] HRESULT Name(
			[in] int enc,
			[out, retval] BSTR * pbstrName);
		
		[propput] HRESULT Name(
			[in] int enc,
			[in] BSTR bstrName);

		
		[propget] HRESULT Locale(
			[out, retval] int * pnLocale);
		
		[propput] HRESULT Locale(
			[in] int nLocale);

		
		
		[propget] HRESULT LangCode(
			[out, retval] BSTR * bstrCode);
		
		[propget] HRESULT EncodingCode(
			[out, retval] BSTR * bstrCode);

		
		
		
		
		
		
		
		
		[propget] HRESULT ConverterFrom(
			[in] int enc,
			[out, retval] ILgStringConverter ** ppstrconv);

		
		
		
		
		
		
		
		
		[propget] HRESULT NormalizeEngine(
			[out, retval] ILgStringConverter ** ppstrconv);

		
		
		
		[propget] HRESULT WordBreakEngine(
			[out, retval] ILgTokenizer ** pptoker);

		
		
		
		
		[propget] HRESULT SpellingFactory(
			[out, retval] ILgSpellCheckFactory ** ppspfact);
		
		
		[propget] HRESULT SpellCheckEngine(
			[out, retval] ILgSpellChecker ** ppspchk);

		
		
		
		
		
		[propget] HRESULT WritingSystem(
			[in] int ws,
			[out, retval] ILgWritingSystem ** ppwse);
		
		[propput] HRESULT WritingSystem(
			[in] int ws,
			[in] ILgWritingSystem * pwse);

		
		
		
		
		
		
		
		[propget] HRESULT SearchEngine(
			[out, retval] ILgSearchEngine ** ppsrcheng);

		
		HRESULT SetDefaultWs(
			[in] ILgWritingSystem * pwse);

		
		HRESULT CompileEngines();

		
		[propget] HRESULT NameEncodingsCount(
			[in] int * pcenc);
		
		[propget] HRESULT NameEncodings(
			[in] int cenc,
			[out, retval] int * prgenc);

		
		[propget] HRESULT WritingSystemCount(
			[in] int * pcws);
		
		[propget] HRESULT WritingSystemCodes(
			[in] int cws,
			[out, retval] int * prgws);
		
		
		[propget] HRESULT Dirty(
			[out, retval] ComBool * pf);
		
		
		[propput] HRESULT Dirty(
			[in] ComBool fDirty);

		
		[propget] HRESULT Hvo(
			[out, retval] long * phvo);
		
		[propput] HRESULT Hvo(
			[in] long hvo);

		
		[propget] HRESULT EncodingFactory(
			[out, retval] ILgEncodingFactory ** ppencf);
		
		[propputref] HRESULT EncodingFactory(
			[in] ILgEncodingFactory * pencf);

		
		
		HRESULT WriteAsXml(
			[in] IStream * pstrm,
			[in] int cchIndent);

		
		
		HRESULT Serialize(
			[in] IStorage * pstg);
		
		
		HRESULT Deserialize(
			[in] IStorage * pstg);
	};

	
	
	

	



























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgInputMethodEditor") cpp_quote(",") cpp_quote("17aebfe0-c00a-11d2-8078-0000c0fb81b5") cpp_quote(");") [ uuid("17aebfe0-c00a-11d2-8078-0000c0fb81b5"), object, pointer_default(unique) ] interface ILgInputMethodEditor : IUnknown 
	{
		
		
		HRESULT Setup();

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		[local, restricted] HRESULT Replace(
			[in] BSTR bstrInput,
			[in] ITsTextProps * pttpInput,
			[in] ITsStrBldr * ptsbOld,
			[in] int ichMin,
			[in] int ichLim,
			[out] int * pichModMin,
			[out] int * pichModLim,
			[out] int * pichIP);

		
		
		
		
		
		
		
		
		
		
		
		HRESULT Backspace(
			[in] int pichStart,
			[in] int cactBackspace,
			[in] ITsStrBldr * ptsbOld,
			[out] int * pichModMin,
			[out] int * pichModLim,
			[out] int * pichIP,
			[out] int * pcactBsRemaining);

		
		
		
		
		
		
		
		
		
		
		HRESULT DeleteForward(
			[in] int pichStart,
			[in] int cactDelForward,
			[in] ITsStrBldr * ptsbInOut,
			[out] int * pichModMin,
			[out] int * pichModLim,
			[out] int * pichIP,
			[out] int * pcactDfRemaining);

		
		
		
		HRESULT IsValidInsertionPoint(
			[in] int ich,
			[in] ITsString * ptss,
			[out, retval] BOOL * pfValid);
	};

	






















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgFontManager") cpp_quote(",") cpp_quote("10894680-F384-11d3-B5D1-00400543A266") cpp_quote(");") [ uuid("10894680-F384-11d3-B5D1-00400543A266"), object, pointer_default(unique) ] interface ILgFontManager : IUnknown
	{
		
		HRESULT IsFontAvailable(
			[in] BSTR bstrName,
			[out, retval] ComBool * pfAvail);

		
		HRESULT IsFontAvailableRgch(
			[in] int cch,
			[in] OLECHAR * prgchName,
			[out, retval] ComBool * pfAvail);

		
		HRESULT AvailableFonts(
			[out] BSTR * pbstrNames);

		
		HRESULT RefreshFontList();
	};


	
	
	

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("F74151C0-ABC0-11d3-BC29-00A0CC3A40C6") cpp_quote(",") cpp_quote("LgInputMethodEditor") cpp_quote(");") [ uuid(F74151C0-ABC0-11d3-BC29-00A0CC3A40C6) ] coclass LgInputMethodEditor
	{
		interface ILgInputMethodEditor;
	};

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("70553ED0-F437-11d3-B5D1-00400543A266") cpp_quote(",") cpp_quote("LgFontManager") cpp_quote(");") [ uuid(70553ED0-F437-11d3-B5D1-00400543A266) ] coclass LgFontManager
	{
		interface ILgFontManager;
	};
	#line 894 "c:\\fw\\src\\language\\language.idh"

	
	
	
	
	
	
	
	typedef [v1_enum] enum LgCollatingOptions
	{
		fcoDefault = 0,
		fcoIgnoreCase = 1,
		fcoDontIgnoreVariant = 2,
		fcoLim 
	} LgCollatingOptions; 

	





















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgCollatingEngine") cpp_quote(",") cpp_quote("8D9C5BE1-03A8-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("8D9C5BE1-03A8-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgCollatingEngine : IUnknown
	{
		
		
		
		[propget] HRESULT SortKey(
			[in] BSTR bstrValue,
			[in] LgCollatingOptions colopt,
			[out, retval] BSTR * pbstrKey);

		
		
		

		
		
		
		
		[restricted] HRESULT SortKeyRgch(
			[in, size_is(cchIn)] const OLECHAR * pch,
			[in] int cchIn,
			[in] LgCollatingOptions colopt,
			[in] int cchMaxOut,
			[out, size_is(cchMaxOut)] OLECHAR * pchKey,
			[out] int * pcchOut);

		
		
		
		
		
		
		HRESULT Compare(
			[in] BSTR bstrValue1,
			[in] BSTR bstrValue2,
			[in] LgCollatingOptions colopt,
			[out, retval] int * pnVal);

		
		[propget] HRESULT EncodingFactory(
			[out, retval] ILgEncodingFactory ** ppencf);
		
		[propputref] HRESULT EncodingFactory(
			[in] ILgEncodingFactory * pencf);

		
	};

	






























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgCharacterPropertyEngine") cpp_quote(",") cpp_quote("FC1C0D0A-0483-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("FC1C0D0A-0483-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgCharacterPropertyEngine : IUnknown
	{
		
		
		[propget] HRESULT GeneralCategory(
			[in] int ch,
			[out, retval] LgGeneralCharCategory * pcc);

		
		
		
		[propget] HRESULT BidiCategory(
			[in] int ch,
			[out, retval] LgBidiCategory * pbic);

		
		
		
		[propget] HRESULT IsLetter(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		[propget] HRESULT IsPunctuation( 
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		[propget] HRESULT IsNumber(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		[propget] HRESULT IsSeparator(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		[propget] HRESULT IsSymbol(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		[propget] HRESULT IsMark(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		[propget] HRESULT IsOther(
			[in] int ch,
			[out, retval] ComBool *pfRet);


		
		[propget] HRESULT IsUpper(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		
		[propget] HRESULT IsLower(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		
		
		
		[propget] HRESULT IsTitle(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		[propget] HRESULT IsModifier(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		[propget] HRESULT IsOtherLetter(
			[in] int ch,
			[out, retval] ComBool *pfRet);

		
		
		
		[propget] HRESULT IsOpen(
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		
		
		[propget] HRESULT IsClose(  
			[in] int ch,
			[out, retval] ComBool *pfRet);
		
		
		
		[propget] HRESULT IsWordMedial(
			[in] int ch,
			[out, retval] ComBool *pfRet);

		
		[propget] HRESULT IsControl(
			[in] int ch,
			[out, retval] ComBool *pfRet);

		
		
		
		
		
		
		
		
		[propget] HRESULT ToLowerCh(
				  [in] int ch,
				  [out, retval] int * pch);
		
		
		
		
		
		
		
		
		[propget] HRESULT ToUpperCh(
				  [in] int ch,
				  [out, retval] int * pch);
		
		
		
		
		
		
		
		
		
		[propget] HRESULT ToTitleCh(
				  [in] int ch,
				  [out, retval] int * pch);

		
		
		
		
		HRESULT ToLower(
				  [in] BSTR bstr,
				  [out, retval] BSTR * pbstr);
		
		
		
		
		HRESULT ToUpper(
				  [in] BSTR bstr,
				  [out, retval] BSTR * pbstr);
		
		
		
		
		
		
		
		
		HRESULT ToTitle(
				  [in] BSTR bstr,
				  [out, retval] BSTR * pbstr);

		
		
		
		
		
		
		[restricted] HRESULT ToLowerRgch(
				  [in, size_is(cchIn)] OLECHAR * prgchIn,
				  [in] int cchIn,
				  [out, size_is(cchOut)] OLECHAR * prgchOut,
				  [in] int cchOut,
				  [out] int * pcchRet);
		
		
		
		
		
		
		[restricted] HRESULT ToUpperRgch(
				  [in, size_is(cchIn)] OLECHAR * prgchIn,
				  [in] int cchIn,
				  [out, size_is(cchOut)] OLECHAR * prgchOut,
				  [in] int cchOut,
				  [out] int * pcchRet);
		
		
		
		
		
		
		
		
		
		
		[restricted] HRESULT ToTitleRgch(
				  [in, size_is(cchIn)] OLECHAR * prgchIn,
				  [in] int cchIn,
				  [out, size_is(cchOut)] OLECHAR * prgchOut,
				  [in] int cchOut,
				  [out] int * pcchRet);

		
		
		
		
		
		
		
		[propget] HRESULT IsUserDefinedClass(
			[in] int ch,
			[in] int chClass,
			[out, retval] ComBool * pfRet);

		
		
		
		
		
		
		
		
		
		
		
		[propget] HRESULT SoundAlikeKey(
			[in] BSTR bstrValue,
			[out, retval] BSTR * pbstrKey);

		
		
		
		
		
		
		[propget] HRESULT CharacterName(
			[in] int ch,
			[out, retval] BSTR * pbstrName);

		
		
		
		[propget] HRESULT Decomposition(
			[in] int ch,
			[out, retval] BSTR * pbstr);
		
		
		
		[restricted] HRESULT DecompositionRgch(
			[in] int ch,
			[in] int cchMax,
			[out] OLECHAR * prgch,
			[out] int * pcch,
			[out] ComBool * pfHasDecomp);

		
		
		
		[propget] HRESULT FullDecomp(
			[in] int ch,
			[out, retval] BSTR * pbstrOut);
		
		
		
		[restricted] HRESULT FullDecompRgch(
			[in] int ch,
			[in] int cchMax,
			[out] OLECHAR * prgch,
			[out] int * pcch,
			[out] ComBool * pfHasDecomp);

		
		
		
		
		
		
		
		
		
		
		[propget] HRESULT NumericValue(
			[in] int ch,
			[out, retval] int * pn);

		
		
		
		[propget] HRESULT CombiningClass(
			[in] int ch,
			[out, retval] int * pn);

		
		
		
		
		[propget] HRESULT Comment(
			[in] int ch,
			[out, retval] BSTR * pbstr);

		
		
		
		
		
		[restricted] HRESULT GetLineBreakProps(
			[in, size_is(cchIn)] const OLECHAR * prgchIn,
			[in] int cchIn,
			[out, size_is(cchIn)] byte * prglbOut);

		
		
		
		[restricted] HRESULT GetLineBreakStatus(
			[in, size_is(cb)] const byte * prglbpIn,
			[in] int cb,
			[out, size_is(cb)] byte * prglbsOut);

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		[restricted] HRESULT GetLineBreakInfo(
			[in, size_is(cchIn)] const OLECHAR * prgchIn,
			[in] int cchIn,
			[in] int ichMin,
			[in] int ichLim,
			[out, size_is(ichLim - ichMin)] byte * prglbsOut,
			[out] int * pichBreak);

		
		
		
		
		HRESULT StripDiacritics(
			  [in] BSTR bstr,
			  [out, retval] BSTR * pbstr);
		
		
		
		
		[restricted] HRESULT StripDiacriticsRgch(
			[in, size_is(cchIn)] OLECHAR * prgchIn,
			[in] int cchIn,
			[out, size_is(cchMaxOut)] OLECHAR * prgchOut,
			[in] int cchMaxOut,
			[out] int * pcchOut);

		
		
		
		HRESULT NormalizeKd(
			  [in] BSTR bstr,
			  [out, retval] BSTR * pbstr);
		
		
		
		[restricted] HRESULT NormalizeKdRgch(
			[in, size_is(cchIn)] OLECHAR * prgchIn,
			[in] int cchIn,
			[out, size_is(cchMaxOut)] OLECHAR * prgchOut,
			[in] int cchMaxOut,
			[out] int * pcchOut);
	};

	

















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgSearchEngine") cpp_quote(",") cpp_quote("0D224001-03C7-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("0D224001-03C7-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgSearchEngine : IUnknown
	{
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT SetPattern(
			[in] BSTR bstrPattern,
			[in] ComBool fIgnoreCase,
			[in] ComBool fIgnoreModifiers,
			[in] ComBool fUseSoundAlike,
			[in] ComBool fUseWildCards);

		
		
		
		HRESULT SetReplacePattern(
			[in] BSTR bstrPattern);

		
		
		
		HRESULT ShowPatternDialog(
			[in] BSTR bstrTitle,  
			[in] ILgWritingSystem * pwse, 
			[in] ComBool fForReplace,   
			[out, retval] ComBool * pfGoAhead); 

		
		
		HRESULT FindString(
			[in] BSTR bstrSource, 
			[in] int ichFirst,  
			[out] int * ichMinFound,
			[out] int * ichLimFound,
			[out, retval] ComBool * pfFound);

		
		
		
		
		
		
		HRESULT FindReplace(
			[in] BSTR bstrSource, 
			[in] int ichFirst,  
			[out] int * ichMinFound,
			[out] int * ichLimFound,
			[out, retval] BSTR * pbstrReplacement);  

		
		

		

	};

	






























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgStringConverter") cpp_quote(",") cpp_quote("0D224002-03C7-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("0D224002-03C7-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgStringConverter : IUnknown
	{
		
		
		
		
		
		
		HRESULT ConvertString(
			[in] BSTR bstrIn,
			[out,retval] BSTR * pbstrOut);

		
		
		
		
		
		
		
		
		[restricted] HRESULT ConvertStringRgch(
			[in, size_is(cch)] const OLECHAR * prgch,
			[in] int cch,
			[in] int cchMax,
			[out, size_is(cchMax)] OLECHAR * prgchOut,
			[out] int * pcchOut);
	};

	
















	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgTokenizer") cpp_quote(",") cpp_quote("0D224003-03C7-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("0D224003-03C7-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgTokenizer : IUnknown
	{
		
		
		
		
		
		
		
		
		[restricted] HRESULT GetToken(
			[in, size_is(cch)] OLECHAR * prgchInput,
			[in] int cch,
			[out] int * pichMin,
			[out] int * pichLim);

		
		
		
		
		
		[propget] HRESULT TokenStart(
			[in] BSTR bstrInput,
			[in] int ichFirst,
			[out, retval] int *pichMin);
		
		
		
		
		
		
		
		[propget] HRESULT TokenEnd(
			[in] BSTR bstrInput,
			[in] int ichFirst,
			[out, retval] int *pichLim);
		
		
	};

	
	
	
	typedef [v1_enum] enum LgSpellCheckOptions
	{
		fsplcNil                   = 0x00000,
		fsplcSuggestFromUserDict   = 0x00001,
		fsplcIgnoreAllCaps         = 0x00002,
		fsplcIgnoreMixedDigits     = 0x00004,
		fsplcIgnoreRomanNumerals   = 0x00008,
		fsplcFindUncappedSentences = 0x00010,
		fsplcFindMissingSpaces     = 0x00020,
		fsplcFindRepeatWord        = 0x00040,
		fsplcFindExtraSpaces       = 0x00080,
		fsplcFindSpacesBeforePunc  = 0x00100,
		fsplcFindSpacesAfterPunc   = 0x00200,
		fsplcFindInitialNumerals   = 0x00800,
		fsplcQuickSuggest          = 0x02000,
		fsplcUseAllOpenUdr         = 0x04000,
		fsplcSglStepSugg           = 0x10000,
		fsplcIgnoreSingleLetter    = 0x20000,
	} LgSpellCheckOptions;

	
	
	typedef [v1_enum] enum LgSpellCheckResults
	{
		scrsNoErrors                    =  0,  
		scrsUnknownInputWord            =  1,  
		scrsReturningChangeAlways       =  2,  
		scrsReturningChangeOnce         =  3,  
		scrsInvalidHyphenation          =  4,  
		scrsErrorCapitalization         =  5,  
		scrsWordConsideredAbbreviation  =  6,  
		scrsHyphChangesSpelling         =  7,  
		scrsNoMoreSuggestions           =  8,  
		scrsMoreInfoThanBufferCouldHold =  9,  
		scrsNoSentenceStartCap          = 10,  
		scrsRepeatWord                  = 11,  
		scrsExtraSpaces                 = 12,  
		scrsMissingSpace                = 13,  
		scrsInitialNumeral              = 14,  
	} LgSpellCheckResults;

	


























	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgSpellChecker") cpp_quote(",") cpp_quote("0D224006-03C7-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("0D224006-03C7-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgSpellChecker : IUnknown
	{
		
		HRESULT Init(
			[in] LPCOLESTR pszwCustom);

		
		HRESULT SetOptions(
			[in] int grfsplc);

		
		
		
		
		
		
		
		
		
		
		HRESULT Check(
			[in, size_is(cchw)] const OLECHAR * prgchw,
			[in] int cchw,
			[out] int * pichMinBad,
			[out] int * pichLimBad,
			[out] BSTR * pbstrBad,
			[out] BSTR * pbstrSuggest,
			[out] int * pscrs);

		
		
		
		
		
		HRESULT Suggest(
			[in, size_is(cchw)] const OLECHAR * prgchw,
			[in] int cchw,
			[in] ComBool fFirst,
			[out] BSTR *pbstrSuggest);

		
		
		HRESULT IgnoreAll(
			[in] LPCOLESTR pszw);

		
		
		
		
		
		
		
		
		
		HRESULT Change(
			[in] LPCOLESTR pszwSrc,
			[in] LPCOLESTR pszwDst,
			ComBool fAll);

		
		
		
		
		
		
		
		HRESULT AddToUser(
			[in] LPCOLESTR pszw);

		
		HRESULT FlushIgnoreList();
		
		
		HRESULT FlushChangeList(
			[in] ComBool fAll);
	};

	







	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgSpellCheckFactory") cpp_quote(",") cpp_quote("FC1C0D01-0483-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("FC1C0D01-0483-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgSpellCheckFactory : IUnknown
	{
		
		[propget] HRESULT Checker(
			[out, retval] ILgSpellChecker ** ppspchk);
	};

	










































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgNumericEngine") cpp_quote(",") cpp_quote("FC1C0D04-0483-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("FC1C0D04-0483-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgNumericEngine : IUnknown
	{
		
		[propget] HRESULT IntToString(
			[in] int n,
			[out, retval] BSTR * bstr);
		
		
		[propget] HRESULT IntToPrettyString(
			[in] int n,
			[out, retval] BSTR * bstr);

		
		
		
		
		
		[propget] HRESULT StringToInt(
			[in] BSTR bstr,
			[out, retval] int * pn);

		
		
		
		
		
		
		[restricted] HRESULT StringToIntRgch(
			[in, size_is(cch)] OLECHAR * prgch,
			[in] int cch,
			[out] int * pn,
			[out] int * pichUnused);

		

		
		[propget] HRESULT DblToString(
			[in] double dbl,
			[in] int cchFracDigits, 
			[out, retval] BSTR * bstr);

		
		[propget] HRESULT DblToPrettyString(
			[in] double dbl,
			[in] int cchFracDigits, 
			[out, retval] BSTR * bstr);

		
		[propget] HRESULT DblToExpString(
			[in] double dbl,
			[in] int cchFracDigits, 
			[out, retval] BSTR * bstr);

		
		
		
		
		[propget] HRESULT StringToDbl(
			[in] BSTR bstr,
			[out, retval] double * pdbl);

		
		
		
		
		[restricted] HRESULT StringToDblRgch(
			[in, size_is(cch)] OLECHAR * prgch,
			[in] int cch,
			[out] double * pdbl,
			[out] int * pichUnused);
	};

	











































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgEncodingFactory") cpp_quote(",") cpp_quote("FC1C0D09-0483-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("FC1C0D09-0483-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ILgEncodingFactory : IUnknown
	{
		
		
		
		
		[propget] HRESULT Engine(
			[in] int enc,
			[out, retval] ILgEncoding ** ppenceng);
		
		
		
		
		[propget] HRESULT EngineOrNull(
			[in] int enc,
			[out, retval] ILgEncoding ** ppenceng);
		
		
		HRESULT AddEngine(
			[in] ILgEncoding * penceng);
		
		HRESULT RemoveEngine(
			[in] int enc);
		
		
		
		
		
		HRESULT GetEncFromStr(
			[in] BSTR bstr,
			[out, retval] int * penc);

		
		
		
		HRESULT GetLangStrFromEnc(
			[in] int enc,
			[out, retval] BSTR * pbstr);
		
		
		
		HRESULT GetStrFromEnc(
			[in] int enc,
			[out, retval] BSTR * pbstr);

		
		[propget] HRESULT NumberOfEnc(
			[out, retval] int * pcenc);
		
		
		
		
		
		HRESULT GetEncodings(
			[out] int * rgenc);

		
		
		[propget] HRESULT UnicodeCharProps(
			[out, retval] ILgCharacterPropertyEngine ** pplcpe);
		
		[propget] HRESULT DefaultCollater(
			[in] int enc,
			[out, retval] ILgCollatingEngine ** ppcoleng);
		
		[propget] HRESULT CharPropEngine(
			[in] int enc,
			[in] int ws,
			[out, retval] ILgCharacterPropertyEngine ** pplcpe);
		
		[propget] HRESULT Renderer(
			[in] int enc,
			[in] int ws,
			[out, retval] IRenderEngine ** ppre);
		
		
		
		
		
		
		HRESULT Shutdown();
		
		
		HRESULT SaveEncodings();

		
		
		
		HRESULT Serialize(
			[in] IStorage * pstg);
	};

	









	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgEncodingFactoryBuilder") cpp_quote(",") cpp_quote("4B009D1F-AEE2-4D83-9208-9DF742A42DF3") cpp_quote(");") [ uuid("4B009D1F-AEE2-4D83-9208-9DF742A42DF3"), object, pointer_default(unique) ] interface ILgEncodingFactoryBuilder : IUnknown
	{
		
		
		
		
		
		
		
		
		
		
		HRESULT GetEncodingFactory(
			[in] IOleDbEncap * pode,
			[in] IStream * pfistLog,
			[out, retval] ILgEncodingFactory ** ppencf);

		
		
		
		
		
		
		
		
		
		HRESULT GetEncodingFactoryNew(
			[in] BSTR bstrServer,
			[in] BSTR bstrDatabase,
			[in] IStream * pfistLog,
			[out, retval] ILgEncodingFactory ** ppencf);

		
		
		HRESULT Deserialize(
			[in] IStorage * pstg,
			[out, retval] ILgEncodingFactory ** ppencf);
	};








cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITsStringPlusEncs") cpp_quote(",") cpp_quote("83E27BF1-F711-45B0-8787-1FD636A5718E") cpp_quote(");") [ uuid("83E27BF1-F711-45B0-8787-1FD636A5718E"), object, pointer_default(unique) ] interface ITsStringPlusEncs : IUnknown
{
	
	[propputref] HRESULT String(
		[in] ILgEncodingFactory * pencf,
		[in] ITsString * ptss);

	
	
	[propget] HRESULT String(
		[in] ILgEncodingFactory * pencf,
		[out, retval] ITsString ** pptss);

	
	
	[propget] HRESULT Text(
		[out, retval] BSTR * pbstr);

	
	HRESULT Serialize(
		[in] IStorage * pstg);

	
	HRESULT Deserialize(
		[in] IStorage * pstg);
};
#line 32 "c:\\fw\\Src\\Language\\LanguageTlb.idl"

	#line 1 "c:\\fw\\src\\language\\render.idh"



















	
	
	
	interface ILgInputMethodEditor;
	interface ILgLineBreakEngine;
	interface IVwGraphics;
	interface ILgEncodingFactory;

	typedef [v1_enum] enum LgIPDrawMode			
	{
		kdmNormal,			
		kdmSplitPrimary,	
		kdmSplitSecondary	
	} LgIPDrawMode;

	typedef [v1_enum] enum LgIpValidResult		
	{
		kipvrOK,		
		kipvrBad,		
		kipvrUnknown	
	} LgIpValidResult;

	typedef [v1_enum] enum LgTrailingWsHandling		
	{
		ktwshAll,		
		ktwshNoWs,		
		ktwshOnlyWs,	
	} LgTrailingWsHandling;

	
	

	typedef [v1_enum] enum VwGenericFontNames {
		kvgfnCustom,			
		kvgfnSerif,
		kvgfnSansSerif,
		kvgfnMonospace
	} VwGenericFontNames;

	typedef [v1_enum] enum VwFontStyle {
		kfsNormal,
		kfsItalic,
		kfsOblique
	} VwFontStyle;

	typedef [v1_enum] enum VwTextUnderline {
		ktuNoUnderline,
		ktuSingleUnderline
	} VwTextUnderline;

	

	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	

	
	
	
	
	
	
	
	typedef struct
	{
		COLORREF clrFore;
		COLORREF clrBack;
		int dympOffset; 
		int enc;
		int ws;
		byte fWsRtl;	
		int nDirDepth; 
		byte ssv; 
		
		
		
		
		
		byte fBold;
		byte fItalic;
		int dympHeight; 
		OLECHAR szFaceName[32];
		OLECHAR szFontVar[64];
	} LgCharRenderProps; 

	
	
	
	typedef struct
	{
		int dummy;
	} LgParaRenderProps;

	
	typedef enum ScriptDirCode
	{
		kfsdcNone			= 0,
		kfsdcHorizLtr		= 1,	
		kfsdcHorizRtl		= 2,	
		kfsdcVertFromLeft	= 4,	
		kfsdcVertFromRight	= 8,	

	} ScriptDirCode;	


	





	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ISimpleInit") cpp_quote(",") cpp_quote("FC1C0D0D-0483-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("FC1C0D0D-0483-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ISimpleInit : IUnknown
	{
		[restricted] HRESULT InitNew(
			[in, size_is(cb)] const BYTE * prgb,
			[in] int cb);

		
		[propget, restricted] HRESULT InitializationData(
			[out, retval] BSTR * pbstr);
	};


	







	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwGraphics") cpp_quote(",") cpp_quote("92AC8BE8-EDC8-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("92AC8BE8-EDC8-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface IVwGraphics : IUnknown
	{
		
		
		HRESULT InvertRect(
			[in] int xLeft,
			[in] int yTop,
			[in] int xRight,
			[in] int yBottom);
		
		[propput] HRESULT ForeColor(
			[in] int clr);   
		
		[propput] HRESULT BackColor(
			[in] int clr);   
		
		HRESULT DrawRectangle(
			[in] int xLeft,
			[in] int yTop,
			[in] int xRight,
			[in] int yBottom);
		
		HRESULT DrawPolygon(
			[in] int cvpnt,
			[in, size_is(cvpnt)] POINT prgvpnt[]);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		HRESULT DrawHorzLine(
			[in] int xLeft,
			[in] int xRight,
			[in] int y,
			[in] int dyHeight,
			[in] int cdx,
			[in, size_is(cdx)] int * prgdx,
			[in, out] int * pdxStart);
		HRESULT DrawLine(
			[in] int xLeft,
			[in] int yTop,
			[in] int xRight,
			[in] int yBottom);
		HRESULT DrawText(
			[in] int x,
			[in] int y,
			[in] int cch,
			[in, size_is(cch)] const OLECHAR * prgch,
			[in] int xStretch); 
		HRESULT DrawTextExt(
			[in] int x,
			[in] int y,
			[in] int cch,
			[in] const OLECHAR * prgchw,
			[in] UINT uOptions,
			[in] const RECT * prect,
			[in] int * prgdx);
		HRESULT GetTextExtent(
			[in] int cch,
			[in, size_is(cch)] const OLECHAR * prgch,
			[out] int * px,
			[out] int * py);
		
		
		HRESULT GetTextLeadWidth(
			[in] int cch,
			[in, size_is(cch)] const OLECHAR * prgch,
			[in] int ich,
			[in] int xStretch,
			[out, retval] int * px);
		HRESULT GetClipRect(
			[out] int * pxLeft,
			[out] int * pyTop,
			[out] int * pxRight,
			[out] int * pyBottom);
		
		HRESULT GetFontEmSquare(
			[out, retval] int * pxyFontEmSquare);
		HRESULT GetGlyphMetrics(
			[in] int chw, 
			[out] int * psBoundingWidth,
			[out] int * pyBoundingHeight,
			[out] int * pxBoundingX,
			[out] int * pyBoundingY,
			[out] int * pxAdvanceX,
			[out] int * pyAdvanceY);
		
		HRESULT GetFontData(
			[in] int nTableId,
			[out] int * pcbTableSz, 
			[out, retval] BSTR * pbstrTableData);
		HRESULT XYFromGlyphPoint(
			[in] int chw,
			[in] int nPoint,
			[out] int * pxRet,
			[out] int * pyRet);
		[propget] HRESULT FontAscent(
			[out, retval] int * py);
		[propget] HRESULT FontDescent(
			[out, retval] int * pyRet);
		
		
		
		
		
		HRESULT ReleaseDC();
		
		
		
		[propget] HRESULT XUnitsPerInch(
			[out, retval] int * pxInch);
		
		[propput] HRESULT XUnitsPerInch(
			[in] int xInch);
		
		
		
		[propget] HRESULT YUnitsPerInch(
			[out, retval] int * pyInch);
		
		[propput] HRESULT YUnitsPerInch(
			[in] int yInch);
		
		
		
		HRESULT SetupGraphics(
			[in] LgCharRenderProps * pchrp);
		
		HRESULT RenderPicture(
		  [in] IPicture * ppic, 
		  [in] long x,  
		  [in] long y,  
		  [in] long cx, 
		  [in] long cy, 
		  [in] OLE_XPOS_HIMETRIC xSrc, 
		  [in] OLE_YPOS_HIMETRIC ySrc, 
		  [in] OLE_XSIZE_HIMETRIC cxSrc, 
		  [in] OLE_YSIZE_HIMETRIC cySrc, 
		  [in] LPCRECT prcWBounds); 
		
		
		
		
		
		
		
		
		HRESULT MakePicture(
			[in] byte * pbData,
			[in] int cbData,
			[out, retval] IPicture ** pppic);
		
		
		HRESULT PushClipRect(
			[in] RECT rcClip);
		HRESULT PopClipRect();
 
		
	};

	




	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IVwGraphicsWin32") cpp_quote(",") cpp_quote("8E6828A3-8681-4822-B76D-6C4A25CAECE6") cpp_quote(");") [ uuid("8E6828A3-8681-4822-B76D-6C4A25CAECE6"), object, pointer_default(unique) ] interface IVwGraphicsWin32 : IVwGraphics
	{
		
		
		
		[local] HRESULT Initialize(
			[in] HDC hdc);
		
		[local] HRESULT GetDeviceContext(
			[out, retval] HDC * phdc);
		
		
		[local] HRESULT SetMeasureDc(
			[in] HDC hdc);
		
		
		HRESULT SetClipRect(
			[in] RECT * prcClip);
	};


	
	
	
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("D9F93A03-8F8F-4e1d-B001-F373C7651B66") cpp_quote(",") cpp_quote("VwGraphicsWin32") cpp_quote(");") [ uuid(D9F93A03-8F8F-4e1d-B001-F373C7651B66) ] coclass VwGraphicsWin32
	{
		interface IVwGraphicsWin32;
	};
	#line 377 "c:\\fw\\src\\language\\render.idh"


	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ITextSource") cpp_quote(",") cpp_quote("92AC8BE4-EDC8-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("92AC8BE4-EDC8-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface ITextSource : IUnknown
	{
		
		
		// modified size_is() attribute to remove internal error (Internal error: couldn't 
		// find MarshalAs attribute for parameter _rgchBuf of method Fetch)
		HRESULT Fetch(
			[in] int ichMin,
			[in] int ichLim,
			[out, size_is(ichLim)] OLECHAR * prgchBuf);
		
		
		
		
		
		
		
		
		
		HRESULT GetCharProps(
			[in] int ich,
			[out] LgCharRenderProps * pchrp,
			[out] int * pichMin,
			[out] int * pichLim);
		
		HRESULT GetParaProps(
			[in] int ich,
			[out] LgParaRenderProps * pchrp,
			[out] int * pichMin,
			[out] int * pichLim);
		
		
		
		
		
		
		
		
		
		HRESULT GetCharStringProp(
			[in] int ich,
			[in] int nId, 
			[out] BSTR * pbstr,
			[out] int * pichMin,
			[out] int * pichLim);
		
		
		HRESULT GetParaStringProp(
			[in] int ich,
			[in] int nId, 
			[out] BSTR * pbstr,
			[out] int * pichMin,
			[out] int * pichLim);
		[propget] HRESULT Length(
			[out, retval] int * pcch);
	};

	






























































	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("ILgSegment") cpp_quote(",") cpp_quote("DB090C32-A229-4677-9A6C-F1AA3BE5618E") cpp_quote(");") [ uuid("DB090C32-A229-4677-9A6C-F1AA3BE5618E"), object, pointer_default(unique) ] interface ILgSegment : IUnknown
	{
		
		HRESULT DrawText(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out] int * dxdWidth);

		
		
		
		HRESULT Recompute(
			[in] int ichBase,
			[in] IVwGraphics * pvg);
		[propget] HRESULT Width(   
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * px);	
		[propget] HRESULT RightOverhang( 
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * px);	
		[propget] HRESULT LeftOverhang( 
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * px);	
		[propget] HRESULT Height(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * py);	
		[propget] HRESULT Ascent(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int * py);	
		HRESULT Extent(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out] int* px, 
			[out] int* py);	 
		
		
		
		HRESULT BoundingRect(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out, retval] RECT * prcBounds);
		
		
		HRESULT GetActualWidth(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,
			[in] RECT rcDst,
			[out] int * dxdWidth);
		
		[propget] HRESULT AscentOverhang(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int *py);
		[propget] HRESULT DescentOverhang(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] int *py);

		
		[propget] HRESULT RightToLeft(
			[in] int ichBase,
			[out, retval] ComBool * pfResult);
		
		
		[propget] HRESULT DirectionDepth(
			[in] int ichBase,
			[out] int * pnDepth,
			[out] ComBool * pfWeak);
		
		
		HRESULT SetDirectionDepth(
			[in] int ichwBase,
			[in] int nNewDepth);

		
		[propget] HRESULT WritingSystem(
			[in] int ichBase,
			[out] int * penc,
			[out] int * pws);
		
		
		
		
		
		[propget] HRESULT Lim(
			[in] int ichBase,
			[out, retval] int * pdich);
		
		
		
		
		
		[propget] HRESULT LimInterest(
			[in] int ichBase,
			[out, retval] int * pdich);

		
		[propput] HRESULT EndLine( 
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] ComBool fNewVal);
		[propput] HRESULT StartLine( 
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] ComBool fNewVal);
		[propget] HRESULT StartBreakWeight(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] LgLineBreak * plb);
		[propget] HRESULT EndBreakWeight(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[out, retval] LgLineBreak * plb);
		[propget] HRESULT Stretch( 
			[in] int ichBase,
			[out, retval] int * pxs);
		[propput] HRESULT Stretch(
			[in] int ichBase,
			[in] int xs);

		
		
		
		
		
		
		
		HRESULT IsValidInsertionPoint(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] int ich,
			[out, retval] LgIpValidResult * pipvr);
		HRESULT DoBoundariesCoincide(    
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] ComBool fBoundaryEnd,   
			[in] ComBool fBoundaryRight, 
			[out, retval] ComBool * pfResult);
		HRESULT DrawInsertionPoint(		
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] int ich,				
			[in] ComBool fAssocPrev,		
			[in] ComBool fOn,				
			[in] LgIPDrawMode dm);
		HRESULT PositionsOfIP(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] int ich,
			[in] ComBool fAssocPrev,		
			[in] LgIPDrawMode dm,
			[out] RECT * rectPrimary,	
			[out] RECT * rectSecondary, 
			[out] ComBool * pfPrimaryHere, 
			[out] ComBool * pfSecHere); 
										
		HRESULT DrawRange(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] int ichMin,			
			[in] int ichLim,
			[in] int ydTop,			
			[in] int ydBottom,		
			[in] ComBool bOn);
		HRESULT PositionOfRange(
			[in] int ichBase,
			[in] IVwGraphics* pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] int ichMin,
			[in] int ichim,
			[in] int ydTop,			
			[in] int ydBottom,		
			[in] RECT * rsBounds,	
			[out, retval] ComBool * pfAnythingToDraw); 
		HRESULT PointToChar(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] POINT ptdClickPosition,	
			[out] int * pich,
			[out] ComBool * pfAssocPrev);	
		HRESULT ArrowKeyPosition(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in,out] int * pich,
			[in, out] ComBool * pfAssocPrev,	
			[in] ComBool fRight,		
			[in] ComBool fMovingIn,		
			[out] ComBool * pfResult);	
		HRESULT ExtendSelectionPosition(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in, out] int * pich,
			[in] ComBool fAssocPrevMatch,	
			[in] ComBool fAssocPrevNeeded,	
			[in] int ichAnchor,			
			[in] ComBool fRight,		
			[in] ComBool fMovingIn,		
			[out] ComBool * pfRet);		

		
		
		
		
		HRESULT GetCharPlacement(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] int ichMin,
			[in] int ichLim,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			
			[in] ComBool fSkipSpace,
			[in] int cxdMax , 
			[out] int * pcxd, 
			
			
			
			
			
			
			[out, size_is(cxdMax )] int * prgxdLefts,
			[out, size_is(cxdMax )] int * prgxdRights,
			[out, size_is(cxdMax )] int * prgydTops);

		
		
		HRESULT GetInitialization(
			[in] int cbDat,			
			[out, size_is(cbDat)] byte * prgbDat,
			[out] int * pcbDatRet);	
		
		
		
		HRESULT GetGlyphsAndPositions(
			[in] int ichBase,
			[in] IVwGraphics * pvg,
			[in] RECT rcSrc,		
			[in] RECT rcDst,
			[in] int cchMax,
			[out] int * pcchRet,
			[out, size_is(cchMax)] OLECHAR * prgchGlyphs,
			[out, size_is(cchMax)] int * prgxd,
			[out, size_is(cchMax)] int * prgyd);
			
		
		
		HRESULT GetCharData(
			[in] int ichBase,
			[in] int cchMax,
			[out, size_is(cchMax)] OLECHAR * prgch,
			[out] int * pcchRet);
	};

	
	typedef [v1_enum] enum
	{
		
		kestNoMore,
		
		kestMoreLines,
		
		
		
		kestHardBreak,
		
		
		
		kestBadBreak,
		
		
		
		kestOkayBreak,
		
		
		
		kestWsBreak,
		
		
		
		kestMoreWhtsp,

	} LgEndSegmentType; 


	





	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IRenderEngine") cpp_quote(",") cpp_quote("92AC8BE2-EDC8-11d3-8078-0000C0FB81B5") cpp_quote(");") [ uuid("92AC8BE2-EDC8-11d3-8078-0000C0FB81B5"), object, pointer_default(unique) ] interface IRenderEngine : IUnknown
	{
		
		
		
		
		
		HRESULT FontIsValid();
		 
		
		
		
		[propget] HRESULT SegDatMaxLength(
			[out, retval] int * cb);

		
		HRESULT FindBreakPoint(
			[in] IVwGraphics * pvg,
			[in] ITextSource * pts,
			
			[in] int ichMin,
			
			
			
			
			
			[in] int ichLim,
			
			
			[in] int ichLimBacktrack,
			
			
			
			
			[in] ComBool fNeedFinalBreak,
			[in] ComBool fStartLine,			
			[in] int dxMaxWidth,				
			[in] LgLineBreak lbPref,			
			[in] LgLineBreak lbMax,				
			[in] LgTrailingWsHandling twsh,		
			[in] ComBool fParaRightToLeft,		

			[out] ILgSegment ** ppsegRet,		
			[out] int * pdichLimSeg,	
			[out] int * pdxWidth,				
			[out] LgEndSegmentType * pest,	
			
			
			
			
			
			
			
			
			[in] int cbPrev,
			[in, size_is(cbPrev)] byte * pbPrevSegDat,
			[in] int cbNextMax,
			[out, size_is(cbNextMax)] byte * pbNextSegDat,
			[out] int * pcbNextSegDat,
			
			
			
			
			[out] int * pdichContext); 

		
		

		
		[propget] HRESULT ScriptDirection(
			[out, retval] int * pgrfsdc);

		
		[propget] HRESULT ClassId(
			[out, retval] GUID * pguid);
		
		
		
		
		
		
		HRESULT InterpretChrp(
			[in, out] LgCharRenderProps * pchrp);

		
		[propget] HRESULT EncodingFactory(
			[out, retval] ILgEncodingFactory ** ppencf);

		
		[propputref] HRESULT EncodingFactory(
			[in] ILgEncodingFactory * pencf);
	};

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("92AC8BE1-EDC8-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("RomRenderEngine") cpp_quote(");") [ uuid(92AC8BE1-EDC8-11d3-8078-0000C0FB81B5) ] coclass RomRenderEngine
	{
		interface IRenderEngine;
	};
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("95AF9827-FF1F-4e81-B577-06D5235E672C") cpp_quote(",") cpp_quote("UniscribeEngine") cpp_quote(");") [ uuid(95AF9827-FF1F-4e81-B577-06D5235E672C) ] coclass UniscribeEngine
	{
		interface IRenderEngine;
	};
	#line 909 "c:\\fw\\src\\language\\render.idh"


	





	cpp_quote("GENERIC_DECLARE_SMART_INTERFACE_PTR(") cpp_quote("IRenderingFeatures") cpp_quote(",") cpp_quote("88EE9FE0-6B69-4087-9595-00BFCCF50CA8") cpp_quote(");") [ uuid("88EE9FE0-6B69-4087-9595-00BFCCF50CA8"), object, pointer_default(unique) ] interface IRenderingFeatures : IUnknown
	{
		


		 
		
		
		HRESULT GetFeatureIDs(
			[in] int cMax,                         
			[out, size_is(cMax)] int * prgFids,    
			[out] int * pcfid);			           

		
		HRESULT GetFeatureLabel(
			[in] int fid,
			[in] int nLanguage,
			[out] BSTR * pbstrLabel);

		
		
		HRESULT GetFeatureValues(
			[in] int fid,
			[in] int cfvalMax,                          
			[out, size_is(cfvalMax)] int * prgfval,     
			[out] int * pcfval,                         
			[out] int * pfvalDefault);                  

		
		HRESULT GetFeatureValueLabel(
			[in] int fid,
			[in] int fval,
			[in] int nLanguage,
			[out] BSTR * pbstrLabel);
	};















































#line 1000 "c:\\fw\\src\\language\\render.idh"
#line 34 "c:\\fw\\Src\\Language\\LanguageTlb.idl"

	
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("5299D6EB-630F-4103-A401-01D0FA3F5638") cpp_quote(",") cpp_quote("TsStringPlusEncs") cpp_quote(");") [ uuid(5299D6EB-630F-4103-A401-01D0FA3F5638) ] coclass TsStringPlusEncs
	{
		interface ITsStringPlusEncs;
	};

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("8D9C5BE3-03A8-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgSystemCollater") cpp_quote(");") [ uuid(8D9C5BE3-03A8-11d3-8078-0000C0FB81B5) ] coclass LgSystemCollater
	{
		interface ILgCollatingEngine;
	};

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("8D9C5BE4-03A8-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgUnicodeCollater") cpp_quote(");") [ uuid(8D9C5BE4-03A8-11d3-8078-0000C0FB81B5) ] coclass LgUnicodeCollater
	{
		interface ILgCollatingEngine;
	};

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("FC1C0D10-0483-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgCharacterPropertyEngine") cpp_quote(");") [ uuid(FC1C0D10-0483-11d3-8078-0000C0FB81B5) ] coclass LgCharacterPropertyEngine
	{
		interface ILgCharacterPropertyEngine;
	};

	
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("3BCA8781-182D-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgCharPropOverrideEngine") cpp_quote(");") [ uuid(3BCA8781-182D-11d3-8078-0000C0FB81B5) ] coclass LgCharPropOverrideEngine
	{
		interface ILgCharacterPropertyEngine;
	};

	
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("0D224004-03C7-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgCPWordTokenizer") cpp_quote(");") [ uuid(0D224004-03C7-11d3-8078-0000C0FB81B5) ] coclass LgCPWordTokenizer
	{
		interface ILgTokenizer;
	};

	
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("FC1C0D03-0483-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgWfiSpellChecker") cpp_quote(");") [ uuid(FC1C0D03-0483-11d3-8078-0000C0FB81B5) ] coclass LgWfiSpellChecker
	{
		interface ILgSpellCheckFactory;
	};

	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("3BCA8782-182D-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgMSWordSpellChecker") cpp_quote(");") [ uuid(3BCA8782-182D-11d3-8078-0000C0FB81B5) ] coclass LgMSWordSpellChecker
	{
		interface ILgSpellCheckFactory;
	};

	
	
	
	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("FC1C0D08-0483-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgNumericEngine") cpp_quote(");") [ uuid(FC1C0D08-0483-11d3-8078-0000C0FB81B5) ] coclass LgNumericEngine
	{
		interface ILgNumericEngine;
	};

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("D44E9CA1-190C-11d3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgEncodingFactory") cpp_quote(");") [ uuid(D44E9CA1-190C-11d3-8078-0000C0FB81B5) ] coclass LgEncodingFactory
	{
		interface ILgEncodingFactory;
	};

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("91BD8930-3567-4607-BE39-24F58EC3C838") cpp_quote(",") cpp_quote("LgEncodingFactoryBuilder") cpp_quote(");") [ uuid(91BD8930-3567-4607-BE39-24F58EC3C838) ] coclass LgEncodingFactoryBuilder
	{
		interface ILgEncodingFactoryBuilder;
	};

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("CF5077EC-7582-4330-87E6-EFAE05D9FC99") cpp_quote(",") cpp_quote("LgCollation") cpp_quote(");") [ uuid(CF5077EC-7582-4330-87E6-EFAE05D9FC99) ] coclass LgCollation
	{
		interface ILgCollation;
	};

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("5EEAE2A2-144F-11D3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgWritingSystem") cpp_quote(");") [ uuid(5EEAE2A2-144F-11D3-8078-0000C0FB81B5) ] coclass LgWritingSystem
	{
		interface ILgWritingSystem;
	};

	cpp_quote("ATTACH_GUID_TO_CLASS(class,") cpp_quote("B5A76AE2-1455-11D3-8078-0000C0FB81B5") cpp_quote(",") cpp_quote("LgEncoding") cpp_quote(");") [ uuid(B5A76AE2-1455-11D3-8078-0000C0FB81B5) ] coclass LgEncoding
	{
		interface ILgEncoding;
	};

};

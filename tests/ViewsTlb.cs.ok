// --------------------------------------------------------------------------------------------
// Copyright (c) 2007, SIL International. All rights reserved.
// 
// File: ViewsTlb.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file ViewsTlb.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace SIL.Fieldworks.Test
{
	using LanguageLib;
	using FwKernelLib;
	using Views;
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	using stdole;
	
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("6C456541-C2B6-11d3-8078-0000C0FB81B5")]
	public interface IVwNotifyChange
	{
		
		void PropChanged(int hvo, int tag, int ivMin, int cvIns, int cvDel);
	}
	
	public enum VwSpecialChars
	{
		
		kscBackspace = 8,
		
		kscDelForward = 127,
	}
	
	public enum PropChangeType
	{
		
		kpctNotifyMeThenAll,
		
		kpctNotifyAll,
		
		kpctNotifyAllButMe,
	}
	
	public enum DbColType
	{
		
		koctGuid = 0,
		
		koctInt = 1,
		
		koctString = 2,
		
		koctFmt = 3,
		
		koctMlaAlt = 4,
		
		koctMlsAlt = 5,
		
		koctMltAlt = 6,
		
		koctObj = 7,
		
		koctObjVec = 8,
		
		koctBaseId = 9,
		
		koctTtp = 10,
		
		koctUnicode = 11,
		
		koctInt64 = 12,
		
		koctTime = 13,
		
		koctEnc = 14,
		
		koctFlid = 15,
		
		koctTimeStamp = 16,
		
		koctObjOwn = 17,
		
		koctObjVecOwn = 18,
		
		koctLim = 19,
		
		koctObjVecExtra = 20,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("A25318C8-EB1F-4f38-8E8D-80BF2849001B")]
	public interface IDbColSpec
	{
		
		void Clear();
		
		void Push(int oct, int icolBase, int tag, int enc);
		
		void Size(out int _c);
		
		void GetColInfo(int iIndex, out int _oct, out int _icolBase, out int _tag, out int _enc);
		
		void GetDbColType(int iIndex, out int _oct);
		
		void GetBaseCol(int iIndex, out int _iBaseCol);
		
		void GetTag(int iIndex, out int _tag);
		
		void GetEnc(int iIndex, out int _enc);
	}
	
	#region DbColSpec CoClass definitions
	[ComImport()]
	[CoClass(typeof(_DbColSpecClass))]
	[Guid("A25318C8-EB1F-4f38-8E8D-80BF2849001B")]
	public interface DbColSpec : IDbColSpec
	{
	}
	
	#region Private _DbColSpecClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("26F0F36D-C905-4d1e-B1A9-AB3EA8C4D340")]
	internal class _DbColSpecClass : IDbColSpec, DbColSpec
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Clear();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Push(int oct, int icolBase, int tag, int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Size(out int _c);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetColInfo(int iIndex, out int _oct, out int _icolBase, out int _tag, out int _enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetDbColType(int iIndex, out int _oct);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetBaseCol(int iIndex, out int _iBaseCol);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetTag(int iIndex, out int _tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetEnc(int iIndex, out int _enc);
	}
	#endregion
	
	public static class DbColSpecClass
	{
		
		delegate DbColSpec DbColSpecClassDelegate();
		
		public static DbColSpec Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (DbColSpec)form.Invoke(new DbColSpecClassDelegate(Create));
				}
			}
			return new _DbColSpecClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0A60A601-C298-11d3-8078-0000C0FB81B5")]
	public interface ISilDataAccess
	{
		
		int get_ObjectProp(int hvo, int tag);
		
		int get_VecItem(int hvo, int tag, int index);
		
		int get_VecSize(int hvo, int tag);
		
		void VecProp(int hvo, int tag, int chvoMax, out int _chvo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*long[]*/ _rghvo);
		
		void BinaryPropRgb(int obj, int tag, out byte _rgb, int cbMax, out int _cb);
		
		System.Guid get_GuidProp(int hvo, int tag);
		
		int get_IntProp(int hvo, int tag);
		
		long get_Int64Prop(int hvo, int tag);
		
		ITsString get_MultiStringAlt(int hvo, int tag, int enc);
		
		ITsMultiString get_MultiStringProp(int hvo, int tag);
		
		object get_Prop(int hvo, int tag);
		
		ITsString get_StringProp(int hvo, int tag);
		
		long get_TimeProp(int hvo, int tag);
		
		string get_UnicodeProp(int obj, int tag);
		
		void set_UnicodeProp(int obj, int tag, string bstr);
		
		void UnicodePropRgch(int obj, int tag, out string _rgch, int cchMax, out int _cch);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		System.IntPtr get_UnknownProp(int hvo, int tag, ref System.Guid iid);
		
		[return: MarshalAs(UnmanagedType.IUnknown)]
		object get_UnknownPropNew(int hvo, int tag);
		
		void BeginUndoTask(string bstrUndo, string bstrRedo);
		
		void EndUndoTask();
		
		void ContinueUndoTask();
		
		void EndOuterUndoTask();
		
		void BreakUndoTask(string bstrUndo, string bstrRedo);
		
		IActionHandler GetActionHandler();
		
		void SetActionHandler(IActionHandler _acth);
		
		void DeleteObj(int hvoObj);
		
		void DeleteObjOwner(int hvoOwner, int hvoObj, int tag, int ihvo);
		
		void InsertNew(int hvoObj, int tag, int ihvo, int chvo, IVwStylesheet _ss);
		
		int MakeNewObject(int clid, int hvoOwner, int tag, int ord);
		
		void MoveOwnSeq(int hvoSrcOwner, int tagSrc, int ihvoStart, int ihvoEnd, int hvoDstOwner, int tagDst, int ihvoDstStart);
		
		void Replace(int hvoObj, int tag, int ihvoMin, int ihvoLim, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] int[] _rghvo, int chvo);
		
		void SetObjProp(int hvo, int tag, int hvoObj);
		
		void RemoveObjRefs(int hvo);
		
		void SetBinary(int obj, int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] _rgb, int cb);
		
		void SetGuid(int hvo, int tag, System.Guid uid);
		
		void SetInt(int hvo, int tag, int n);
		
		void SetInt64(int hvo, int tag, long lln);
		
		void SetMultiStringAlt(int hvo, int tag, int enc, ITsString _tss);
		
		void SetString(int hvo, int tag, ITsString _tss);
		
		void SetTime(int hvo, int tag, long lln);
		
		void SetUnicode(int obj, int tag, string _rgch, int cch);
		
		void SetUnknown(int hvoObj, int tag, [MarshalAs(UnmanagedType.IUnknown)] object _unk);
		
		void AddNotification(IVwNotifyChange _nchng);
		
		void PropChanged(IVwNotifyChange _nchng, int _ct, int hvo, int tag, int ivMin, int cvIns, int cvDel);
		
		void RemoveNotification(IVwNotifyChange _nchng);
		
		ILgEncodingFactory EncodingFactory
		{
			get;
			set;
		}
		
		int get_EncodingsOfInterest(int cencMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _enc);
		
		void InsertRelExtra(int hvoSrc, int tag, int ihvo, int hvoDst, string bstrExtra);
		
		void UpdateRelExtra(int hvoSrc, int tag, int ihvo, string bstrExtra);
		
		void GetRelExtra(int hvoSrc, int tag, int ihvo, out string _bstrExtra);
		
		void RequestAutoBrUpdate(int tagSrc, int tagDst);
		
		bool get_IsPropInCache(int hvo, int tag, int cpt, int enc);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("028E3097-3727-4810-B9F5-FF6E56228F6F")]
	public interface IVwCacheDa
	{
		
		void CacheObjProp(int obj, int tag, int val);
		
		void CacheVecProp(int obj, int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] int[] rghvo, int chvo);
		
		void CacheReplace(int hvoObj, int tag, int ihvoMin, int ihvoLim, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] int[] _rghvo, int chvo);
		
		void CacheBinaryProp(int obj, int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] _rgb, int cb);
		
		void CacheGuidProp(int obj, int tag, System.Guid uid);
		
		void CacheInt64Prop(int obj, int tag, long val);
		
		void CacheIntProp(int obj, int tag, int val);
		
		void CacheStringAlt(int obj, int tag, int enc, ITsString _tss);
		
		void CacheStringProp(int obj, int tag, ITsString _tss);
		
		void CacheTimeProp(int hvo, int tag, long val);
		
		void CacheUnicodeProp(int obj, int tag, string _rgch, int cch);
		
		void CacheUnknown(int obj, int tag, [MarshalAs(UnmanagedType.IUnknown)] object _unk);
		
		void NewObject(int clid, int hvoOwner, int tag, int ord, out int _hvoNew);
		
		void IsDirty(out bool _f);
		
		void GetObjIndex(int hvoOwn, int flid, int hvo, out int ihvo);
		
		void GetOutlineNumber(int hvo, int flid, bool fFinPer, out string _bstr);
		
		void ClearInfoAbout(int hvo, bool fIncludeOwnedObjects);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("A9DBBF8C-8FC9-41f7-87F5-8D141A7AA99F")]
	public interface IVirtualProperty
	{
		
		void Contents(ISilDataAccess _sda, int hvo, int tagVirtual, int chvoMax, out int _chvo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*long[]*/ _rghvo, out bool _fOkToCache);
		
		void HandleBaseChanges(IVwCacheDa _vcd, int hvo, int tagVirtual, int chvoDel, int _rghvoDel, int chvoIns, int _rghvoIns, int chvo, int _rghvo);
		
		void HandleItemChange(IVwCacheDa _vcd, int hvo, int tagVirtual, int hvoItem, int chvo, int _rghvo);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("6E96EB2C-8BF0-433b-AE75-32308776EEAE")]
	public interface IVpManager
	{
		
		int CreateVirtualProp(IVirtualProperty _vp);
		
		void get_GetVirtualProp(int _tag, out IVirtualProperty _pvp);
		
		void MakeDependency(int tagSrc, int tagDst);
		
		bool get_IsVirtualProp(int tag);
		
		void NoteChange(int hvo, int tagVirtual);
		
		void NoteItemChange(int hvo, int tagVirtual, int hvoItem);
		
		void NoteBaseChanges(int hvo, int tagVirtual, int chvoDel, int _rghvoDel, int chvoIns, int _rghvoIns);
	}
	
	#region VwCacheDa CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwCacheDaClass))]
	[Guid("0A60A601-C298-11d3-8078-0000C0FB81B5")]
	public interface VwCacheDa : ISilDataAccess, IVwCacheDa, IVpManager
	{
	}
	
	#region Private _VwCacheDaClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("FFF54604-C92B-4745-B74A-703CFBB81BB0")]
	internal class _VwCacheDaClass : ISilDataAccess, VwCacheDa
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int CreateVirtualProp(IVirtualProperty _vp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void get_GetVirtualProp(int _tag, out IVirtualProperty _pvp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MakeDependency(int tagSrc, int tagDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsVirtualProp(int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NoteChange(int hvo, int tagVirtual);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NoteItemChange(int hvo, int tagVirtual, int hvoItem);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NoteBaseChanges(int hvo, int tagVirtual, int chvoDel, int _rghvoDel, int chvoIns, int _rghvoIns);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheObjProp(int obj, int tag, int val);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheVecProp(int obj, int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] int[] rghvo, int chvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheReplace(int hvoObj, int tag, int ihvoMin, int ihvoLim, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] int[] _rghvo, int chvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheBinaryProp(int obj, int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] _rgb, int cb);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheGuidProp(int obj, int tag, System.Guid uid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheInt64Prop(int obj, int tag, long val);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheIntProp(int obj, int tag, int val);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheStringAlt(int obj, int tag, int enc, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheStringProp(int obj, int tag, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheTimeProp(int hvo, int tag, long val);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheUnicodeProp(int obj, int tag, string _rgch, int cch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheUnknown(int obj, int tag, [MarshalAs(UnmanagedType.IUnknown)] object _unk);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NewObject(int clid, int hvoOwner, int tag, int ord, out int _hvoNew);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void IsDirty(out bool _f);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetObjIndex(int hvoOwn, int flid, int hvo, out int ihvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetOutlineNumber(int hvo, int flid, bool fFinPer, out string _bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ClearInfoAbout(int hvo, bool fIncludeOwnedObjects);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ObjectProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_VecItem(int hvo, int tag, int index);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_VecSize(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void VecProp(int hvo, int tag, int chvoMax, out int _chvo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*long[]*/ _rghvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void BinaryPropRgb(int obj, int tag, out byte _rgb, int cbMax, out int _cb);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern System.Guid get_GuidProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_IntProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern long get_Int64Prop(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString get_MultiStringAlt(int hvo, int tag, int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsMultiString get_MultiStringProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern object get_Prop(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString get_StringProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern long get_TimeProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_UnicodeProp(int obj, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_UnicodeProp(int obj, int tag, string bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void UnicodePropRgch(int obj, int tag, out string _rgch, int cchMax, out int _cch);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern System.IntPtr get_UnknownProp(int hvo, int tag, ref System.Guid iid);
		
		[return: MarshalAs(UnmanagedType.IUnknown)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern object get_UnknownPropNew(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void BeginUndoTask(string bstrUndo, string bstrRedo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void EndUndoTask();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ContinueUndoTask();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void EndOuterUndoTask();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void BreakUndoTask(string bstrUndo, string bstrRedo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IActionHandler GetActionHandler();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetActionHandler(IActionHandler _acth);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DeleteObj(int hvoObj);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DeleteObjOwner(int hvoOwner, int hvoObj, int tag, int ihvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void InsertNew(int hvoObj, int tag, int ihvo, int chvo, IVwStylesheet _ss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int MakeNewObject(int clid, int hvoOwner, int tag, int ord);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MoveOwnSeq(int hvoSrcOwner, int tagSrc, int ihvoStart, int ihvoEnd, int hvoDstOwner, int tagDst, int ihvoDstStart);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Replace(int hvoObj, int tag, int ihvoMin, int ihvoLim, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] int[] _rghvo, int chvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetObjProp(int hvo, int tag, int hvoObj);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RemoveObjRefs(int hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetBinary(int obj, int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] _rgb, int cb);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetGuid(int hvo, int tag, System.Guid uid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetInt(int hvo, int tag, int n);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetInt64(int hvo, int tag, long lln);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetMultiStringAlt(int hvo, int tag, int enc, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetString(int hvo, int tag, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetTime(int hvo, int tag, long lln);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetUnicode(int obj, int tag, string _rgch, int cch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetUnknown(int hvoObj, int tag, [MarshalAs(UnmanagedType.IUnknown)] object _unk);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AddNotification(IVwNotifyChange _nchng);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void PropChanged(IVwNotifyChange _nchng, int _ct, int hvo, int tag, int ivMin, int cvIns, int cvDel);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RemoveNotification(IVwNotifyChange _nchng);
		
		public virtual extern ILgEncodingFactory EncodingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_EncodingsOfInterest(int cencMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void InsertRelExtra(int hvoSrc, int tag, int ihvo, int hvoDst, string bstrExtra);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void UpdateRelExtra(int hvoSrc, int tag, int ihvo, string bstrExtra);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetRelExtra(int hvoSrc, int tag, int ihvo, out string _bstrExtra);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RequestAutoBrUpdate(int tagSrc, int tagDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsPropInCache(int hvo, int tag, int cpt, int enc);
	}
	#endregion
	
	public static class VwCacheDaClass
	{
		
		delegate VwCacheDa VwCacheDaClassDelegate();
		
		public static VwCacheDa Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwCacheDa)form.Invoke(new VwCacheDaClassDelegate(Create));
				}
			}
			return new _VwCacheDaClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("AAAA731D-E34E-4742-948F-C88BBD0AE136")]
	public interface IVwOleDbDa
	{
		
		void CreateDummyID(out int _hvo);
		
		void Load(string bstrSqlStmt, IDbColSpec _dcs, int hvoBase, int nrowMax, IAdvInd _advi, bool fNotifyChange);
		
		void Save();
		
		void Clear();
		
		void CheckTimeStamp(int hvo);
		
		void SetTimeStamp(int hvo);
		
		void CacheCurrTimeStamp(int hvo);
		
		void CacheCurrTimeStampAndOwner(int hvo);
		
		void Close();
		
		int get_ObjOwner(int hvo);
		
		int get_ObjClid(int hvo);
		
		int get_ObjOwnFlid(int hvo);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8645fA4F-EE90-11D2-A9B8-0080C87B6086")]
	public interface ISetupVwOleDbDa
	{
		
		void Init([MarshalAs(UnmanagedType.IUnknown)] object _ode, [MarshalAs(UnmanagedType.IUnknown)] object _mdc, [MarshalAs(UnmanagedType.IUnknown)] object _encf, IActionHandler _acth);
		
		[return: MarshalAs(UnmanagedType.IUnknown)]
		object GetOleDbEncap();
	}
	
	#region VwOleDbDa CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwOleDbDaClass))]
	[Guid("0A60A601-C298-11d3-8078-0000C0FB81B5")]
	public interface VwOleDbDa : ISilDataAccess, IVwCacheDa, IVpManager, IVwOleDbDa, ISetupVwOleDbDa
	{
	}
	
	#region Private _VwOleDbDaClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("8645fa50-ee90-11d2-a9b8-0080c87b6086")]
	internal class _VwOleDbDaClass : ISilDataAccess, VwOleDbDa
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Init([MarshalAs(UnmanagedType.IUnknown)] object _ode, [MarshalAs(UnmanagedType.IUnknown)] object _mdc, [MarshalAs(UnmanagedType.IUnknown)] object _encf, IActionHandler _acth);
		
		[return: MarshalAs(UnmanagedType.IUnknown)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern object GetOleDbEncap();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CreateDummyID(out int _hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Load(string bstrSqlStmt, IDbColSpec _dcs, int hvoBase, int nrowMax, IAdvInd _advi, bool fNotifyChange);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Save();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Clear();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CheckTimeStamp(int hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetTimeStamp(int hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheCurrTimeStamp(int hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheCurrTimeStampAndOwner(int hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Close();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ObjOwner(int hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ObjClid(int hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ObjOwnFlid(int hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int CreateVirtualProp(IVirtualProperty _vp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void get_GetVirtualProp(int _tag, out IVirtualProperty _pvp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MakeDependency(int tagSrc, int tagDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsVirtualProp(int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NoteChange(int hvo, int tagVirtual);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NoteItemChange(int hvo, int tagVirtual, int hvoItem);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NoteBaseChanges(int hvo, int tagVirtual, int chvoDel, int _rghvoDel, int chvoIns, int _rghvoIns);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheObjProp(int obj, int tag, int val);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheVecProp(int obj, int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] int[] rghvo, int chvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheReplace(int hvoObj, int tag, int ihvoMin, int ihvoLim, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] int[] _rghvo, int chvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheBinaryProp(int obj, int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] _rgb, int cb);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheGuidProp(int obj, int tag, System.Guid uid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheInt64Prop(int obj, int tag, long val);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheIntProp(int obj, int tag, int val);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheStringAlt(int obj, int tag, int enc, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheStringProp(int obj, int tag, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheTimeProp(int hvo, int tag, long val);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheUnicodeProp(int obj, int tag, string _rgch, int cch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheUnknown(int obj, int tag, [MarshalAs(UnmanagedType.IUnknown)] object _unk);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void NewObject(int clid, int hvoOwner, int tag, int ord, out int _hvoNew);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void IsDirty(out bool _f);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetObjIndex(int hvoOwn, int flid, int hvo, out int ihvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetOutlineNumber(int hvo, int flid, bool fFinPer, out string _bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ClearInfoAbout(int hvo, bool fIncludeOwnedObjects);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_ObjectProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_VecItem(int hvo, int tag, int index);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_VecSize(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void VecProp(int hvo, int tag, int chvoMax, out int _chvo, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*long[]*/ _rghvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void BinaryPropRgb(int obj, int tag, out byte _rgb, int cbMax, out int _cb);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern System.Guid get_GuidProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_IntProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern long get_Int64Prop(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString get_MultiStringAlt(int hvo, int tag, int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsMultiString get_MultiStringProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern object get_Prop(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString get_StringProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern long get_TimeProp(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_UnicodeProp(int obj, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_UnicodeProp(int obj, int tag, string bstr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void UnicodePropRgch(int obj, int tag, out string _rgch, int cchMax, out int _cch);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern System.IntPtr get_UnknownProp(int hvo, int tag, ref System.Guid iid);
		
		[return: MarshalAs(UnmanagedType.IUnknown)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern object get_UnknownPropNew(int hvo, int tag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void BeginUndoTask(string bstrUndo, string bstrRedo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void EndUndoTask();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ContinueUndoTask();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void EndOuterUndoTask();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void BreakUndoTask(string bstrUndo, string bstrRedo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IActionHandler GetActionHandler();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetActionHandler(IActionHandler _acth);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DeleteObj(int hvoObj);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DeleteObjOwner(int hvoOwner, int hvoObj, int tag, int ihvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void InsertNew(int hvoObj, int tag, int ihvo, int chvo, IVwStylesheet _ss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int MakeNewObject(int clid, int hvoOwner, int tag, int ord);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MoveOwnSeq(int hvoSrcOwner, int tagSrc, int ihvoStart, int ihvoEnd, int hvoDstOwner, int tagDst, int ihvoDstStart);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Replace(int hvoObj, int tag, int ihvoMin, int ihvoLim, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=5)] int[] _rghvo, int chvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetObjProp(int hvo, int tag, int hvoObj);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RemoveObjRefs(int hvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetBinary(int obj, int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] _rgb, int cb);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetGuid(int hvo, int tag, System.Guid uid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetInt(int hvo, int tag, int n);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetInt64(int hvo, int tag, long lln);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetMultiStringAlt(int hvo, int tag, int enc, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetString(int hvo, int tag, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetTime(int hvo, int tag, long lln);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetUnicode(int obj, int tag, string _rgch, int cch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetUnknown(int hvoObj, int tag, [MarshalAs(UnmanagedType.IUnknown)] object _unk);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AddNotification(IVwNotifyChange _nchng);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void PropChanged(IVwNotifyChange _nchng, int _ct, int hvo, int tag, int ivMin, int cvIns, int cvDel);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RemoveNotification(IVwNotifyChange _nchng);
		
		public virtual extern ILgEncodingFactory EncodingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_EncodingsOfInterest(int cencMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ _enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void InsertRelExtra(int hvoSrc, int tag, int ihvo, int hvoDst, string bstrExtra);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void UpdateRelExtra(int hvoSrc, int tag, int ihvo, string bstrExtra);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetRelExtra(int hvoSrc, int tag, int ihvo, out string _bstrExtra);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RequestAutoBrUpdate(int tagSrc, int tagDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsPropInCache(int hvo, int tag, int cpt, int enc);
	}
	#endregion
	
	public static class VwOleDbDaClass
	{
		
		delegate VwOleDbDa VwOleDbDaClassDelegate();
		
		public static VwOleDbDa Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwOleDbDa)form.Invoke(new VwOleDbDaClassDelegate(Create));
				}
			}
			return new _VwOleDbDaClass();
		}
	}
	#endregion
	
	public enum VwShiftStatus
	{
		
		kfssNone = 0,
		
		kfssShift = 1,
		
		kfssControl = 2,
		
		kgrfssShiftControl = kfssShift|kfssControl,
	}
	
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public struct VwSelLevInfo
	{
		
		public int tag;
		
		public int cpropPrevious;
		
		public int ihvo;
	}
	
	public enum VwUnit
	{
		
		kunPoint1000 = 0,
		
		kunPercent100 = 1,
		
		kunRelative = 2,
	}
	
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public struct VwLength
	{
		
		public int nVal;
		
		public VwUnit unit;
	}
	
	public enum VwAlignment
	{
		
		kvaLeft,
		
		kvaCenter,
		
		kvaRight,
		
		kvaJustified,
	}
	
	public enum VwFramePosition
	{
		
		kvfpVoid = 0,
		
		kvfpAbove = 1,
		
		kvfpBelow = 2,
		
		kvfpLhs = 4,
		
		kvfpRhs = 8,
		
		kvfpHsides = kvfpAbove|kvfpBelow,
		
		kvfpVsides = kvfpLhs|kvfpRhs,
		
		kvfpBox = kvfpHsides|kvfpVsides,
	}
	
	public enum VwRule
	{
		
		kvrlNone = 0,
		
		kvrlGroups = 1,
		
		kvrlRowNoGroups = 2,
		
		kvrlRows = kvrlGroups|kvrlRowNoGroups,
		
		kvrlColsNoGroups = 4,
		
		kvrlCols = kvrlGroups|kvrlColsNoGroups,
		
		kvrlAll = kvrlRows|kvrlCols,
	}
	
	public enum VwBulNum
	{
		
		kvbnNone = 0,
		
		kvbnNumberBase = 10,
		
		kvbnArabic = kvbnNumberBase,
		
		kvbnRomanUpper,
		
		kvbnRomanLower,
		
		kvbnLetterUpper,
		
		kvbnLetterLower,
		
		kvbnArabic01,
		
		kvbnNumberMax,
		
		kvbnBulletBase = 100,
		
		kvbnBullet = kvbnBulletBase,
		
		kvbnBulletMax = kvbnBulletBase+100,
	}
	
	public enum VwStyleProperty
	{
		
		kspNamedStyle = 133,
		
		kspMarginLeading = 19,
		
		kspMarginTrailing = 20,
		
		kspMarginTop = 21,
		
		kspMarginBottom = 22,
		
		kspMaxLines = 151,
		
		kspWsStyle = 156,
		
		kspRelLineHeight = 160,
	}
	
	public enum VwFontAbsoluteSize
	{
		
		kvfsXXSmall,
		
		kvfsXSmall,
		
		kvfsSmall,
		
		kvfsNormal,
		
		kvfsLarge,
		
		kvfsXLarge,
		
		kvfsXXLarge,
		
		kvfsSmaller,
		
		kvfsLarger,
	}
	
	public enum VwFontWeight
	{
		
		kvfw100 = 100,
		
		kvfw200 = 200,
		
		kvfw300 = 300,
		
		kvfw400 = 400,
		
		kvfw500 = 500,
		
		kvfw600 = 600,
		
		kvfw700 = 700,
		
		kvfw800 = 800,
		
		kvfw900 = 900,
		
		kvfwNormal = 400,
		
		kvfwBold = 700,
		
		kvfwBolder = -1,
		
		kvfwLighter = -2,
	}
	
	public enum VwSpecialAttrTags
	{
		
		ktagNotAnAttr = -1,
		
		ktagGapInAttrs = -2,
	}
	
	public enum VwSelectionState
	{
		
		vssDisabled,
		
		vssOutOfFocus,
		
		vssEnabled,
		
		vssLim,
	}
	
	public enum VwPrepDrawResult
	{
		
		kxpdrNormal,
		
		kxpdrAdjust,
		
		kxpdrInvalidate,
		
		kxpdrLim,
	}
	
	public enum VwPubTextType
	{
		
		kttpAllText,
		
		kttpPublishedText,
		
		kttpNonPublishedText,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("EE2514FC-6349-4d2d-AA0A-4638C1C50895")]
	public interface IVwRootBox : IVwNotifyChange
	{
		
		new void PropChanged(int hvo, int tag, int ivMin, int cvIns, int cvDel);
		
		void SetSite(IVwRootSite _vrs);
		
		ISilDataAccess DataAccess
		{
			get;
			set;
		}
		
		void SetRootObjects([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] int[] _rghvo, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] IVwViewConstructor[] _rgpvwvc, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] int[] _rgfrag, IVwStylesheet _ss, int chvo);
		
		void SetRootObject(int hvo, IVwViewConstructor _vwvc, int frag, IVwStylesheet _ss);
		
		void SetRootVariant(object v, IVwStylesheet _ss, IVwViewConstructor _vwvc, int frag);
		
		void SetRootString(ITsString _tss, IVwStylesheet _ss, IVwViewConstructor _vwvc, int frag);
		
		IVwOverlay Overlay
		{
			get;
			set;
		}
		
		object GetRootVariant();
		
		void Serialize(IStream _strm);
		
		void Deserialize(IStream _strm);
		
		void WriteWpx(IStream _strm);
		
		IVwSelection Selection
		{
			get;
		}
		
		void DestroySelection();
		
		IVwSelection MakeTextSelection(int ihvoRoot, int cvlsi, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] SelLevInfo[] _rgvsli, int tagTextProp, int cpropPrevious, int ichAnchor, int ichEnd, int enc, bool fAssocPrev, int ihvoEnd, ITsTextProps _ttpIns, bool fInstall);
		
		IVwSelection MakeRangeSelection(IVwSelection _selAnchor, IVwSelection _selEnd, bool fInstall);
		
		IVwSelection MakeSimpleSel(bool fInitial, bool fEdit, bool fRange, bool fInstall);
		
		IVwSelection MakeTextSelInObj(int ihvoRoot, int cvlsi, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] SelLevInfo[] _rgvsli, SelLevInfo _rgvsliEnd, bool fInitial, bool fEdit, bool fRange, bool fWholeObj, bool fInstall);
		
		IVwSelection MakeSelAt(int xd, int yd, Rect rcSrc, Rect rcDst, bool fInstall);
		
		bool get_IsClickInText(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		bool get_IsClickInObject(int xd, int yd, Rect rcSrc, Rect rcDst, out int _odt);
		
		void OnTyping(IVwGraphics _vg, string bstrInput, int cchBackspace, int cchDelForward, ushort chFirst, Rect rcSrcRoot, Rect rcDstRoot, int _encPending, int _wsPending);
		
		void OnChar(int chw);
		
		void OnSysChar(int chw);
		
		void OnExtendedKey(int chw, VwShiftStatus ss, int nFlags);
		
		void FlashInsertionPoint();
		
		void MouseDown(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		void MouseDblClk(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		void MouseMoveDrag(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		void MouseDownExtended(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		void MouseUp(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		void Activate(VwSelectionState vss);
		
		VwPrepDrawResult PrepareToDraw(IVwGraphics _vg, Rect rcSrc, Rect rcDst);
		
		void DrawRoot(IVwGraphics _vg, Rect rcSrc, Rect rcDst, bool fDrawSel);
		
		void Layout(IVwGraphics _vg, int dxsAvailWidth);
		
		int Height
		{
			get;
		}
		
		int Width
		{
			get;
		}
		
		void Print(IVwPrintContext _vpc, IAdvInd2 _advi2);
		
		IVwRootSite Site
		{
			get;
		}
		
		bool LoseFocus();
		
		void Close();
		
		void AddSelChngListener(IEventListener _el);
		
		void DelSelChngListener(IEventListener _el);
		
		void Reconstruct();
		
		void OnStylesheetChange();
		
		void DrawingErrors();
		
		IVwStylesheet Stylesheet
		{
			get;
		}
		
		void SetTableColWidths([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] VwLength[] _rgvlen, int cvlen);
		
		bool IsDirty();
		
		int XdPos
		{
			get;
		}
		
		VwPubTextType DefaultTextType
		{
			get;
			set;
		}
	}
	
	#region VwRootBox CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwRootBoxClass))]
	[Guid("EE2514FC-6349-4d2d-AA0A-4638C1C50895")]
	public interface VwRootBox : IVwRootBox
	{
	}
	
	#region Private _VwRootBoxClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("D1074356-4F41-4e3e-A1ED-9C044FD0C096")]
	internal class _VwRootBoxClass : IVwRootBox, VwRootBox
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void PropChanged(int hvo, int tag, int ivMin, int cvIns, int cvDel);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetSite(IVwRootSite _vrs);
		
		public virtual extern ISilDataAccess DataAccess
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetRootObjects([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] int[] _rghvo, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] IVwViewConstructor[] _rgpvwvc, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=4)] int[] _rgfrag, IVwStylesheet _ss, int chvo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetRootObject(int hvo, IVwViewConstructor _vwvc, int frag, IVwStylesheet _ss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetRootVariant(object v, IVwStylesheet _ss, IVwViewConstructor _vwvc, int frag);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetRootString(ITsString _tss, IVwStylesheet _ss, IVwViewConstructor _vwvc, int frag);
		
		public virtual extern IVwOverlay Overlay
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern object GetRootVariant();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Serialize(IStream _strm);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Deserialize(IStream _strm);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void WriteWpx(IStream _strm);
		
		public virtual extern IVwSelection Selection
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DestroySelection();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IVwSelection MakeTextSelection(int ihvoRoot, int cvlsi, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] SelLevInfo[] _rgvsli, int tagTextProp, int cpropPrevious, int ichAnchor, int ichEnd, int enc, bool fAssocPrev, int ihvoEnd, ITsTextProps _ttpIns, bool fInstall);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IVwSelection MakeRangeSelection(IVwSelection _selAnchor, IVwSelection _selEnd, bool fInstall);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IVwSelection MakeSimpleSel(bool fInitial, bool fEdit, bool fRange, bool fInstall);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IVwSelection MakeTextSelInObj(int ihvoRoot, int cvlsi, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] SelLevInfo[] _rgvsli, SelLevInfo _rgvsliEnd, bool fInitial, bool fEdit, bool fRange, bool fWholeObj, bool fInstall);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IVwSelection MakeSelAt(int xd, int yd, Rect rcSrc, Rect rcDst, bool fInstall);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsClickInText(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsClickInObject(int xd, int yd, Rect rcSrc, Rect rcDst, out int _odt);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void OnTyping(IVwGraphics _vg, string bstrInput, int cchBackspace, int cchDelForward, ushort chFirst, Rect rcSrcRoot, Rect rcDstRoot, int _encPending, int _wsPending);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void OnChar(int chw);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void OnSysChar(int chw);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void OnExtendedKey(int chw, VwShiftStatus ss, int nFlags);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FlashInsertionPoint();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MouseDown(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MouseDblClk(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MouseMoveDrag(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MouseDownExtended(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MouseUp(int xd, int yd, Rect rcSrc, Rect rcDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Activate(VwSelectionState vss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern VwPrepDrawResult PrepareToDraw(IVwGraphics _vg, Rect rcSrc, Rect rcDst);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DrawRoot(IVwGraphics _vg, Rect rcSrc, Rect rcDst, bool fDrawSel);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Layout(IVwGraphics _vg, int dxsAvailWidth);
		
		public virtual extern int Height
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern int Width
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Print(IVwPrintContext _vpc, IAdvInd2 _advi2);
		
		public virtual extern IVwRootSite Site
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool LoseFocus();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Close();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AddSelChngListener(IEventListener _el);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DelSelChngListener(IEventListener _el);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Reconstruct();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void OnStylesheetChange();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DrawingErrors();
		
		public virtual extern IVwStylesheet Stylesheet
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetTableColWidths([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] VwLength[] _rgvlen, int cvlen);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool IsDirty();
		
		public virtual extern int XdPos
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern VwPubTextType DefaultTextType
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
	}
	#endregion
	
	public static class VwRootBoxClass
	{
		
		delegate VwRootBox VwRootBoxClassDelegate();
		
		public static VwRootBox Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwRootBox)form.Invoke(new VwRootBoxClassDelegate(Create));
				}
			}
			return new _VwRootBoxClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("EE103481-48BB-11d3-8078-0000C0FB81B5")]
	public interface IVwViewConstructor
	{
		
		void Display(IVwEnv _vwenv, int hvo, int frag);
		
		void DisplayVec(IVwEnv _vwenv, int hvo, int tag, int frag);
		
		ITsString DisplayVariant(IVwEnv _vwenv, int tag, object v, int frag);
		
		ITsString UpdateProp(ISilDataAccess _sda, int hvo, int tag, int frag, ITsString _tssVal);
		
		int EstimateHeight(int hvo, int frag, int dxAvailWidth);
		
		void LoadDataFor(IVwEnv _vwenv, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] int[] _rghvo, int chvo, int hvoParent, int tag, int frag, int ihvoMin);
		
		ITsString GetStrForGuid(string bstrGuid);
		
		void DoHotLinkAction(string bstrData, int hvoOwner, int tag, ITsString _tss, int ichObj);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f6d10644-c00c-11d2-8078-0000c0fb81b5")]
	public interface IVwRootSite
	{
		
		void InvalidateRect(IVwRootBox _Root, int xsLeft, int ysTop, int dxsWidth, int dysHeight);
		
		void GetGraphics(out IVwGraphics _pvg, out Rect _rcSrcRoot, out Rect _rcDstRoot);
		
		void ReleaseGraphics(IVwGraphics _vg);
		
		int GetAvailWidth();
		
		void DoUpdates();
		
		void PropChanged(int hvo, int tag, int ivMin, int cvIns, int cvDel);
		
		void SizeChanged();
		
		bool AdjustScrollRange(int dxdSize, int dxdPosition, int dydSize, int dydPosition);
		
		void SelectionChanged(IVwSelection _vwselNew);
		
		void OverlayChanged(IVwOverlay _vo);
		
		bool SemiTagging
		{
			get;
		}
	}
	
	public enum VwConcParaOpts
	{
		
		kcpoBold = 1,
		
		kcpoAlign = 2,
		
		kcpoDefault = 3,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8AA390B5-DF89-447b-96B7-CA9918424614")]
	public interface IVwEnv
	{
		
		void AddObjProp(int tag, IVwViewConstructor _vwvc, int frag);
		
		void AddObjVec(int tag, IVwViewConstructor _vwvc, int frag);
		
		void AddObjVecItems(int tag, IVwViewConstructor _vwvc, int frag);
		
		void AddObj(int hvo, IVwViewConstructor _vwvc, int frag);
		
		void AddLazyVecItems(int tag, IVwViewConstructor _vwvc, int frag);
		
		void AddLazyItems([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] int[] _rghvo, int chvo, IVwViewConstructor _vwvc, int frag);
		
		void AddProp(int tag, IVwViewConstructor _vwvc, int frag);
		
		void AddDerivedProp([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] int[] _rgtag, int ctag, IVwViewConstructor _vwvc, int frag);
		
		void NoteDependency([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] int[] _rghvo, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] int[] _rgtag, int chvo);
		
		void AddStringProp(int tag, IVwViewConstructor _vwvc);
		
		void AddIntProp(int tag);
		
		void AddStringAltMember(int tag, int enc, IVwViewConstructor _vwvc);
		
		void AddStringAlt(int tag);
		
		void AddStringAltSeq(int tag, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] int[] _rgenc, int cenc);
		
		void AddString(ITsString _ss);
		
		void AddTimeProp(int tag, uint flags);
		
		void AddGenDateProp(int tag);
		
		int CurrentObject();
		
		int OpenObject
		{
			get;
		}
		
		int EmbeddingLevel
		{
			get;
		}
		
		void GetOuterObject(int ichvoLevel, out int _hvo, out int _tag, out int _ihvo);
		
		ISilDataAccess DataAccess
		{
			get;
		}
		
		void AddWindow(IVwEmbeddedWindow _ew, int dmpAscent, bool fJustifyRight, bool fAutoShow);
		
		void AddSeparatorBar();
		
		void AddSimpleRect(uint rgb, int dmpWidth, int dmpHeight, int dmpBaselineOffset);
		
		void OpenDiv();
		
		void CloseDiv();
		
		void OpenParagraph();
		
		void OpenTaggedPara();
		
		void OpenMappedPara();
		
		void OpenMappedTaggedPara();
		
		void OpenConcPara(int ichMinItem, int ichLimItem, VwConcParaOpts cpoFlags, int dmpAlign);
		
		void CloseParagraph();
		
		void OpenInnerPile();
		
		void CloseInnerPile();
		
		void OpenSpan();
		
		void CloseSpan();
		
		void OpenTable(int cCols, VwLength _vlWidth, int mpBorder, VwAlignment vwalign, VwFramePosition frmpos, VwRule vwrule, int mpSpacing, int mpPadding);
		
		void CloseTable();
		
		void OpenTableRow();
		
		void CloseTableRow();
		
		void OpenTableCell(int nRowSpan, int nColSpan);
		
		void CloseTableCell();
		
		void OpenTableHeaderCell(int nRowSpan, int nColSpan);
		
		void CloseTableHeaderCell();
		
		void MakeColumns(int nColSpan, VwLength vlWidth);
		
		void MakeColumnGroup(int nColSpan, VwLength vlWidth);
		
		void OpenTableHeader();
		
		void CloseTableHeader();
		
		void OpenTableFooter();
		
		void CloseTableFooter();
		
		void OpenTableBody();
		
		void CloseTableBody();
		
		void set_IntProperty(int tpt, int tpv, int nValue);
		
		void set_StringProperty(int sp, string bstrValue);
		
		ITsTextProps Props
		{
			set;
		}
		
		void get_StringWidth(ITsString _tss, ITsTextProps _ttp, out int dmpx, out int dmpy);
		
		void AddPicture(IPicture _pict);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("f6d10646-c00c-11d2-8078-0000c0fb81b5")]
	public interface IVwEmbeddedWindow
	{
		
		void MoveWindow(IVwGraphics _vg, int xdLeft, int ydTop, int dxdWidth, int dydHeight);
		
		bool IsWindowVisible
		{
			get;
		}
		
		void ShowWindow();
		
		void DrawWindow(IVwGraphics _vg);
		
		int Width
		{
			get;
		}
		
		int Height
		{
			get;
		}
	}
	
	public enum VwSelVisOpts
	{
		
		ksvoTop = 1,
		
		ksvoBottom = 2,
		
		ksvoBoth = 4,
		
		ksvoCenter = 8,
	}
	
	[ComImport()]
	[Guid("12AB98D9-7B87-4512-A73C-63A5496DFD7B")]
	public interface IVwSelection
	{
		
		bool IsRange
		{
			get;
		}
		
		void GetSelectionProps(int cttpMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*ITsTextProps[]*/ _rgpttp, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*IVwPropertyStore[]*/ _rgpvps, out int _cttp);
		
		void GetHardAndSoftCharProps(int cttpMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*ITsTextProps[]*/ _rgpttpSel, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*IVwPropertyStore[]*/ _rgpvpsSoft, out int _cttp);
		
		void GetParaProps(int cttpMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*IVwPropertyStore[]*/ _rgpvps, out int _cttp);
		
		void GetHardAndSoftParaProps(int cttpMax, ITsTextProps _rgpttpPara, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*ITsTextProps[]*/ _rgpttpHard, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*IVwPropertyStore[]*/ _rgpvpsSoft, out int _cttp);
		
		void SetSelectionProps(int cttp, ITsTextProps _rgpttp);
		
		void TextSelInfo(bool fEndPoint, out ITsString _ptss, out int _ich, out bool _fAssocPrev, out int _hvoObj, out int _tag, out int _enc);
		
		void CLevels(bool fEndPoint, out int _clev);
		
		void PropInfo(bool fEndPoint, int ilev, out int _hvoObj, out int _tag, out int _ihvo, out int _cpropPrevious, out IVwPropertyStore _pvps);
		
		void AllTextSelInfo(out int _ihvoRoot, int cvlsi, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*VwSelLevInfo[]*/ _rgvsli, out int _tagTextProp, out int _cpropPrevious, out int _ichAnchor, out int _ichEnd, out int _enc, out bool _fAssocPrev, out int _ihvoEnd, out ITsTextProps _pttp);
		
		void AllSelEndInfo(bool fEndPoint, out int _ihvoRoot, int cvlsi, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*VwSelLevInfo[]*/ _rgvsli, out int _tagTextProp, out int _cpropPrevious, out int _ich, out int _enc, out bool _fAssocPrev, out ITsTextProps _pttp);
		
		void Commit(out bool _fOk);
		
		void ExtendToStringBoundaries();
		
		void Location(IVwGraphics _vg, Rect rcSrc, Rect rcDst, out Rect _rdPrimary, out Rect _rdSecondary, out bool _fSplit, out bool _fEndBeforeAnchor);
		
		void GetParaLocation(out Rect _rdLoc);
		
		void ReplaceWithTsString(ITsString _tss);
		
		void GetSelectionString(out ITsString _ptss, string bstr);
		
		void SetIPLocation(bool fTopLine, int xdPos);
		
		bool CanFormatPara
		{
			get;
		}
		
		bool CanFormatChar
		{
			get;
		}
		
		bool CanFormatOverlay
		{
			get;
		}
		
		void Install();
		
		bool get_Follows(IVwSelection _sel);
		
		bool IsValid
		{
			get;
		}
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("F696B01E-974B-4065-B464-BDF459154054")]
	public interface IEventListener
	{
		
		void Notify(int nArg1, int nArg2);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("56B776F4-0277-49f6-982B-29018175D4AF")]
	public interface IVwStylesheet
	{
		
		void PutStyleRgch(int cch, ushort _rgchName, int hvoStyle, int hvoBasedOn, int hvoNext, int nType, bool fPublishedTextStyle, bool fBuiltIn, bool fModified, ITsTextProps _ttp);
		
		ITsTextProps GetStyleRgch(int cch, ushort _rgchName);
		
		void GetNextStyle(string bstrName, out string _bstrNext);
		
		void GetBasedOn(string bstrName, out string _bstrBasedOn);
		
		void GetType(string bstrName, out int _nType);
		
		void IsPublishedTextStyle(string bstrName, out bool _fPublished);
		
		void IsBuiltIn(string bstrName, out bool _fBuiltIn);
		
		void IsModified(string bstrName, out bool _fModified);
		
		ISilDataAccess DataAccess
		{
			get;
		}
		
		void MakeNewStyle(out int _hvoNewStyle);
		
		void Delete(int hvoStyle);
		
		int CStyles
		{
			get;
		}
		
		int get_NthStyle(int ihvo);
		
		ITsTextProps NormalFontStyle
		{
			get;
		}
		
		bool get_IsStyleProtected(string bstrName);
		
		void CacheProps(int cch, ushort _rgchName, int hvoStyle, ITsTextProps _ttp);
	}
	
	#region VwStylesheet CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwStylesheetClass))]
	[Guid("56B776F4-0277-49f6-982B-29018175D4AF")]
	public interface VwStylesheet : IVwStylesheet
	{
	}
	
	#region Private _VwStylesheetClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("353C7E7C-7953-4841-8722-EABC9BC8265E")]
	internal class _VwStylesheetClass : IVwStylesheet, VwStylesheet
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void PutStyleRgch(int cch, ushort _rgchName, int hvoStyle, int hvoBasedOn, int hvoNext, int nType, bool fPublishedTextStyle, bool fBuiltIn, bool fModified, ITsTextProps _ttp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps GetStyleRgch(int cch, ushort _rgchName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetNextStyle(string bstrName, out string _bstrNext);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetBasedOn(string bstrName, out string _bstrBasedOn);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetType(string bstrName, out int _nType);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void IsPublishedTextStyle(string bstrName, out bool _fPublished);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void IsBuiltIn(string bstrName, out bool _fBuiltIn);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void IsModified(string bstrName, out bool _fModified);
		
		public virtual extern ISilDataAccess DataAccess
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void MakeNewStyle(out int _hvoNewStyle);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Delete(int hvoStyle);
		
		public virtual extern int CStyles
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_NthStyle(int ihvo);
		
		public virtual extern ITsTextProps NormalFontStyle
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsStyleProtected(string bstrName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CacheProps(int cch, ushort _rgchName, int hvoStyle, ITsTextProps _ttp);
	}
	#endregion
	
	public static class VwStylesheetClass
	{
		
		delegate VwStylesheet VwStylesheetClassDelegate();
		
		public static VwStylesheet Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwStylesheet)form.Invoke(new VwStylesheetClassDelegate(Create));
				}
			}
			return new _VwStylesheetClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("3D4847FE-EA2D-4255-A496-770059A134CC")]
	public interface IVwPropertyStore
	{
		
		int get_IntProperty(int nID);
		
		string get_StringProperty(int sp);
		
		void get_ChrpFor(ITsTextProps _ttp, out LgCharRenderProps _chrp);
		
		IVwStylesheet Stylesheet
		{
			set;
		}
		
		ILgEncodingFactory EncodingFactory
		{
			set;
		}
		
		IVwPropertyStore ParentStore
		{
			get;
		}
		
		ITsTextProps TextProps
		{
			get;
		}
		
		void get_DerivedPropertiesForTtp(ITsTextProps _ttp, out IVwPropertyStore _pvps);
	}
	
	#region VwPropertyStore CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwPropertyStoreClass))]
	[Guid("3D4847FE-EA2D-4255-A496-770059A134CC")]
	public interface VwPropertyStore : IVwPropertyStore
	{
	}
	
	#region Private _VwPropertyStoreClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("CB59916A-C532-4a57-8CB4-6E1508B4DEC1")]
	internal class _VwPropertyStoreClass : IVwPropertyStore, VwPropertyStore
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_IntProperty(int nID);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_StringProperty(int sp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void get_ChrpFor(ITsTextProps _ttp, out LgCharRenderProps _chrp);
		
		public virtual extern IVwStylesheet Stylesheet
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern ILgEncodingFactory EncodingFactory
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern IVwPropertyStore ParentStore
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern ITsTextProps TextProps
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void get_DerivedPropertiesForTtp(ITsTextProps _ttp, out IVwPropertyStore _pvps);
	}
	#endregion
	
	public static class VwPropertyStoreClass
	{
		
		delegate VwPropertyStore VwPropertyStoreClassDelegate();
		
		public static VwPropertyStore Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwPropertyStore)form.Invoke(new VwPropertyStoreClassDelegate(Create));
				}
			}
			return new _VwPropertyStoreClass();
		}
	}
	#endregion
	
	public enum VwOverlayFlags
	{
		
		kfofTagsUseAttribs = 1,
		
		kfofLeadBracket = 2,
		
		kfofLeadTag = 4,
		
		kfofTrailBracket = 8,
		
		kfofTrailTag = 16,
		
		kgrfofTagAbove = 6,
		
		kgrfofTagBelow = 24,
		
		kgrfofTagAnywhere = 30,
		
		kgrfofBracketAnywhere = 10,
		
		kgrfofDefault = 31,
	}
	
	public enum VwConst1
	{
		
		kcchGuidRepLength = 8,
	}
	
	public enum FwOverlaySetMask
	{
		
		kosmAbbr = 1,
		
		kosmName = 2,
		
		kosmClrFore = 4,
		
		kosmClrBack = 8,
		
		kosmClrUnder = 16,
		
		kosmUnderType = 32,
		
		kosmHidden = 64,
		
		kosmAll = 127,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7D9089C1-3BB9-11d4-8078-0000C0FB81B5")]
	public interface IVwOverlay
	{
		
		string Name
		{
			get;
			set;
		}
		
		string Guid
		{
			get;
			set;
		}
		
		int PossListId
		{
			get;
			set;
		}
		
		VwOverlayFlags Flags
		{
			get;
			set;
		}
		
		string FontName
		{
			get;
			set;
		}
		
		void FontNameRgch(out string _rgch);
		
		int FontSize
		{
			get;
			set;
		}
		
		int MaxShowTags
		{
			get;
			set;
		}
		
		int CTags
		{
			get;
		}
		
		void GetDbTagInfo(int itag, out int _hvo, out uint _clrFore, out uint _clrBack, out uint _clrUnder, out int _unt, out bool _fHidden, out string _rgchGuid);
		
		void SetTagInfo(string _rgchGuid, int hvo, int grfosm, string bstrAbbr, string bstrName, uint clrFore, uint clrBack, uint clrUnder, int unt, bool fHidden);
		
		void GetTagInfo(string _rgchGuid, out int _hvo, out string _bstrAbbr, out string _bstrName, out uint _clrFore, out uint _clrBack, out uint _clrUnder, out int _unt, out bool _fHidden);
		
		void GetDlgTagInfo(int itag, out bool _fHidden, out uint _clrFore, out uint _clrBack, out uint _clrUnder, out int _unt, out string _bstrAbbr, out string _bstrName);
		
		void GetDispTagInfo(string _rgchGuid, out bool _fHidden, out uint _clrFore, out uint _clrBack, out uint _clrUnder, out int _unt, out string _rgchAbbr, int cchMaxAbbr, out int _cchAbbr, out string _rgchName, int cchMaxName, out int _cchName);
		
		void RemoveTag(string _rgchGuid);
		
		void Sort(bool fByAbbr);
		
		IVwOverlay Merge(IVwOverlay _vo);
	}
	
	#region VwOverlay CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwOverlayClass))]
	[Guid("7D9089C1-3BB9-11d4-8078-0000C0FB81B5")]
	public interface VwOverlay : IVwOverlay
	{
	}
	
	#region Private _VwOverlayClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("73F5DB01-3D2A-11d4-8078-0000C0FB81B5")]
	internal class _VwOverlayClass : IVwOverlay, VwOverlay
	{
		
		public virtual extern string Name
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string Guid
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int PossListId
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern VwOverlayFlags Flags
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern string FontName
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FontNameRgch(out string _rgch);
		
		public virtual extern int FontSize
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int MaxShowTags
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern int CTags
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetDbTagInfo(int itag, out int _hvo, out uint _clrFore, out uint _clrBack, out uint _clrUnder, out int _unt, out bool _fHidden, out string _rgchGuid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetTagInfo(string _rgchGuid, int hvo, int grfosm, string bstrAbbr, string bstrName, uint clrFore, uint clrBack, uint clrUnder, int unt, bool fHidden);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetTagInfo(string _rgchGuid, out int _hvo, out string _bstrAbbr, out string _bstrName, out uint _clrFore, out uint _clrBack, out uint _clrUnder, out int _unt, out bool _fHidden);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetDlgTagInfo(int itag, out bool _fHidden, out uint _clrFore, out uint _clrBack, out uint _clrUnder, out int _unt, out string _bstrAbbr, out string _bstrName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetDispTagInfo(string _rgchGuid, out bool _fHidden, out uint _clrFore, out uint _clrBack, out uint _clrUnder, out int _unt, out string _rgchAbbr, int cchMaxAbbr, out int _cchAbbr, out string _rgchName, int cchMaxName, out int _cchName);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RemoveTag(string _rgchGuid);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Sort(bool fByAbbr);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IVwOverlay Merge(IVwOverlay _vo);
	}
	#endregion
	
	public static class VwOverlayClass
	{
		
		delegate VwOverlay VwOverlayClassDelegate();
		
		public static VwOverlay Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwOverlay)form.Invoke(new VwOverlayClassDelegate(Create));
				}
			}
			return new _VwOverlayClass();
		}
	}
	#endregion
	
	public enum VwHeaderPositions
	{
		
		kvhpLeft = 1,
		
		kvhpRight = 2,
		
		kvhpOutside = 4,
		
		kvhpInside = 8,
		
		kvhpCenter = 16,
		
		kvhpOdd = 32,
		
		kvhpEven = 64,
		
		kvhpTop = 128,
		
		kvhpBottom = 256,
		
		kvhpFirst = 512,
		
		kgrfvhpNormal = 915,
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("FF2E1DC2-95A8-41c6-85F4-FFCA3A64216A")]
	public interface IVwPrintContext
	{
		
		IVwGraphics Graphics
		{
			get;
		}
		
		int FirstPageNumber
		{
			get;
		}
		
		bool get_IsPageWanted(int nPageNo);
		
		bool get_AreMorePagesWanted(int nPageNo);
		
		bool Aborted
		{
			get;
		}
		
		int Copies
		{
			get;
		}
		
		bool Collate
		{
			get;
		}
		
		ITsString get_HeaderString(VwHeaderPositions grfvhp, int _n);
		
		void GetMargins(out int _dxpLeft, out int _dxpRight, out int _dypHeader, out int _dypTop, out int _dypBottom, out int _dypFooter);
		
		void OpenPage();
		
		void ClosePage();
		
		void OpenDoc();
		
		void CloseDoc();
		
		int LastPageNo
		{
			get;
		}
		
		VwHeaderPositions HeaderMask
		{
			set;
		}
		
		void SetHeaderString(VwHeaderPositions grfvhp, ITsString _tss);
		
		void SetMargins(int dxpLeft, int dxpRight, int dypHeader, int dypTop, int dypBottom, int dypFooter);
		
		void SetPagePrintInfo(int nFirstPageNo, int nFirstPrintPage, int nLastPrintPage, int nCopies, bool fCollate);
		
		void SetGraphics(IVwGraphics _vg);
		
		void RequestAbort();
		
		void AbortDoc();
	}
	
	#region VwPrintContextWin32 CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwPrintContextWin32Class))]
	[Guid("FF2E1DC2-95A8-41c6-85F4-FFCA3A64216A")]
	public interface VwPrintContextWin32 : IVwPrintContext
	{
	}
	
	#region Private _VwPrintContextWin32Class class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("5E9FB977-66AE-4c16-A036-1D40E7713573")]
	internal class _VwPrintContextWin32Class : IVwPrintContext, VwPrintContextWin32
	{
		
		public virtual extern IVwGraphics Graphics
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern int FirstPageNumber
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_IsPageWanted(int nPageNo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_AreMorePagesWanted(int nPageNo);
		
		public virtual extern bool Aborted
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern int Copies
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern bool Collate
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString get_HeaderString(VwHeaderPositions grfvhp, int _n);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetMargins(out int _dxpLeft, out int _dxpRight, out int _dypHeader, out int _dypTop, out int _dypBottom, out int _dypFooter);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void OpenPage();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ClosePage();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void OpenDoc();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CloseDoc();
		
		public virtual extern int LastPageNo
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern VwHeaderPositions HeaderMask
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetHeaderString(VwHeaderPositions grfvhp, ITsString _tss);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetMargins(int dxpLeft, int dxpRight, int dypHeader, int dypTop, int dypBottom, int dypFooter);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetPagePrintInfo(int nFirstPageNo, int nFirstPrintPage, int nLastPrintPage, int nCopies, bool fCollate);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetGraphics(IVwGraphics _vg);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RequestAbort();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AbortDoc();
	}
	#endregion
	
	public static class VwPrintContextWin32Class
	{
		
		delegate VwPrintContextWin32 VwPrintContextWin32ClassDelegate();
		
		public static VwPrintContextWin32 Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwPrintContextWin32)form.Invoke(new VwPrintContextWin32ClassDelegate(Create));
				}
			}
			return new _VwPrintContextWin32Class();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("89F7B3C2-88E6-4ce4-AD17-EE4A6031B8DC")]
	public interface ISqlUndoAction
	{
		
		void SetSavePoint([MarshalAs(UnmanagedType.IUnknown)] object _ode);
		
		void AddRedoCommand([MarshalAs(UnmanagedType.IUnknown)] object _ode, [MarshalAs(UnmanagedType.IUnknown)] object _odc, string bstrSql);
		
		void AddRedoReloadInfo(IVwOleDbDa _odda, string bstrSqlReloadData, IDbColSpec _dcs, int hvoBase, int nrowMax, IAdvInd _advi);
		
		void AddUndoReloadInfo(IVwOleDbDa _odda, string bstrSqlReloadData, IDbColSpec _dcs, int hvoBase, int nrowMax, IAdvInd _advi);
	}
	
	#region SqlUndoAction CoClass definitions
	[ComImport()]
	[CoClass(typeof(_SqlUndoActionClass))]
	[Guid("89F7B3C2-88E6-4ce4-AD17-EE4A6031B8DC")]
	public interface SqlUndoAction : ISqlUndoAction
	{
	}
	
	#region Private _SqlUndoActionClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("77272239-3228-4b02-9B6A-1DC5539F8153")]
	internal class _SqlUndoActionClass : ISqlUndoAction, SqlUndoAction
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetSavePoint([MarshalAs(UnmanagedType.IUnknown)] object _ode);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AddRedoCommand([MarshalAs(UnmanagedType.IUnknown)] object _ode, [MarshalAs(UnmanagedType.IUnknown)] object _odc, string bstrSql);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AddRedoReloadInfo(IVwOleDbDa _odda, string bstrSqlReloadData, IDbColSpec _dcs, int hvoBase, int nrowMax, IAdvInd _advi);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AddUndoReloadInfo(IVwOleDbDa _odda, string bstrSqlReloadData, IDbColSpec _dcs, int hvoBase, int nrowMax, IAdvInd _advi);
	}
	#endregion
	
	public static class SqlUndoActionClass
	{
		
		delegate SqlUndoAction SqlUndoActionClassDelegate();
		
		public static SqlUndoAction Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (SqlUndoAction)form.Invoke(new SqlUndoActionClassDelegate(Create));
				}
			}
			return new _SqlUndoActionClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("FACD01D9-BAF4-4ef0-BED6-A8966160C94D")]
	public interface IVwPattern
	{
		
		ITsString Pattern
		{
			get;
			set;
		}
		
		IVwOverlay Overlay
		{
			get;
			set;
		}
		
		bool MatchCase
		{
			get;
			set;
		}
		
		bool MatchDiacritics
		{
			get;
			set;
		}
		
		bool MatchWholeWord
		{
			get;
			set;
		}
		
		bool MatchWritingSystem
		{
			get;
			set;
		}
		
		bool MatchExactly
		{
			get;
			set;
		}
		
		bool MatchCompatibility
		{
			get;
			set;
		}
		
		void Find(IVwRootBox _rootb, bool fForward, IVwSearchKiller _xserkl);
		
		void FindFrom(IVwSelection _sel, bool fForward, IVwSearchKiller _xserkl);
		
		void FindNext(bool fForward, IVwSearchKiller _xserkl);
		
		void FindIn(ITextSource _ts, int ichStart, int ichEnd, bool fForward, out int _ichMinFound, out int _ichLimFound, IVwSearchKiller _xserkl);
		
		void Install();
		
		bool Found
		{
			get;
		}
		
		IVwSelection GetSelection(bool fInstall);
		
		void CLevels(out int _clev);
		
		void AllTextSelInfo(out int _ihvoRoot, int cvlsi, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*VwSelLevInfo[]*/ _rgvsli, out int _tagTextProp, out int _cpropPrevious, out int _ichAnchor, out int _ichEnd, out int _enc);
		
		bool MatchWhole(ITsString _tss);
		
		IVwSelection Limit
		{
			get;
			set;
		}
		
		IVwSelection StartingPoint
		{
			get;
			set;
		}
		
		uint SearchWindow
		{
			get;
			set;
		}
		
		bool StoppedAtLimit
		{
			get;
			set;
		}
		
		bool LastDirection
		{
			get;
		}
		
		ITsString ReplaceWith
		{
			get;
			set;
		}
		
		bool ShowMore
		{
			get;
			set;
		}
	}
	
	#region VwPattern CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwPatternClass))]
	[Guid("FACD01D9-BAF4-4ef0-BED6-A8966160C94D")]
	public interface VwPattern : IVwPattern
	{
	}
	
	#region Private _VwPatternClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("6C659C76-3991-48dd-93F7-DA65847D4863")]
	internal class _VwPatternClass : IVwPattern, VwPattern
	{
		
		public virtual extern ITsString Pattern
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern IVwOverlay Overlay
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool MatchCase
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool MatchDiacritics
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool MatchWholeWord
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool MatchWritingSystem
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool MatchExactly
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool MatchCompatibility
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Find(IVwRootBox _rootb, bool fForward, IVwSearchKiller _xserkl);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FindFrom(IVwSelection _sel, bool fForward, IVwSearchKiller _xserkl);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FindNext(bool fForward, IVwSearchKiller _xserkl);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FindIn(ITextSource _ts, int ichStart, int ichEnd, bool fForward, out int _ichMinFound, out int _ichLimFound, IVwSearchKiller _xserkl);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Install();
		
		public virtual extern bool Found
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern IVwSelection GetSelection(bool fInstall);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CLevels(out int _clev);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AllTextSelInfo(out int _ihvoRoot, int cvlsi, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*VwSelLevInfo[]*/ _rgvsli, out int _tagTextProp, out int _cpropPrevious, out int _ichAnchor, out int _ichEnd, out int _enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool MatchWhole(ITsString _tss);
		
		public virtual extern IVwSelection Limit
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern IVwSelection StartingPoint
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern uint SearchWindow
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool StoppedAtLimit
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool LastDirection
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern ITsString ReplaceWith
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		public virtual extern bool ShowMore
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
	}
	#endregion
	
	public static class VwPatternClass
	{
		
		delegate VwPattern VwPatternClassDelegate();
		
		public static VwPattern Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwPattern)form.Invoke(new VwPatternClassDelegate(Create));
				}
			}
			return new _VwPatternClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("FF1B39DE-20D3-4cdd-A134-DCBE3BE23F3E")]
	public interface IVwSearchKiller
	{
		
		int Window
		{
			set;
		}
		
		void FlushMessages();
		
		bool AbortRequest
		{
			get;
			set;
		}
	}
	
	#region VwSearchKiller CoClass definitions
	[ComImport()]
	[CoClass(typeof(_VwSearchKillerClass))]
	[Guid("FF1B39DE-20D3-4cdd-A134-DCBE3BE23F3E")]
	public interface VwSearchKiller : IVwSearchKiller
	{
	}
	
	#region Private _VwSearchKillerClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("4ADA9157-67F8-499b-88CE-D63DF918DF83")]
	internal class _VwSearchKillerClass : IVwSearchKiller, VwSearchKiller
	{
		
		public virtual extern int Window
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FlushMessages();
		
		public virtual extern bool AbortRequest
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			set;
		}
	}
	#endregion
	
	public static class VwSearchKillerClass
	{
		
		delegate VwSearchKiller VwSearchKillerClassDelegate();
		
		public static VwSearchKiller Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (VwSearchKiller)form.Invoke(new VwSearchKillerClassDelegate(Create));
				}
			}
			return new _VwSearchKillerClass();
		}
	}
	#endregion
}

// --------------------------------------------------------------------------------------------
// Copyright (c) 2007, SIL International. All rights reserved.
// 
// File: FwKernelTlb.cs
// Responsibility: Generated by IDLImporter
// Last reviewed: 
// 
// <remarks>
// Generated by IDLImporter from file FwKernelTlb.idl
// 
// You should use these interfaces when you access the COM objects defined in the mentioned
// IDL/IDH file.
// </remarks>
// --------------------------------------------------------------------------------------------
namespace SIL.Fieldworks.Test
{
	using LanguageLib;
	using FwKernelLib;
	using Views;
	using System;
	using System.Runtime.InteropServices;
	using System.Runtime.CompilerServices;
	using System.Windows.Forms;
	using stdole;
	
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("37396941-4DD1-11d4-8078-0000C0FB81B5")]
	public interface IFwTool
	{
		
		int NewMainWnd(string bstrServerName, string bstrDbName, int hvoLangProj, int hvoMainObj, int encUi, int nTool, int nParam, out int _pidNew);
		
		int NewMainWndWithSel(string bstrServerName, string bstrDbName, int hvoLangProj, int hvoMainObj, int encUi, int nTool, int nParam, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=8)] int[] _rghvo, int chvo, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=10)] int[] _rgflid, int cflid, int ichCur, int nView, out int _pidNew);
		
		bool CloseMainWnd(int htool);
		
		void CloseDbAndWindows(string bstrSvrName, string bstrDbName, bool fOkToClose);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("7B22BF52-2748-4730-B094-095D8C082453")]
	public interface IUndoAction
	{
		
		void Undo();
		
		void Redo();
		
		void Commit();
		
		void IsDataChange(bool _fRet);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("32C2020C-3094-42bc-80FF-45AD89826F62")]
	public interface IActionHandler
	{
		
		void BeginUndoTask(string bstrUndo, string bstrRedo);
		
		void EndUndoTask();
		
		void ContinueUndoTask();
		
		void EndOuterUndoTask();
		
		void BreakUndoTask(string bstrUndo, string bstrRedo);
		
		void StartSeq(string bstrUndo, string bstrRedo, IUndoAction _uact);
		
		void AddAction(IUndoAction _uact);
		
		void GetUndoText(out string _bstrUndoText);
		
		void GetRedoText(out string _bstrRedoText);
		
		void CanUndo(out bool _fCanUndo);
		
		void CanRedo(out bool _fCanRedo);
		
		void Undo();
		
		void Redo();
		
		void Commit();
		
		void Close();
		
		void Mark(out int _hMark);
		
		void DiscardToMark(int hMark);
		
		int TopMarkHandle
		{
			get;
		}
		
		bool get_TasksSinceMark(bool fUndo);
	}
	
	#region ActionHandler CoClass definitions
	[ComImport()]
	[CoClass(typeof(_ActionHandlerClass))]
	[Guid("32C2020C-3094-42bc-80FF-45AD89826F62")]
	public interface ActionHandler : IActionHandler
	{
	}
	
	#region Private _ActionHandlerClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("CDED8B0B-5BD0-43be-96C4-6B8E8E7B017D")]
	internal class _ActionHandlerClass : IActionHandler, ActionHandler
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void BeginUndoTask(string bstrUndo, string bstrRedo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void EndUndoTask();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ContinueUndoTask();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void EndOuterUndoTask();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void BreakUndoTask(string bstrUndo, string bstrRedo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void StartSeq(string bstrUndo, string bstrRedo, IUndoAction _uact);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AddAction(IUndoAction _uact);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetUndoText(out string _bstrUndoText);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetRedoText(out string _bstrRedoText);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CanUndo(out bool _fCanUndo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CanRedo(out bool _fCanRedo);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Undo();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Redo();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Commit();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Close();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Mark(out int _hMark);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DiscardToMark(int hMark);
		
		public virtual extern int TopMarkHandle
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern bool get_TasksSinceMark(bool fUndo);
	}
	#endregion
	
	public static class ActionHandlerClass
	{
		
		delegate ActionHandler ActionHandlerClassDelegate();
		
		public static ActionHandler Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (ActionHandler)form.Invoke(new ActionHandlerClassDelegate(Create));
				}
			}
			return new _ActionHandlerClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("5F74AB40-EFE8-4a0d-B9AE-30F493FE6E21")]
	public interface IAdvInd
	{
		
		void Step(int nStepAmt);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("639C98DB-A241-496d-BE19-1EFC85CA1DD7")]
	public interface IAdvInd2 : IAdvInd
	{
		
		new void Step(int nStepAmt);
		
		void NextStage();
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("86b6ae62-3dfa-4020-b5d1-7fa28e7726e4")]
	public interface IAdvInd3 : IAdvInd
	{
		
		new void Step(int nStepAmt);
		
		string Title
		{
			set;
		}
		
		string Message
		{
			set;
		}
		
		int Position
		{
			set;
		}
		
		int StepSize
		{
			set;
		}
		
		void SetRange(int nMin, int nMax);
	}
	
	public enum FwTextPropVar
	{
		
		ktpvDefault = 0,
		
		ktpvMilliPoint = 1,
		
		ktpvRelative = 2,
		
		ktpvEnum = 3,
		
		ktpvNinch = 15,
	}
	
	public enum FwTextPropType
	{
		
		ktptEncAndWs = 1,
		
		ktptItalic = 2,
		
		ktptBold = 3,
		
		ktptSuperscript = 4,
		
		ktptUnderline = 5,
		
		ktptFontSize = 6,
		
		ktptOffset = 7,
		
		ktptForeColor = 8,
		
		ktptBackColor = 9,
		
		ktptUnderColor = 10,
		
		ktptBaseEncAndWs = 16,
		
		ktptAlign = 17,
		
		ktptFirstIndent = 18,
		
		ktptLeadingIndent = 19,
		
		ktptMarginLeading = 19,
		
		ktptTrailingIndent = 20,
		
		ktptMarginTrailing = 20,
		
		ktptSpaceBefore = 21,
		
		ktptMswMarginTop = 21,
		
		ktptSpaceAfter = 22,
		
		ktptMarginBottom = 22,
		
		ktptTabDef = 23,
		
		ktptLineHeight = 24,
		
		ktptParaColor = 25,
		
		ktptMarginTop = 50,
		
		ktptFontFamily = 1,
		
		ktptCharStyle = 2,
		
		ktptParaStyle = 3,
		
		ktptTabList = 4,
		
		ktptTags = 5,
		
		ktptObjData = 6,
		
		ktptRightToLeft = 128,
		
		ktptDirectionDepth = 129,
		
		ktptFontVariations = 130,
		
		ktptWritingSystemStyle = 131,
		
		ktptWsStyleAppend = 132,
		
		ktptNamedStyle = 133,
		
		ktptPadLeading = 134,
		
		ktptPadTrailing = 135,
		
		ktptPadTop = 136,
		
		ktptPadBottom = 137,
		
		ktptBorderTop = 138,
		
		ktptBorderBottom = 139,
		
		ktptBorderLeading = 140,
		
		ktptBorderTrailing = 141,
		
		ktptBorderColor = 142,
		
		ktptBulNumScheme = 143,
		
		ktptBulNumStartAt = 144,
		
		ktptBulNumTxtBef = 145,
		
		ktptBulNumTxtAft = 146,
		
		ktptBulNumFontInfo = 147,
		
		ktptKeepWithNext = 148,
		
		ktptKeepTogether = 149,
		
		ktptHyphenate = 150,
		
		ktptMaxLines = 151,
		
		ktptCellBorderWidth = 152,
		
		ktptCellSpacing = 153,
		
		ktptCellPadding = 154,
		
		ktptEditable = 155,
		
		ktptWsStyle = 156,
		
		ktptWsOverrides = 157,
		
		ktptWsOverridesAppend = 158,
		
		ktptSetRowDefaults = 159,
		
		ktptRelLineHeight = 160,
		
		ktptTableRule = 161,
		
		ktptFieldName = 9998,
		
		ktptMarkItem = 9999,
	}
	
	public enum TptEditable
	{
		
		ktptNotEditable = 0,
		
		ktptIsEditable,
		
		ktptSemiEditable,
	}
	
	public enum FwObjDataTypes
	{
		
		kodtPictEven = 1,
		
		kodtPictOdd = 2,
		
		kodtNameGuidHot,
		
		kodtExternalPathName,
	}
	
	public enum FwTextScalarProp
	{
		
		kscpEncoding = ((FwTextPropType.ktptEncAndWs)<<2)|2,
		
		kscpEncAndWs = ((FwTextPropType.ktptEncAndWs)<<2)|3,
		
		kscpItalic = ((FwTextPropType.ktptItalic)<<2)|0,
		
		kscpBold = ((FwTextPropType.ktptBold)<<2)|0,
		
		kscpSuperscript = ((FwTextPropType.ktptSuperscript)<<2)|0,
		
		kscpUnderline = ((FwTextPropType.ktptUnderline)<<2)|0,
		
		kscpFontSize = ((FwTextPropType.ktptFontSize)<<2)|2,
		
		kscpOffset = ((FwTextPropType.ktptOffset)<<2)|2,
		
		kscpForeColor = ((FwTextPropType.ktptForeColor)<<2)|2,
		
		kscpBackColor = ((FwTextPropType.ktptBackColor)<<2)|2,
		
		kscpUnderColor = ((FwTextPropType.ktptUnderColor)<<2)|2,
		
		kscpBaseEncoding = ((FwTextPropType.ktptBaseEncAndWs)<<2)|2,
		
		kscpBaseEncAndWs = ((FwTextPropType.ktptBaseEncAndWs)<<2)|3,
		
		kscpAlign = ((FwTextPropType.ktptAlign)<<2)|0,
		
		kscpFirstIndent = ((FwTextPropType.ktptFirstIndent)<<2)|2,
		
		kscpLeadingIndent = ((FwTextPropType.ktptLeadingIndent)<<2)|2,
		
		kscpTrailingIndent = ((FwTextPropType.ktptTrailingIndent)<<2)|2,
		
		kscpSpaceBefore = ((FwTextPropType.ktptSpaceBefore)<<2)|2,
		
		kscpSpaceAfter = ((FwTextPropType.ktptSpaceAfter)<<2)|2,
		
		kscpTabDef = ((FwTextPropType.ktptTabDef)<<2)|2,
		
		kscpLineHeight = ((FwTextPropType.ktptLineHeight)<<2)|2,
		
		kscpParaColor = ((FwTextPropType.ktptParaColor)<<2)|2,
		
		kscpMarkItem = ((FwTextPropType.ktptMarkItem)<<2)|0,
	}
	
	public enum FwTextStringProp
	{
		
		kstpFontFamily = FwTextPropType.ktptFontFamily,
		
		kstpCharStyle = FwTextPropType.ktptCharStyle,
		
		kstpParaStyle = FwTextPropType.ktptParaStyle,
		
		kstpTabList = FwTextPropType.ktptTabList,
		
		kstpTags = FwTextPropType.ktptTags,
		
		kstpObjData = FwTextPropType.ktptObjData,
		
		kstpFontVariations = FwTextPropType.ktptFontVariations,
		
		kstpWritingSystemStyle = FwTextPropType.ktptWritingSystemStyle,
		
		kstpWsStyleAppend = FwTextPropType.ktptWsStyleAppend,
		
		kstpNamedStyle = FwTextPropType.ktptNamedStyle,
		
		kstpBulNumTxtBef = FwTextPropType.ktptBulNumTxtBef,
		
		kstpBulNumTxtAft = FwTextPropType.ktptBulNumTxtAft,
		
		kstpBulNumFontInfo = FwTextPropType.ktptBulNumFontInfo,
		
		kstpWsStyle = FwTextPropType.ktptWsStyle,
		
		kstpWsOverrides = FwTextPropType.ktptWsOverrides,
		
		kstpWsOverridesAppend = FwTextPropType.ktptWsOverridesAppend,
		
		kstpFieldName = FwTextPropType.ktptFieldName,
	}
	
	public enum FwTextPropConstants
	{
		
		kdenTextPropRel = 10000,
		
		kcbitTextPropVar = 4,
		
		knNinch = -2147483648,
		
		knConflicting = -2147483647,
	}
	
	public enum FwTextToggleVal
	{
		
		kttvOff = 0,
		
		kttvForceOn = 1,
		
		kttvInvert = 2,
	}
	
	public enum FwSuperscriptVal
	{
		
		kssvOff = 0,
		
		kssvSuper = 1,
		
		kssvSub = 2,
	}
	
	public enum FwTextColor
	{
		
		kclrWhite = 16777215,
		
		kclrBlack = 0,
		
		kclrRed = 255,
		
		kclrGreen = 65280,
		
		kclrBlue = 16711680,
		
		kclrYellow = 65535,
		
		kclrMagenta = 16711935,
		
		kclrCyan = 16776960,
		
		kclrReserved1 = -2147483648,
		
		kclrReserved2 = -2147483647,
		
		kclrTransparent = -1073741824,
	}
	
	public enum FwUnderlineType
	{
		
		kuntMin,
		
		kuntNone = kuntMin,
		
		kuntDotted,
		
		kuntDashed,
		
		kuntSingle,
		
		kuntDouble,
		
		kuntSquiggle,
		
		kuntLim,
	}
	
	public enum FwTextAlign
	{
		
		ktalMin,
		
		ktalLeading = ktalMin,
		
		ktalLeft,
		
		ktalCenter,
		
		ktalRight,
		
		ktalTrailing,
		
		ktalJustify,
		
		ktalLim,
	}
	
	[StructLayout(LayoutKind.Sequential, Pack=4)]
	public struct TsRunInfo
	{
		
		public int ichMin;
		
		public int ichLim;
		
		public int irun;
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("F1EF76E2-BE04-11d3-8D9A-005004DEFEC4")]
	public interface ITsString
	{
		
		string Text
		{
			get;
		}
		
		int Length
		{
			get;
		}
		
		int RunCount
		{
			get;
		}
		
		int get_RunAt(int ich);
		
		int get_MinOfRun(int irun);
		
		int get_LimOfRun(int irun);
		
		void GetBoundsOfRun(int irun, out int _ichMin, out int _ichLim);
		
		ITsTextProps FetchRunInfoAt(int ich, out TsRunInfo _tri);
		
		ITsTextProps FetchRunInfo(int irun, out TsRunInfo _tri);
		
		string get_RunText(int irun);
		
		string GetChars(int ichMin, int ichLim);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void FetchChars(int ichMin, int ichLim, out string _rgch);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void LockText(out ushort _prgch, out int _cch);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void UnlockText(ushort _rgch);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void LockRun(int irun, out ushort _prgch, out int _cch);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void UnlockRun(int irun, ushort _rgch);
		
		ITsTextProps get_PropertiesAt(int ich);
		
		ITsTextProps get_Properties(int irun);
		
		ITsStrBldr GetBldr();
		
		ITsIncStrBldr GetIncBldr();
		
		System.Guid GetFactoryClsid();
		
		void SerializeFmt(IStream _strm);
		
		int SerializeFmtRgb([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*BYTE[]*/ _rgb, int cbMax);
		
		bool Equals(ITsString _tss);
		
		void WriteAsXml(IStream _strm, int cchIndent, int enc, bool fWriteObjData);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("F3342FE2-205F-45a8-890B-09BE9BBDC6B7")]
	public interface ITsTextProps
	{
		
		int IntPropCount
		{
			get;
		}
		
		int GetIntProp(int iv, out int _tpt, out int _nVar);
		
		int GetIntPropValues(int tpt, out int _nVar);
		
		int StrPropCount
		{
			get;
		}
		
		string GetStrProp(int iv, out int _tpt);
		
		string GetStrPropValue(int tpt);
		
		ITsPropsBldr GetBldr();
		
		System.Guid GetFactoryClsid();
		
		void Serialize(IStream _strm);
		
		int SerializeRgb([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*BYTE[]*/ _rgb, int cbMax);
		
		int SerializeRgPropsRgb(int cpttp, ITsTextProps rgpttp, int rgich, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*BYTE[]*/ _rgb, int cbMax);
		
		void WriteAsXml(IStream _strm, int cchIndent);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("F1EF76E4-BE04-11d3-8D9A-005004DEFEC4")]
	public interface ITsStrFactory
	{
		
		ITsString DeserializeStringStreams(IStream _strmTxt, IStream _strmFmt);
		
		ITsString DeserializeString(string bstrTxt, IStream _strmFmt);
		
		ITsString DeserializeStringRgb(string bstrTxt, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] _rgbFmt, int cbFmt);
		
		ITsString DeserializeStringRgch(string _rgchTxt, ref int _cchTxt, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] _rgbFmt, ref int _cbFmt);
		
		ITsString MakeString(string bstr, int enc);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		ITsString MakeStringRgch(string _rgch, int cch, int enc);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		ITsString MakeStringWithPropsRgch(string _rgch, int cch, ITsTextProps _ttp);
		
		ITsStrBldr GetBldr();
		
		ITsIncStrBldr GetIncBldr();
		
		int get_RunCount([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rgbFmt, int cbFmt);
		
		ITsTextProps FetchRunInfoAt([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rgbFmt, int cbFmt, int ich, out TsRunInfo _tri);
		
		ITsTextProps FetchRunInfo([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rgbFmt, int cbFmt, int irun, out TsRunInfo _tri);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8DCE56A6-CFF1-4402-95FE-2B574912B54E")]
	public interface ITsPropsFactory
	{
		
		ITsTextProps DeserializeProps(IStream _strm);
		
		ITsTextProps DeserializePropsRgb([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rgb, ref int _cb);
		
		void DeserializeRgPropsRgb(int cpttpMax, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] _rgb, ref int _cb, out int _cpttpRet, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*ITsTextProps[]*/ rgpttp, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ rgich);
		
		ITsTextProps MakeProps(string bstrStyle, int enc, int ws);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		ITsTextProps MakePropsRgch(string _rgchStyle, int cch, int enc, int ws);
		
		void GetPropsBldr(out ITsPropsBldr _ptpb);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("F1EF76E6-BE04-11d3-8D9A-005004DEFEC4")]
	public interface ITsStrBldr
	{
		
		string Text
		{
			get;
		}
		
		int Length
		{
			get;
		}
		
		int RunCount
		{
			get;
		}
		
		int get_RunAt(int ich);
		
		void GetBoundsOfRun(int irun, out int _ichMin, out int _ichLim);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		ITsTextProps FetchRunInfoAt(int ich, out TsRunInfo _tri);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		ITsTextProps FetchRunInfo(int irun, out TsRunInfo _tri);
		
		string get_RunText(int irun);
		
		string GetChars(int ichMin, int ichLim);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void FetchChars(int ichMin, int ichLim, out string _rgch);
		
		ITsTextProps get_PropertiesAt(int ich);
		
		ITsTextProps get_Properties(int irun);
		
		void Replace(int ichMin, int ichLim, string bstrIns, ITsTextProps _ttp);
		
		void ReplaceTsString(int ichMin, int ichLim, ITsString _tssIns);
		
		void ReplaceRgch(int ichMin, int ichLim, string _rgchIns, int cchIns, ITsTextProps _ttp);
		
		void SetProperties(int ichMin, int ichLim, ITsTextProps _ttp);
		
		void SetIntPropValues(int ichMin, int ichLim, int tpt, int nVar, int nVal);
		
		void SetStrPropValue(int ichMin, int ichLim, int tpt, string bstrVal);
		
		ITsString GetString();
		
		void Clear();
		
		System.Guid GetBldrClsid();
		
		void SerializeFmt(IStream _strm);
		
		int SerializeFmtRgb([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*BYTE[]*/ _rgb, int cbMax);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("F1EF76E7-BE04-11d3-8D9A-005004DEFEC4")]
	public interface ITsIncStrBldr
	{
		
		string Text
		{
			get;
		}
		
		void Append(string bstrIns);
		
		void AppendTsString(ITsString _tssIns);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		void AppendRgch(string _rgchIns, int cchIns);
		
		void SetIntPropValues(int tpt, int nVar, int nVal);
		
		void SetStrPropValue(int tpt, string bstrVal);
		
		ITsString GetString();
		
		void Clear();
		
		System.Guid GetIncBldrClsid();
		
		void SerializeFmt(IStream _strm);
		
		int SerializeFmtRgb([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*BYTE[]*/ _rgb, int cbMax);
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("F1EF76E8-BE04-11d3-8D9A-005004DEFEC4")]
	public interface ITsPropsBldr
	{
		
		int IntPropCount
		{
			get;
		}
		
		void GetIntProp(int iv, out int _tpt, out int _nVar, out int _nVal);
		
		void GetIntPropValues(int tpt, out int _nVar, out int _nVal);
		
		int StrPropCount
		{
			get;
		}
		
		void GetStrProp(int iv, out int _tpt, out string _bstrVal);
		
		void GetStrPropValue(int tpt, out string _bstrVal);
		
		void SetIntPropValues(int tpt, int nVar, int nVal);
		
		void SetStrPropValue(int tpt, string bstrVal);
		
		ITsTextProps GetTextProps();
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("DD409520-C212-11d3-9BB7-00400541F9E9")]
	public interface ITsMultiString
	{
		
		int StringCount
		{
			get;
		}
		
		ITsString GetStringFromIndex(int ienc, out int _enc);
		
		ITsString get_String(int enc);
		
		void set_String(int enc, ITsString _tss);
	}
	
	#region TsStrFactory CoClass definitions
	[ComImport()]
	[CoClass(typeof(_TsStrFactoryClass))]
	[Guid("F1EF76E4-BE04-11d3-8D9A-005004DEFEC4")]
	public interface TsStrFactory : ITsStrFactory
	{
	}
	
	#region Private _TsStrFactoryClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("F1EF76E9-BE04-11d3-8D9A-005004DEFEC4")]
	internal class _TsStrFactoryClass : ITsStrFactory, TsStrFactory
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString DeserializeStringStreams(IStream _strmTxt, IStream _strmFmt);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString DeserializeString(string bstrTxt, IStream _strmFmt);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString DeserializeStringRgb(string bstrTxt, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] _rgbFmt, int cbFmt);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString DeserializeStringRgch(string _rgchTxt, ref int _cchTxt, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=3)] byte[] _rgbFmt, ref int _cbFmt);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString MakeString(string bstr, int enc);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString MakeStringRgch(string _rgch, int cch, int enc);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString MakeStringWithPropsRgch(string _rgch, int cch, ITsTextProps _ttp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsStrBldr GetBldr();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsIncStrBldr GetIncBldr();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_RunCount([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rgbFmt, int cbFmt);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps FetchRunInfoAt([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rgbFmt, int cbFmt, int ich, out TsRunInfo _tri);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps FetchRunInfo([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rgbFmt, int cbFmt, int irun, out TsRunInfo _tri);
	}
	#endregion
	
	public static class TsStrFactoryClass
	{
		
		delegate TsStrFactory TsStrFactoryClassDelegate();
		
		public static TsStrFactory Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (TsStrFactory)form.Invoke(new TsStrFactoryClassDelegate(Create));
				}
			}
			return new _TsStrFactoryClass();
		}
	}
	#endregion
	
	#region TsPropsFactory CoClass definitions
	[ComImport()]
	[CoClass(typeof(_TsPropsFactoryClass))]
	[Guid("8DCE56A6-CFF1-4402-95FE-2B574912B54E")]
	public interface TsPropsFactory : ITsPropsFactory
	{
	}
	
	#region Private _TsPropsFactoryClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("F1EF76EA-BE04-11d3-8D9A-005004DEFEC4")]
	internal class _TsPropsFactoryClass : ITsPropsFactory, TsPropsFactory
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps DeserializeProps(IStream _strm);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps DeserializePropsRgb([MarshalAs(UnmanagedType.LPArray, SizeParamIndex=1)] byte[] _rgb, ref int _cb);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DeserializeRgPropsRgb(int cpttpMax, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] _rgb, ref int _cb, out int _cpttpRet, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*ITsTextProps[]*/ rgpttp, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*int[]*/ rgich);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps MakeProps(string bstrStyle, int enc, int ws);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps MakePropsRgch(string _rgchStyle, int cch, int enc, int ws);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetPropsBldr(out ITsPropsBldr _ptpb);
	}
	#endregion
	
	public static class TsPropsFactoryClass
	{
		
		delegate TsPropsFactory TsPropsFactoryClassDelegate();
		
		public static TsPropsFactory Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (TsPropsFactory)form.Invoke(new TsPropsFactoryClassDelegate(Create));
				}
			}
			return new _TsPropsFactoryClass();
		}
	}
	#endregion
	
	#region TsStrBldr CoClass definitions
	[ComImport()]
	[CoClass(typeof(_TsStrBldrClass))]
	[Guid("F1EF76E6-BE04-11d3-8D9A-005004DEFEC4")]
	public interface TsStrBldr : ITsStrBldr
	{
	}
	
	#region Private _TsStrBldrClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("F1EF76EB-BE04-11d3-8D9A-005004DEFEC4")]
	internal class _TsStrBldrClass : ITsStrBldr, TsStrBldr
	{
		
		public virtual extern string Text
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern int Length
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		public virtual extern int RunCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int get_RunAt(int ich);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetBoundsOfRun(int irun, out int _ichMin, out int _ichLim);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps FetchRunInfoAt(int ich, out TsRunInfo _tri);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps FetchRunInfo(int irun, out TsRunInfo _tri);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string get_RunText(int irun);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern string GetChars(int ichMin, int ichLim);
		
		[Obsolete("Can\'t call COM method marked with [local] attribute in IDL file")]
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void FetchChars(int ichMin, int ichLim, out string _rgch);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps get_PropertiesAt(int ich);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps get_Properties(int irun);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Replace(int ichMin, int ichLim, string bstrIns, ITsTextProps _ttp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ReplaceTsString(int ichMin, int ichLim, ITsString _tssIns);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ReplaceRgch(int ichMin, int ichLim, string _rgchIns, int cchIns, ITsTextProps _ttp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetProperties(int ichMin, int ichLim, ITsTextProps _ttp);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetIntPropValues(int ichMin, int ichLim, int tpt, int nVar, int nVal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetStrPropValue(int ichMin, int ichLim, int tpt, string bstrVal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString GetString();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Clear();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern System.Guid GetBldrClsid();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SerializeFmt(IStream _strm);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int SerializeFmtRgb([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*BYTE[]*/ _rgb, int cbMax);
	}
	#endregion
	
	public static class TsStrBldrClass
	{
		
		delegate TsStrBldr TsStrBldrClassDelegate();
		
		public static TsStrBldr Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (TsStrBldr)form.Invoke(new TsStrBldrClassDelegate(Create));
				}
			}
			return new _TsStrBldrClass();
		}
	}
	#endregion
	
	#region TsIncStrBldr CoClass definitions
	[ComImport()]
	[CoClass(typeof(_TsIncStrBldrClass))]
	[Guid("F1EF76E7-BE04-11d3-8D9A-005004DEFEC4")]
	public interface TsIncStrBldr : ITsIncStrBldr
	{
	}
	
	#region Private _TsIncStrBldrClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("F1EF76EC-BE04-11d3-8D9A-005004DEFEC4")]
	internal class _TsIncStrBldrClass : ITsIncStrBldr, TsIncStrBldr
	{
		
		public virtual extern string Text
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Append(string bstrIns);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AppendTsString(ITsString _tssIns);
		
		[TypeLibFunc(TypeLibFuncFlags.FRestricted)]
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void AppendRgch(string _rgchIns, int cchIns);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetIntPropValues(int tpt, int nVar, int nVal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetStrPropValue(int tpt, string bstrVal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString GetString();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Clear();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern System.Guid GetIncBldrClsid();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SerializeFmt(IStream _strm);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern int SerializeFmtRgb([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef=typeof(ArrayPtrMarshaler))] ArrayPtr/*BYTE[]*/ _rgb, int cbMax);
	}
	#endregion
	
	public static class TsIncStrBldrClass
	{
		
		delegate TsIncStrBldr TsIncStrBldrClassDelegate();
		
		public static TsIncStrBldr Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (TsIncStrBldr)form.Invoke(new TsIncStrBldrClassDelegate(Create));
				}
			}
			return new _TsIncStrBldrClass();
		}
	}
	#endregion
	
	#region TsPropsBldr CoClass definitions
	[ComImport()]
	[CoClass(typeof(_TsPropsBldrClass))]
	[Guid("F1EF76E8-BE04-11d3-8D9A-005004DEFEC4")]
	public interface TsPropsBldr : ITsPropsBldr
	{
	}
	
	#region Private _TsPropsBldrClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("F1EF76ED-BE04-11d3-8D9A-005004DEFEC4")]
	internal class _TsPropsBldrClass : ITsPropsBldr, TsPropsBldr
	{
		
		public virtual extern int IntPropCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetIntProp(int iv, out int _tpt, out int _nVar, out int _nVal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetIntPropValues(int tpt, out int _nVar, out int _nVal);
		
		public virtual extern int StrPropCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetStrProp(int iv, out int _tpt, out string _bstrVal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetStrPropValue(int tpt, out string _bstrVal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetIntPropValues(int tpt, int nVar, int nVal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void SetStrPropValue(int tpt, string bstrVal);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsTextProps GetTextProps();
	}
	#endregion
	
	public static class TsPropsBldrClass
	{
		
		delegate TsPropsBldr TsPropsBldrClassDelegate();
		
		public static TsPropsBldr Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (TsPropsBldr)form.Invoke(new TsPropsBldrClassDelegate(Create));
				}
			}
			return new _TsPropsBldrClass();
		}
	}
	#endregion
	
	#region TsMultiString CoClass definitions
	[ComImport()]
	[CoClass(typeof(_TsMultiStringClass))]
	[Guid("DD409520-C212-11d3-9BB7-00400541F9E9")]
	public interface TsMultiString : ITsMultiString
	{
	}
	
	#region Private _TsMultiStringClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("7A1B89C0-C2D6-11d3-9BB7-00400541F9E9")]
	internal class _TsMultiStringClass : ITsMultiString, TsMultiString
	{
		
		public virtual extern int StringCount
		{
			[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
			get;
		}
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString GetStringFromIndex(int ienc, out int _enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern ITsString get_String(int enc);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void set_String(int enc, ITsString _tss);
	}
	#endregion
	
	public static class TsMultiStringClass
	{
		
		delegate TsMultiString TsMultiStringClassDelegate();
		
		public static TsMultiString Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (TsMultiString)form.Invoke(new TsMultiStringClassDelegate(Create));
				}
			}
			return new _TsMultiStringClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("1C0FA5AF-00B4-4dc1-8F9E-168AF3F892B0")]
	public interface IBackupDelegates
	{
		
		string GetLocalServer_Bkupd();
		
		IStream GetLogPointer_Bkupd();
		
		void SaveAllData_Bkupd(string _szDbName);
		
		bool CloseDbAndWindows_Bkupd(string _szSvrName, string _szDbName, bool fOkToClose);
		
		void IncExportedObjects_Bkupd();
		
		void DecExportedObjects_Bkupd();
		
		bool CheckDbVerCompatibility_Bkupd(string _szSvrName, string _szDbName);
		
		void ReopenDbAndOneWindow_Bkupd(string _szSvrName, string _szDbName);
	}
	
	[ComImport()]
	[Guid("00A94783-8F5F-42af-A993-49F2154A67E2")]
	public interface DIFwBackupDb
	{
		
		void Init(IBackupDelegates _bkupd, int hwndParent);
		
		void CheckForMissedSchedules();
		
		void Backup();
		
		void Remind();
		
		void UserConfigure(bool fShowRestore, out int _nUserAction);
	}
	
	#region FwBackup CoClass definitions
	[ComImport()]
	[CoClass(typeof(_FwBackupClass))]
	[Guid("00A94783-8F5F-42af-A993-49F2154A67E2")]
	public interface FwBackup : DIFwBackupDb
	{
	}
	
	#region Private _FwBackupClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("0783E03E-5208-4d71-9D98-3D4974C8E633")]
	internal class _FwBackupClass : DIFwBackupDb, FwBackup
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Init(IBackupDelegates _bkupd, int hwndParent);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CheckForMissedSchedules();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Backup();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Remind();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void UserConfigure(bool fShowRestore, out int _nUserAction);
	}
	#endregion
	
	public static class FwBackupClass
	{
		
		delegate FwBackup FwBackupClassDelegate();
		
		public static FwBackup Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (FwBackup)form.Invoke(new FwBackupClassDelegate(Create));
				}
			}
			return new _FwBackupClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("0CC74E0C-3017-4c02-A507-3FB8CE621CDC")]
	public interface IDisconnectDb
	{
		
		void Init(string bstrDatabase, string bstrServer, string bstrReason, string bstrExternalReason, bool fConfirmCancel, string bstrCancelQuestion, int hwndParent);
		
		void CheckConnections(out int _nResponse);
		
		void DisconnectAll(out bool _fResult);
		
		void ForceDisconnectAll();
	}
	
	#region FwDisconnect CoClass definitions
	[ComImport()]
	[CoClass(typeof(_FwDisconnectClass))]
	[Guid("0CC74E0C-3017-4c02-A507-3FB8CE621CDC")]
	public interface FwDisconnect : IDisconnectDb
	{
	}
	
	#region Private _FwDisconnectClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("008B93C5-866A-4238-963B-3F6C51B5BB03")]
	internal class _FwDisconnectClass : IDisconnectDb, FwDisconnect
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Init(string bstrDatabase, string bstrServer, string bstrReason, string bstrExternalReason, bool fConfirmCancel, string bstrCancelQuestion, int hwndParent);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void CheckConnections(out int _nResponse);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void DisconnectAll(out bool _fResult);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void ForceDisconnectAll();
	}
	#endregion
	
	public static class FwDisconnectClass
	{
		
		delegate FwDisconnect FwDisconnectClassDelegate();
		
		public static FwDisconnect Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (FwDisconnect)form.Invoke(new FwDisconnectClassDelegate(Create));
				}
			}
			return new _FwDisconnectClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("004C42AE-CB07-47b5-A936-D9CA4AC466D7")]
	public interface IRemoteDbWarn
	{
		
		void WarnSimple(string bstrMessage, int nFlags, out int _nResponse);
		
		void WarnWithTimeout(string bstrMessage, int nTimeLeft);
		
		void Cancel();
	}
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("06082023-C2BA-4425-90FD-2F76B74CCBE7")]
	public interface IDbWarnSetup
	{
		
		void PermitRemoteWarnings();
		
		void RefuseRemoteWarnings();
	}
	
	#region FwRemote CoClass definitions
	[ComImport()]
	[CoClass(typeof(_FwRemoteClass))]
	[Guid("004C42AE-CB07-47b5-A936-D9CA4AC466D7")]
	public interface FwRemote : IRemoteDbWarn, IDbWarnSetup
	{
	}
	
	#region Private _FwRemoteClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("0732A981-4921-4d4b-9E1D-AF9362E2708D")]
	internal class _FwRemoteClass : IRemoteDbWarn, FwRemote
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void PermitRemoteWarnings();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void RefuseRemoteWarnings();
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void WarnSimple(string bstrMessage, int nFlags, out int _nResponse);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void WarnWithTimeout(string bstrMessage, int nTimeLeft);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Cancel();
	}
	#endregion
	
	public static class FwRemoteClass
	{
		
		delegate FwRemote FwRemoteClassDelegate();
		
		public static FwRemote Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (FwRemote)form.Invoke(new FwRemoteClassDelegate(Create));
				}
			}
			return new _FwRemoteClass();
		}
	}
	#endregion
	
	[ComImport()]
	[InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
	[Guid("8645fa52-ee90-11d2-a9b8-0080c87b6086")]
	public interface IOpenFWProjectDlg
	{
		
		void Show(IStream fist, string bstrLocalServer, int userEnc, uint hwndParent, bool fAllowMenu, int clidSubitem, string bstrHelpUrl);
		
		void GetResults(out bool fHaveProject, out int hvoProj, out string bstrProject, out string bstrDatabase, out string bstrMachine, out System.Guid guid, out bool fHaveSubitem, out int hvoSubitem, out string bstrName);
	}
	
	#region OpenFWProjectDlg CoClass definitions
	[ComImport()]
	[CoClass(typeof(_OpenFWProjectDlgClass))]
	[Guid("8645fa52-ee90-11d2-a9b8-0080c87b6086")]
	public interface OpenFWProjectDlg : IOpenFWProjectDlg
	{
	}
	
	#region Private _OpenFWProjectDlgClass class
	[ComImport()]
	[ClassInterface(ClassInterfaceType.None)]
	[TypeLibType(TypeLibTypeFlags.FCanCreate)]
	[Guid("8645fa53-ee90-11d2-a9b8-0080c87b6086")]
	internal class _OpenFWProjectDlgClass : IOpenFWProjectDlg, OpenFWProjectDlg
	{
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void Show(IStream fist, string bstrLocalServer, int userEnc, uint hwndParent, bool fAllowMenu, int clidSubitem, string bstrHelpUrl);
		
		[MethodImpl(MethodImplOptions.InternalCall, MethodCodeType=MethodCodeType.Runtime)]
		public virtual extern void GetResults(out bool fHaveProject, out int hvoProj, out string bstrProject, out string bstrDatabase, out string bstrMachine, out System.Guid guid, out bool fHaveSubitem, out int hvoSubitem, out string bstrName);
	}
	#endregion
	
	public static class OpenFWProjectDlgClass
	{
		
		delegate OpenFWProjectDlg OpenFWProjectDlgClassDelegate();
		
		public static OpenFWProjectDlg Create()
		{
			if ((Application.OpenForms.Count > 0))
			{
				Form form = Application.OpenForms[0];
				if (form.InvokeRequired)
				{
					return (OpenFWProjectDlg)form.Invoke(new OpenFWProjectDlgClassDelegate(Create));
				}
			}
			return new _OpenFWProjectDlgClass();
		}
	}
	#endregion
}
